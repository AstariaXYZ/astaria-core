{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "conduitController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadContractSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadFraction",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BadReturnValueFromERC20OnTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "BadSignatureV",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConsiderationCriteriaResolverOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "considerationIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortfallAmount",
          "type": "uint256"
        }
      ],
      "name": "ConsiderationNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CriteriaNotEnabledForItem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "identifiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ERC1155BatchTransferGenericFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EtherTransferGenericFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InexactFraction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientEtherSupplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Invalid1155BatchTransferEncoding",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBasicOrderParameterEncoding",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "conduit",
          "type": "address"
        }
      ],
      "name": "InvalidCallToConduit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCanceller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conduitKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "conduit",
          "type": "address"
        }
      ],
      "name": "InvalidConduit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidERC721TransferAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFulfillmentComponentData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InvalidMsgValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNativeOfferItem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidRestrictedOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedFulfillmentOfferAndConsiderationComponents",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum Side",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "MissingFulfillmentComponentOnAggregation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingItemAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingOriginalConsiderationItems",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NoContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoReentrantCalls",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSpecifiedOrdersAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OfferAndConsiderationRequiredOnFulfillment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OfferCriteriaResolverOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderAlreadyFilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OrderCriteriaResolverOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderIsCancelled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderPartiallyFilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PartialFillsNotEnabledForOrder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "identifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferGenericFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnresolvedConsiderationCriteria",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnresolvedOfferCriteria",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnusedItemParameters",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCounter",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerer",
          "type": "address"
        }
      ],
      "name": "CounterIncremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "zone",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SpentItem[]",
          "name": "offer",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ReceivedItem[]",
          "name": "consideration",
          "type": "tuple[]"
        }
      ],
      "name": "OrderFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offerer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "zone",
          "type": "address"
        }
      ],
      "name": "OrderValidated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifierOrCriteria",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OfferItem[]",
              "name": "offer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifierOrCriteria",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ConsiderationItem[]",
              "name": "consideration",
              "type": "tuple[]"
            },
            {
              "internalType": "enum OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "zoneHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderComponents[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "uint120",
              "name": "numerator",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "denominator",
              "type": "uint120"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AdvancedOrder",
          "name": "advancedOrder",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "criteriaProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct CriteriaResolver[]",
          "name": "criteriaResolvers",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32",
          "name": "fulfillerConduitKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "fulfillAdvancedOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "uint120",
              "name": "numerator",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "denominator",
              "type": "uint120"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AdvancedOrder[]",
          "name": "advancedOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "criteriaProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct CriteriaResolver[]",
          "name": "criteriaResolvers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct FulfillmentComponent[][]",
          "name": "offerFulfillments",
          "type": "tuple[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct FulfillmentComponent[][]",
          "name": "considerationFulfillments",
          "type": "tuple[][]"
        },
        {
          "internalType": "bytes32",
          "name": "fulfillerConduitKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maximumFulfilled",
          "type": "uint256"
        }
      ],
      "name": "fulfillAvailableAdvancedOrders",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "availableOrders",
          "type": "bool[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ReceivedItem",
              "name": "item",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct FulfillmentComponent[][]",
          "name": "offerFulfillments",
          "type": "tuple[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct FulfillmentComponent[][]",
          "name": "considerationFulfillments",
          "type": "tuple[][]"
        },
        {
          "internalType": "bytes32",
          "name": "fulfillerConduitKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maximumFulfilled",
          "type": "uint256"
        }
      ],
      "name": "fulfillAvailableOrders",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "availableOrders",
          "type": "bool[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ReceivedItem",
              "name": "item",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "considerationToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "considerationIdentifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "considerationAmount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "offerToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offerIdentifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offerAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum BasicOrderType",
              "name": "basicOrderType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "zoneHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "offererConduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fulfillerConduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "totalOriginalAdditionalRecipients",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct AdditionalRecipient[]",
              "name": "additionalRecipients",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct BasicOrderParameters",
          "name": "parameters",
          "type": "tuple"
        }
      ],
      "name": "fulfillBasicOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "fulfillerConduitKey",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "offerer",
          "type": "address"
        }
      ],
      "name": "getCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifierOrCriteria",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OfferItem[]",
              "name": "offer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifierOrCriteria",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ConsiderationItem[]",
              "name": "consideration",
              "type": "tuple[]"
            },
            {
              "internalType": "enum OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "zoneHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderComponents",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "getOrderHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "getOrderStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValidated",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCancelled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalFilled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newCounter",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "information",
      "outputs": [
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "conduitController",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "uint120",
              "name": "numerator",
              "type": "uint120"
            },
            {
              "internalType": "uint120",
              "name": "denominator",
              "type": "uint120"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AdvancedOrder[]",
          "name": "advancedOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "criteriaProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct CriteriaResolver[]",
          "name": "criteriaResolvers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FulfillmentComponent[]",
              "name": "offerComponents",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FulfillmentComponent[]",
              "name": "considerationComponents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Fulfillment[]",
          "name": "fulfillments",
          "type": "tuple[]"
        }
      ],
      "name": "matchAdvancedOrders",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ReceivedItem",
              "name": "item",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FulfillmentComponent[]",
              "name": "offerComponents",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FulfillmentComponent[]",
              "name": "considerationComponents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Fulfillment[]",
          "name": "fulfillments",
          "type": "tuple[]"
        }
      ],
      "name": "matchOrders",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "internalType": "struct ReceivedItem",
              "name": "item",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Execution[]",
          "name": "executions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]"
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalConsiderationItems",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OrderParameters",
              "name": "parameters",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validated",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "1115:27531:30:-:0;;;1544:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1597:17;;;;;;;;;1930:19:31;:17;:19::i;:::-;1723:226;;;;;;;;;;;;;;-1:-1:-1;1723:226:31;;;2050:13;2038:25;;;;-1:-1:-1;2724:187:31;;-1:-1:-1;2724:187:31;;;7466:25:144;;;;7507:18;;;7500:34;;;;-1:-1:-1;7550:18:144;;7543:34;;;;7593:18;;;7586:34;2892:4:31;7636:19:144;;;7629:61;2724:187:31;;;;;;;;;;7438:19:144;;2724:187:31;;;2701:220;;;;;2073:44;;-1:-1:-1;;;;;2176:67:31;;;;;;2383:42;;;-1:-1:-1;;;2383:42:31;;;;:40;;:42;;;;;;;;;;;;;2176:67;2383:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2335:100:31;;-1:-1:-1;;2345:1:32;658:16:44;:31;-1:-1:-1;1115:27531:30;;-1:-1:-1;;;;;;;1115:27531:30;5176:3025:31;5265:16;;;;;;5581:13;4368:22;;;;;;;;;;;;-1:-1:-1;;;4368:22:31;;;;;4245:152;5581:13;5565:31;;;;;;;5693:12;;;;;;;;;;;-1:-1:-1;;;5693:12:31;;;;5827:264;5565:31;;-1:-1:-1;5683:23:31;;-1:-1:-1;;;5827:264:31;;;-1:-1:-1;;;1486:25:144;;-1:-1:-1;;;1536:2:144;1527:12;;1520:39;-1:-1:-1;;;1584:2:144;1575:12;;1568:38;1636:31;1631:2;1622:12;;1615:53;1698:22;1693:2;1684:12;;1677:44;-1:-1:-1;;;1746:2:144;1737:12;;1730:41;-1:-1:-1;;;1796:3:144;1787:13;;1780:26;1831:3;1822:13;;678:1163;5827:264:31;;;;-1:-1:-1;;5827:264:31;;;;;;;;;-1:-1:-1;;;5827:264:31;6228:310;;2755:33:144;-1:-1:-1;;;2804:12:144;;;2797:39;-1:-1:-1;;;2852:12:144;;;2845:38;2913:31;2899:12;;;2892:53;2975:22;2961:12;;;2954:44;-1:-1:-1;;;3014:12:144;;;3007:42;-1:-1:-1;;;3065:13:144;;;3058:42;-1:-1:-1;;;3116:13:144;;;3109:26;;;6228:310:31;;;;;;;;;3151:13:144;;;6228:310:31;;;-1:-1:-1;;;6703:490:31;;;4861:31:144;-1:-1:-1;;;4908:12:144;;;4901:40;-1:-1:-1;;;4957:12:144;;;4950:37;-1:-1:-1;;;5003:12:144;;;4996:42;5068:34;5054:12;;;5047:56;-1:-1:-1;;;5119:12:144;;;5112:26;-1:-1:-1;;;5154:12:144;;;5147:40;-1:-1:-1;;;5203:13:144;;;5196:43;-1:-1:-1;;;5255:13:144;;;5248:41;-1:-1:-1;;;5305:13:144;;;5298:42;-1:-1:-1;;;5356:13:144;;;5349:38;3252:21;5493:13;;;3240:34;-1:-1:-1;;;3290:12:144;;;3378:30;3424:12;;;624:16;5827:264:31;-1:-1:-1;6228:310:31;-1:-1:-1;;656:11:144;;6703:490:31;;;-1:-1:-1;;6703:490:31;;;;;;;;;;-1:-1:-1;;;6703:490:31;7338:248;;6227:28:144;-1:-1:-1;;;6271:12:144;;;6264:36;-1:-1:-1;;;6316:12:144;;;6309:39;-1:-1:-1;;;6364:12:144;;;6357:40;6427:27;6413:12;;;6406:49;-1:-1:-1;;;6471:12:144;;;6464:25;6703:490:31;-1:-1:-1;6505:12:144;;7338:248:31;;;-1:-1:-1;;7338:248:31;;;;;;;;;;7315:281;;7338:248;7315:281;;;;7706:30;;;;;;7854:38;;;;;;7315:281;;-1:-1:-1;7706:30:31;-1:-1:-1;7854:38:31;-1:-1:-1;8022:162:31;;8056:32;;7864:27;;7716:19;;8022:162;;:::i;:::-;;;;;;;;;;;;;7999:195;;;;;;7983:211;;5492:2709;;;5176:3025;;;;;;:::o;14:290:144:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:144;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:144:o;309:245::-;388:6;396;449:2;437:9;428:7;424:23;420:32;417:52;;;465:1;462;455:12;417:52;-1:-1:-1;;488:16:144;;544:2;529:18;;;523:25;488:16;;523:25;;-1:-1:-1;309:245:144:o;6528:336::-;6569:3;6607:5;6601:12;6631:1;6641:128;6655:6;6652:1;6649:13;6641:128;;;6752:4;6737:13;;;6733:24;;6727:31;6714:11;;;6707:52;6670:12;6641:128;;;6787:6;6784:1;6781:13;6778:48;;;6822:1;6813:6;6808:3;6804:16;6797:27;6778:48;-1:-1:-1;6842:16:144;;;;;6528:336;-1:-1:-1;;6528:336:144:o;6869:333::-;7090:3;7115:81;7140:55;7165:29;7190:3;7182:6;7165:29;:::i;:::-;7157:6;7140:55;:::i;:::-;7132:6;7115:81;:::i;:::-;7108:88;6869:333;-1:-1:-1;;;;;6869:333:144:o;7207:489::-;1115:27531:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1115:27531:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28449:195;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;26935:354;;;;;;;;;;-1:-1:-1;26935:354:30;;;;;:::i;:::-;27055:16;19400:23:43;;;:12;:23;;;;;19505;;;;;;;19542;;;;;;19579:21;;;;;;;19614:23;;;;;;26935:354:30;;;;;1204:14:144;;1197:22;1179:41;;1263:14;;1256:22;1251:2;1236:18;;1229:50;1295:18;;;1288:34;1353:2;1338:18;;1331:34;1166:3;1151:19;26935:354:30;960:411:144;22468:494:30;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;24972:187::-;;;;;;;;;;;;;:::i;:::-;;;13746:25:144;;;13734:2;13719:18;24972:187:30;13600:177:144;25343:705:30;;;;;;;;;;-1:-1:-1;25343:705:30;;;;;:::i;:::-;;:::i;17143:913::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;24517:192::-;;;;;;;;;;-1:-1:-1;24517:192:30;;;;;:::i;:::-;;:::i;:::-;;;17727:14:144;;17720:22;17702:41;;17690:2;17675:18;24517:192:30;17562:187:144;19557:478:30;;;;;;:::i;:::-;;:::i;4940:482::-;;;;;;:::i;:::-;;:::i;8122:519::-;;;;;;:::i;:::-;;:::i;11636:903::-;;;;;;:::i;:::-;;:::i;27481:225::-;;;;;;;;;;-1:-1:-1;27481:225:30;;;;;:::i;:::-;;:::i;28011:303::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;3307:275::-;;;;;;:::i;:::-;;:::i;23481:196::-;;;;;;;;;;-1:-1:-1;23481:196:30;;;;;:::i;:::-;;:::i;28449:195::-;28529:26;28630:7;:5;:7::i;:::-;28615:22;;28449:195;:::o;22468:494::-;22685:29;22824:131;22862:14;22824:131;22894:17;;22824:131;:::i;:::-;22929:12;;22824:20;:131::i;:::-;22805:150;;22468:494;;;;;;;;:::o;24972:187::-;25027:18;25133:19;:17;:19::i;25343:705::-;25615:389;;;;;;;;;25461:17;;25585:456;;25615:389;25648:13;;;;:5;:13;:::i;:::-;25615:389;;;;;;25679:5;:10;;;;;;;;;;:::i;:::-;25615:389;;;;;;25707:11;;;;:5;:11;:::i;:::-;25615:389;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;25615:389:30;;;-1:-1:-1;;25615:389:30;;25736:19;;;;:5;:19;:::i;:::-;25615:389;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;25615:389:30;;;-1:-1:-1;;25615:389:30;;25773:15;;;;;;;;:::i;:::-;25615:389;;;;;;;;:::i;:::-;;;;;25806:5;:15;;;25615:389;;;;25839:5;:13;;;25615:389;;;;25870:5;:14;;;25615:389;;;;25902:5;:10;;;25615:389;;;;25930:5;:16;;;25615:389;;;;25964:5;:19;;;;;;;;:::i;:::-;25615:389;;;-1:-1:-1;26018:13:30;;;;25585:16;:456::i;:::-;25573:468;25343:705;-1:-1:-1;;25343:705:30:o;17143:913::-;17586:29;;17722:327;17771:14;17722:327;17803:17;;17722:327;:::i;:::-;17838:17;;17873:25;;17916:19;17953:23;;;;:48;;17992:9;17953:48;;;17979:10;17953:48;18019:16;17722:31;:327::i;:::-;17703:346;;;;17143:913;;;;;;;;;;;;;:::o;24517:192::-;24611:14;24685:17;24695:6;;24685:9;:17::i;:::-;24673:29;24517:192;-1:-1:-1;;;24517:192:30:o;19557:478::-;19697:29;19836:192;19874:32;19899:6;;19874:24;:32::i;:::-;19924:25;;;19947:1;19924:25;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19924:25:30;;;;;;;;;;;;;;;;;20002:12;;19836:20;:192::i;:::-;19817:211;;19557:478;;;;;;;:::o;4940:482::-;5080:14;5198:217;5244:30;5268:5;5244:23;:30::i;:::-;5288:25;;;5311:1;5288:25;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5288:25:30;;;;;;;;;;;;;;;;;5362:19;5395:10;5198:32;:217::i;8122:519::-;8358:14;8439:195;;8485:13;8439:195;:::i;:::-;;8512:17;;8439:195;:::i;:::-;8543:19;8576:23;;;;:48;;8615:9;8439:32;:195::i;8576:48::-;8602:10;8439:32;:195::i;11636:903::-;11975:29;12006;12151:381;12200:32;12225:6;;12200:24;:32::i;:::-;12281:25;;;12304:1;12281:25;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12281:25:30;;;;;;;;;;;;;;;;;12359:17;;12394:25;;12437:19;12474:10;12502:16;12151:31;:381::i;:::-;12132:400;;;;11636:903;;;;;;;;;;;:::o;27481:225::-;1822:18:35;;;27582:15:30;1822:18:35;;;:9;:18;;;;;;27679:20:30;1626:221:35;28011:303:30;28111:21;28146:23;28183:25;28293:14;:12;:14::i;:::-;28286:21;;;;;;28011:303;;;:::o;3307:275::-;3443:14;3534:41;3564:10;3534:29;:41::i;23481:196::-;23583:14;23655:15;23663:6;;23655:7;:15::i;3104:936:31:-;3152:13;3468:7;3459;3452:24;3728:14;3713:13;3706:37;4013:10;4004:7;3997:27;35490:741:41;35689:29;35807:284;35855:14;35883:17;35914:4;35980:14;:21;36023:1;35807:34;:284::i;:::-;36172:52;36195:14;36211:12;;36172:22;:52::i;888:504:35:-;935:18;1031:21;:19;:21::i;:::-;-1:-1:-1;1253:10:35;1243:21;;;;:9;:21;;;;;;;;;1241:23;;;;;;;;;1343:42;;13746:25:144;;;1241:23:35;;1253:10;1343:42;;13719:18:144;1343:42:35;;;;;;;888:504;:::o;1371:7415:39:-;1661:47;;;;2467:21;2461:28;;2597:55;;;2574:92;2731:18;;1499:17;;1661:47;1499:17;;2237:20;;2853:7;2836:25;;;;1499:17;2951:889;2976:11;2973:1;2970:18;2951:889;;;3189:18;;3185:32;;3313:10;;3402:21;;;3547;3532:37;;3513:57;;3634:18;;-1:-1:-1;3802:24:39;;;;3746:25;;;;3019:1;3012:9;2951:889;;;2955:14;4025:7;4012:11;4008:25;3968:21;3962:28;3935:112;3922:125;;;;;4146:25;4273:28;4262:39;;4511:21;4505:28;4850:7;4751:41;4710:15;4681:133;4654:178;4633:238;5005:1;4990:1011;5015:27;5012:1;5009:34;4990:1011;;;5252:26;;5248:40;;5392:10;;5481:21;;;5667:29;5652:45;;5592:123;;5779:18;;-1:-1:-1;5963:24:39;;;;5899:33;;;;5074:1;5067:9;4990:1011;;;-1:-1:-1;;6145:21:39;6139:28;;6218:7;6185:41;;6112:128;;6578:29;;;6716:18;;6351:15;6827:29;;6952:101;;;7158:19;;7261:31;;;7458:41;7404:109;;7634:27;;7753:47;;;7939:30;7885:98;;;8064:27;;;8220:17;8197:41;;8331:34;;;;8457;;;;8586:50;;;;-1:-1:-1;;8723:47:39;;-1:-1:-1;8197:41:39;1371:7415;-1:-1:-1;1371:7415:39:o;5760:1222:41:-;6169:29;6200;6326:227;6374:14;6402:17;6433:5;6504:16;6534:9;6326:34;:227::i;:::-;6675:193;6718:14;6675:193;6746:17;;6675:193;:::i;:::-;;6777:25;;6675:193;:::i;:::-;6816:19;6849:9;6675:29;:193::i;:::-;6643:225;;;;-1:-1:-1;5760:1222:41;-1:-1:-1;;;;;;;;;;5760:1222:41:o;15613:2551:43:-;15691:14;15787:21;:19;:21::i;:::-;15869:31;;;16160:6;15869:31;16228:1813;16252:11;16248:1;:15;16228:1813;;;16324:20;16347:6;;16354:1;16347:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;16324:32;-1:-1:-1;16425:40:43;16468:16;16324:32;;16468:16;:::i;:::-;16425:59;-1:-1:-1;16571:23:43;;;;16425:59;16571:23;:::i;:::-;16561:33;-1:-1:-1;16705:96:43;;16768:15;16705:96;:::i;:::-;:41;:96::i;:::-;16909:23;;;;:12;:23;;;;;;-1:-1:-1;16693:108:43;;-1:-1:-1;17027:254:43;;16693:108;;16909:23;;17211:4;17027:18;:254::i;:::-;-1:-1:-1;17371:23:43;;;;17366:558;;17472:53;17489:7;17498:9;17509:15;;;;:5;:15;:::i;:::-;17472:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17472:16:43;;-1:-1:-1;;;17472:53:43:i;:::-;17619:30;;;;17645:4;17619:30;;;17863:20;;;;;;;;:::i;:::-;17755:150;;17830:7;17755:150;;;17795:9;17755:150;;;;13746:25:144;;13734:2;13719:18;;13600:177;17755:150:43;;;;;;;;17366:558;-1:-1:-1;;18023:3:43;;16228:1813;;;-1:-1:-1;18153:4:43;;15613:2551;-1:-1:-1;;;;;;;15613:2551:43:o;18096:859:42:-;18202:37;18352:6;;18463:32;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;18446:49;;18654:9;18649:210;18673:11;18669:1;:15;18649:210;;;18810:34;18834:6;;18841:1;18834:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;18810:23;:34::i;:::-;18790:14;18805:1;18790:17;;;;;;;;:::i;:::-;;;;;;;;;;:54;18686:3;;18649:210;;;;18927:21;18096:859;;;;:::o;17428:380::-;17530:34;;:::i;:::-;17673:128;;;;;;;;;;17700:16;:5;;:16;:::i;:::-;17673:128;;;:::i;:::-;;;;;17730:1;17673:128;;;;;;17745:1;17673:128;;;;;;17760:5;:15;;;;;;;;:::i;:::-;17673:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17673:128:42;;;-1:-1:-1;;17673:128:42;;;;;;;;;;;;;;;;;-1:-1:-1;17657:144:42;17428:380;-1:-1:-1;;17428:380:42:o;2997:2064::-;3224:4;3317:21;:19;:21::i;:::-;3417:33;3549:17;3580:21;3615:23;3651:165;3698:13;3729:17;3764:4;3786:16;3651:29;:165::i;:::-;3930:22;;;3950:1;3930:22;;;;;;;;;3535:281;;-1:-1:-1;3535:281:42;;-1:-1:-1;3535:281:42;-1:-1:-1;3890:37:42;;3930:22;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3890:62;;4061:13;4041:14;4056:1;4041:17;;;;;;;;:::i;:::-;;;;;;:33;;;;4164:58;4188:14;4204:17;4164:23;:58::i;:::-;4309:38;4350:14;4365:1;4350:17;;;;;;;;:::i;:::-;;;;;;;:28;;;4309:69;;4467:181;4511:15;4540:13;4567:15;4596:19;4629:9;4467:30;:181::i;:::-;4730:229;4768:9;4791:15;:23;;;4828:15;:20;;;4862:9;4885:15;:21;;;4920:15;:29;;;4730:24;:229::i;:::-;5009:23;2345:1:32;1323:16:44;:31;1232:129;5009:23:42;-1:-1:-1;5050:4:42;;2997:2064;-1:-1:-1;;;;;;;;;;2997:2064:42:o;12051:695:39:-;12135:21;12170:23;12207:25;12315:18;:16;:18::i;:::-;12546:26;;;2270:1:32;12546:26:39;;;;;;;;;12297:36;;-1:-1:-1;12450:19:39;;-1:-1:-1;12546:26:39;;;;;;;;-1:-1:-1;;12702:27:39;12692:7;12679:21;;12672:58;-1:-1:-1;12679:21:39;12051:695;;-1:-1:-1;12051:695:39;:::o;2845:8478:29:-;2958:4;3437:31;3424:45;3690:1;3686:22;;;;3595:1;3575:22;3845:1;3835:12;;4274:11;4267:19;4193:111;;;4482:93;;4534:26;;;;;4550:9;4534:26;;;13746:25:144;13719:18;;4534:26:29;;;;;;;;4482:93;3867:718;4675:33;4718:24;4752:40;4891:25;5167:1;5160:5;5157:12;5118:51;;5518:29;5453:35;5420:153;5359:35;5330:265;5296:317;5267:346;;5899:1;5892:5;5889:12;5864:1;5857:5;5854:12;5850:1;5843:5;5839:13;5835:32;5810:109;5790:129;;6329:1;6311:16;6307:24;6246:35;6217:136;6192:1;6161:28;6154:36;6150:44;6143:5;6139:56;6114:257;6095:276;;6480:261;6534:10;6562:9;6589:16;6623:28;6669:25;6712:15;6480:36;:261::i;:::-;-1:-1:-1;7106:31:29;7200:7;7159:49;;7081:145;7051:189;6829:18;7311:28;:47;;;;;;;;:::i;:::-;;7307:3915;;7536:34;;;;;;7483:29;;7536:10;7483:29;:::i;:::-;7475:95;;;7474:102;7453:200;;7616:22;;;;;;;;;;;;;;7453:200;7746:294;7796:15;7829:21;;;;;;;;:::i;:::-;7868:18;;;;;;;;:::i;:::-;7904:10;7932;:26;;;7976:10;:22;;;8016:10;7746:32;:294::i;:::-;8136:170;8177:30;;;;8225:18;;;;;;;;:::i;:::-;8261:31;;;;:10;:31;:::i;:::-;8136:23;:170::i;:::-;7307:3915;;;8734:30;;;14393:4:32;8734:30:29;;;;;;;;;8707:24;;8734:30;;;;;;;;;;-1:-1:-1;;8707:57:29;-1:-1:-1;8873:35:29;8864:5;:44;;;;;;;;:::i;:::-;;8860:1961;;9009:305;9046:21;;;;;;;;:::i;:::-;9089:18;;;;;;;;:::i;:::-;9129:10;9161;:26;;;9209:10;:22;;;9253:10;9285:11;9009:15;:305::i;:::-;8860:1961;;;9348:36;9339:5;:45;;;;;;;;:::i;:::-;;9335:1486;;9485:306;9523:21;;;;;;;;:::i;:::-;9566:18;;;;;;;;:::i;:::-;9606:10;9638;:26;;;9686:10;:22;;;9730:10;9762:11;9485:16;:306::i;9335:1486::-;9825:35;9816:5;:44;;;;;;;;:::i;:::-;;9812:1009;;9961:329;9998:29;;;;:10;:29;:::i;:::-;10049:10;10081:18;;;;;;;;:::i;:::-;10121:10;:34;;;10177:10;:30;;;10229:10;10261:11;9961:15;:329::i;9812:1009::-;10476:330;10514:29;;;;:10;:29;:::i;:::-;10565:10;10597:18;;;;;;;;:::i;:::-;10637:10;:34;;;10693:10;:30;;;10745:10;10777:11;10476:16;:330::i;:::-;10903:185;10946:18;;;;;;;;:::i;:::-;10982:10;11010:35;11063:11;10903:25;:185::i;:::-;11183:28;11199:11;11183:15;:28::i;:::-;8323:2899;7307:3915;11271:23;2345:1:32;1323:16:44;:31;1232:129;11271:23:29;-1:-1:-1;11312:4:29;;2845:8478;-1:-1:-1;;;;;;;;2845:8478:29:o;12378:2403:43:-;12464:14;12560:21;:19;:21::i;:::-;12642:31;;;12928:6;12642:31;12996:1662;13020:11;13016:1;:15;12996:1662;;;13092:30;13125:6;;13132:1;13125:9;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;13092:42;-1:-1:-1;13163:13:43;;;;13092:42;13163:13;:::i;:::-;13153:23;-1:-1:-1;13201:10:43;;;;;;;;:::i;:::-;13194:17;-1:-1:-1;13307:10:43;:21;;;;;;;:43;;-1:-1:-1;13332:10:43;:18;;;;;13307:43;13303:115;;;13381:18;;;;;;;;;;;;;;13303:115;13517:17;13537:564;13575:473;;;;;;;;13616:7;13575:473;;;;;;13649:4;13575:473;;;;;;13679:5;:11;;;;;;;;:::i;:::-;13575:473;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;13575:473:43;;;-1:-1:-1;;13575:473:43;;13716:19;;;;:5;:19;:::i;:::-;13575:473;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;13537:564;14209:23;;;;:12;:23;;;;;;;14322:31;;14371:30;;14322:31;14371:30;;;14504:40;;14209:23;;-1:-1:-1;13517:584:43;;-1:-1:-1;14504:40:43;;;;;;;;;;;;;13517:584;13746:25:144;;13734:2;13719:18;;13600:177;14504:40:43;;;;;;;;-1:-1:-1;;14640:3:43;;12996:1662;;8366:11661:41;8703:21;:19;:21::i;:::-;8820;;8798:19;8820:21;8947:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8947:26:41;-1:-1:-1;9107:1:41;9087:22;;;8916:57;;-1:-1:-1;10335:31:41;10108:29;10066:15;;10044:20;10040:42;10011:148;9907:477;9888:1;9867:531;;10561:7870;10585:11;10581:1;:15;10561:7870;;;10668:34;10705:14;10720:1;10705:17;;;;;;;;:::i;:::-;;;;;;;10668:54;;10824:16;10844:1;10824:21;10820:455;;10976:1;10950:23;;;;:27;11129:1;11122:9;;11102:30;;11248:8;;10820:455;11394:17;11433;11472:19;11512:211;11567:13;11606:17;11649:15;11690:11;11512:29;:211::i;:::-;11372:351;;;;;;11863:1;11860;11856:9;11843:11;11836:30;11987:9;12000:1;11987:14;11983:272;;-1:-1:-1;;12132:1:41;12106:23;;;;:27;;;;-1:-1:-1;12228:8:41;;11983:272;12354:9;12337:11;12349:1;12337:14;;;;;;;;:::i;:::-;;;;;;;;;;:26;12686:24;;:34;;;;12823:32;;;;12977:30;;;;;13122:12;;12561:18;;;;;12686:34;;12823:32;12666:17;13215:1989;13239:15;13235:1;:19;13215:1989;;;13331:26;13360:5;13366:1;13360:8;;;;;;;;:::i;:::-;;;;;;;13331:37;;13715:9;13709:16;13702:24;13639:33;13607:145;13570:182;;13871:17;13891:151;13929:9;13964:11;14001:9;:19;;;13891:12;:151::i;:::-;13871:171;;14173:9;:19;;;14148:9;:21;;;:44;14144:539;;14298:21;;;:33;;;14144:539;;;14491:169;14533:9;14572:11;14613:9;:21;;;14491:12;:169::i;:::-;14467:21;;;:193;14144:539;14785:19;;;:31;;;14984:21;;;;14938:247;;14807:9;15076;15111:7;15144:5;14938:20;:247::i;:::-;14914:21;;;;:271;;;;-1:-1:-1;13256:3:41;;13215:1989;;;-1:-1:-1;15367:24:41;;:38;;;15554:20;;15302:40;15663:2754;15687:23;15683:1;:27;15663:2754;;;15795:42;15866:13;15880:1;15866:16;;;;;;;;:::i;:::-;;;;;;;15795:109;;15999:17;16019:159;16057:9;16092:11;16129:17;:27;;;16019:12;:159::i;:::-;15999:179;;16366:17;:27;;;16309:17;:29;;;:84;16280:646;;16520:29;;;:41;;;16280:646;;;16726:177;16768:9;16807:11;16848:17;:29;;;16726:12;:177::i;:::-;16694:29;;;:209;16280:646;17028:27;;;:39;;;17279:29;;;;17229:284;;17058:9;17395;17434:7;17471:4;17229:20;:284::i;:::-;17171:29;;;:364;-1:-1:-1;18253:34:41;18157:164;;18118:233;18012:29;17924:164;;;17888:489;15712:3;;15663:2754;;;;10603:7828;;;;;;;;;;10561:7870;10598:3;;10561:7870;;;;18771:33;18808:1;18771:38;18767:100;;18832:24;;;;;;;;;;;;;;18767:100;18942:58;18966:14;18982:17;18942:23;:58::i;:::-;19238:9;19233:778;19257:11;19253:1;:15;19233:778;;;19392:1;19384:10;;19366:11;19378:1;19366:14;;;;;;;;:::i;:::-;;;;;;;:28;19362:83;19418:8;19362:83;19529:38;19592:14;19607:1;19592:17;;;;;;;;:::i;:::-;;;;;;;:28;;;19529:109;;19706:290;19752:11;19764:1;19752:14;;;;;;;;:::i;:::-;;;;;;;19788:15;:23;;;19833:15;:20;;;19875:9;19906:15;:21;;;19949:15;:29;;;19706:24;:290::i;:::-;19275:736;19233:778;19270:3;;19233:778;;;;8616:11411;;;8366:11661;;;;;:::o;37145:2258::-;37293:29;37432:12;;37555:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37555:34:41;;;;;;;;;;;;;;;37542:47;;37755:31;37856:9;37851:940;37875:17;37871:1;:21;37851:940;;;37975:32;38010:12;;38023:1;38010:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;37975:50;-1:-1:-1;38120:26:41;38149:177;38188:14;38224:27;37975:50;;38224:27;:::i;:::-;38273:35;;;;:11;:35;:::i;:::-;38149:17;:177::i;:::-;38120:206;;38454:9;:17;;;38426:45;;:9;:14;;;:24;;;:45;;;38422:355;;38555:25;;;;;38422:355;;;38749:9;38707:10;38722:23;38718:1;:27;38707:39;;;;;;;;:::i;:::-;;;;;;:51;;;;38422:355;-1:-1:-1;;37894:3:41;;37851:940;;;-1:-1:-1;38875:28:41;;38871:320;;39113:23;39100:10;39094:17;39090:47;39054:10;39022:137;38871:320;37679:1522;39263:63;39299:14;39315:10;39263:35;:63::i;:::-;;39377:19;37145:2258;;;;;:::o;1511:215:44:-;2345:1:32;1636:16:44;;:32;1632:88;;1691:18;;;;;;;;;;;;;;1632:88;1511:215::o;23512:4243:41:-;24016:24;;24187:32;;23828:29;;;;24361:55;24187:32;24016:24;24361:55;:::i;:::-;24332:94;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24332:94:41;;;;;;;;;;;;;;;24319:107;;24592:31;24699:9;24694:1050;24718:22;24714:1;:26;24694:1050;;;24840:40;24905:17;24923:1;24905:20;;;;;;;;:::i;:::-;;;;;;;24840:103;;25041:26;25070:209;25111:14;25147:10;25179;25211:19;25252:9;25070:19;:209::i;:::-;25041:238;;25407:9;:17;;;25379:45;;:9;:14;;;:24;;;:45;;;25375:355;;25508:25;;;;;25375:355;;;25702:9;25660:10;25675:23;25671:1;:27;25660:39;;;;;;;;:::i;:::-;;;;;;:51;;;;25375:355;-1:-1:-1;;24742:3:41;;24694:1050;;;;25823:9;25818:1160;25842:30;25838:1;:34;25818:1160;;;25976:40;26041:25;26067:1;26041:28;;;;;;;;:::i;:::-;;;;;;;25976:111;;26185:26;26214:228;26255:14;26291:18;26331:10;26363:19;26412:1;26214:19;:228::i;:::-;26185:257;;26570:9;:17;;;26542:45;;:9;:14;;;:24;;;:45;;;26538:426;;26671:25;;;;;26538:426;;;26936:9;26823:10;26888:23;26863:22;26859:1;:26;:52;26823:110;;;;;;;;:::i;:::-;;;;;;:122;;;;26538:426;-1:-1:-1;;25874:3:41;;25818:1160;;;-1:-1:-1;27062:28:41;;27058:320;;27300:23;27287:10;27281:17;27277:47;27241:10;27209:137;27058:320;24516:2872;27448:10;:17;27469:1;27448:22;27444:88;;27493:28;;;;;;;;;;;;;;27444:88;27604:97;27653:14;27681:10;27604:35;:97::i;:::-;27586:115;;27712:36;;23512:4243;;;;;;;;:::o;1577:648:28:-;1705:7;1805:187;1885:15;:29;;;:36;1935:15;:47;;;1805:66;:187::i;:::-;2180:23;;1822:18:35;;2180:23:28;1822:18:35;;;:9;:18;;;;;;2101:117:28;;2135:15;;2101:16;:117::i;3993:1596:48:-;4261:23;;4178:10;;4261:23;;;;;4257:301;;;4377:15;4373:88;;;4419:27;;;;;;;;13746:25:144;;;13719:18;;4419:27:48;13600:177:144;4373:88:48;-1:-1:-1;4542:5:48;4535:12;;4257:301;4671:21;;;;;;;4757:25;;4753:754;;4882:15;4878:619;;;5004:31;;;;;;;;13746:25:144;;;13719:18;;5004:31:48;13600:177:144;4878:619:48;5170:23;;;;;;;5146:47;;5142:355;;5294:15;5290:98;;;5340:29;;;;;;;;13746:25:144;;;13719:18;;5340:29:48;13600:177:144;5290:98:48;5477:5;5470:12;;;;;5142:355;-1:-1:-1;5578:4:48;;3993:1596;-1:-1:-1;;;;;3993:1596:48:o;2640:569::-;2864:10;2853:21;;;;2849:58;;2640:569;;;:::o;2849:58::-;2997:14;3014:50;3034:18;:16;:18::i;:::-;13356:14:39;13159:13;13346:25;;;13471:29;13464:54;;;;13823:23;13816:42;;;13946:25;13933:39;;14051:34;;;13933:39;13039:1062;3014:50:48;2997:67;;3153:49;3175:7;3184:6;3192:9;3153:21;:49::i;:::-;2770:439;2640:569;;;:::o;917:217:44:-;1031:21;:19;:21::i;:::-;2376:1:32;1100:16:44;:27;917:217::o;4324:7531:43:-;4586:17;4617:20;4651:22;4748:38;4789:13;:24;;;4748:65;;4923:142;4952:15;:25;;;4995:15;:23;;;5036:15;4923:11;:142::i;:::-;4905:302;;-1:-1:-1;5187:1:43;;-1:-1:-1;5187:1:43;;-1:-1:-1;5187:1:43;;-1:-1:-1;5171:25:43;;4905:302;5323:23;;;;5387:25;;;;5315:32;;;;;5379:34;5501:23;;;;:41;;-1:-1:-1;5528:14:43;;5501:41;5497:92;;;5565:13;;;;;;;;;;;;;;5497:92;5709:11;5697:9;:23;:93;;;;-1:-1:-1;5764:25:43;;;;20487:1;20472:17;20465:25;5736:54;5680:262;;;5899:32;;;;;;;;;;;;;;5680:262;6045:58;6087:15;6045:41;:58::i;:::-;6033:70;;6195:307;6247:13;6274:17;6305:16;6335:9;6358:15;:24;;;6396:15;:25;;;6435:15;:23;;;6472:15;:20;;;6195:38;:307::i;:::-;6580:31;6614:23;;;:12;:23;;;;;;6724:189;;6627:9;;6614:23;;6884:15;6724:18;:189::i;:::-;6706:348;;-1:-1:-1;7038:1:43;;-1:-1:-1;7038:1:43;;-1:-1:-1;7019:24:43;;-1:-1:-1;;;7019:24:43;6706:348;7150:23;;;;7145:194;;7189:139;7223:15;:23;;;7264:9;7291:13;:23;;;7189:16;:139::i;:::-;7456:21;;;;;;;;;7515:23;;;;7659:22;;7655:4061;;7782:11;7797:1;7782:16;7778:668;;7909:17;7897:29;;7958:17;7944:31;;7778:668;;;8111:11;8090:17;:32;8086:360;;8222:30;8241:11;8222:30;;:::i;:::-;;-1:-1:-1;8351:30:43;8364:17;8351:30;;:::i;:::-;;-1:-1:-1;8399:32:43;8414:17;8399:32;;:::i;:::-;;;8086:360;8575:11;8545:27;8563:9;8545:15;:27;:::i;:::-;:41;8541:329;;;8822:15;8808:11;:29;8796:41;;8541:329;8952:28;8971:9;8952:28;;:::i;:::-;;;9277:10;9264:11;9261:27;9228:10;9211:15;9208:31;9184:122;9181:1791;;;9410:326;;;9434:3;9464:216;9497:2;9464:216;;;9606:11;;;;;9569:2;9464:216;;;-1:-1:-1;9712:2:43;9410:326;-1:-1:-1;9410:326:43:o;:::-;9774:119;9838:33;9859:11;9842:15;9838:33;:::i;:::-;9803:9;9774:119;:::i;:::-;10015:17;;10000:33;10132:29;;;;;10272:31;;;;;10201:35;;;;10494:10;10421:31;;;10478:27;;;10393:134;10390:564;;;10624:21;10621:1;10614:32;10780:16;10760:18;10753:44;10913:18;10910:1;10903:29;10390:564;11185:30;;11282:48;11348:46;;;;;;11282:48;;;;;;;;;;;;;11211:4;11282:48;11348:46;;;;7655:4061;;;11514:30;;11603:42;11659:46;;;;;;11603:42;;;;;;;;;;;;;11540:4;11603:42;11659:46;;;;7655:4061;-1:-1:-1;11825:9:43;;-1:-1:-1;11836:11:43;;-1:-1:-1;;;;4324:7531:43;;;;;;;;;:::o;1497:7446:36:-;1875:24;;2011:21;;1842:30;2099:5017;2123:22;2119:1;:26;2099:5017;;;2221:40;2286:17;2304:1;2286:20;;;;;;;;:::i;:::-;;;;;;;2221:103;;2422:18;2443:16;:27;;;2422:48;;2567:19;2553:10;:33;2549:120;;2617:33;;;;;;;;;;;;;;2549:120;2763:14;2778:10;2763:26;;;;;;;;:::i;:::-;;;;;;;:36;;;:41;;2803:1;2763:41;2759:96;;2828:8;;;;2759:96;2931:38;2994:14;3009:10;2994:26;;;;;;;;:::i;:::-;;;;;;;;;;;:37;3172:22;;;;2994:37;;-1:-1:-1;2994:37:36;;;3434:16;:21;;;:35;;;;;;;;:::i;:::-;;3430:3024;;3563:21;;;;3697:12;;3679:30;;3675:125;;3744:33;;;;;;;;;;;;;;3675:125;3895:26;3924:5;3930:14;3924:21;;;;;;;;:::i;:::-;;;;;;;;;;;4060:18;;4123:30;;;;4060:18;;-1:-1:-1;4123:30:36;-1:-1:-1;3924:21:36;-1:-1:-1;4522:1:36;4509:15;;4506:1;4502:23;3924:21;4502:23;4568:32;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;4736:52:36;;;;4703:30;;;;:85;-1:-1:-1;3430:3024:36;;;4983:29;;;;5147:20;;5129:38;;5125:141;;5202:41;;;;;;;;;;;;;;5125:141;5367:42;5438:13;5452:14;5438:29;;;;;;;;:::i;:::-;;;;;;;;;;;5604:26;;5701:38;;;;5604:26;;-1:-1:-1;5701:38:36;-1:-1:-1;5438:29:36;-1:-1:-1;6130:1:36;6117:15;;6114:1;6110:23;5438:29;6110:23;6176:40;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;6386:27:36;;;;6319:38;;;;:116;-1:-1:-1;3430:3024:36;6553:29;6573:8;9702:1;-1:-1:-1;9689:15:36;9442:278;6553:29;6548:111;;6613:27;;;;;;;;;;;;;;6548:111;6755:34;;6751:351;;6894:189;6932:16;:27;;;6985:20;7031:16;:30;;;6894:12;:189::i;:::-;2152:4964;;;;;;2099:5017;2147:3;;2099:5017;;;;7184:9;7179:1748;7203:19;7199:1;:23;7179:1748;;;7295:34;7332:14;7347:1;7332:17;;;;;;;;:::i;:::-;;;;;;;7295:54;;7444:13;:23;;;:28;;7471:1;7444:28;7440:83;;7496:8;;;7440:83;7662:24;;7821:29;;;;:36;7599:38;7946:414;7970:10;7966:1;:14;7946:414;;;8114:116;8163:15;:29;;;8193:1;8163:32;;;;;;;;:::i;:::-;;;;;;;:41;;;9702:1;-1:-1:-1;9689:15:36;9442:278;8114:116;8085:257;;;8286:33;;;;;;;;;;;;;;8085:257;7982:3;;7946:414;;;-1:-1:-1;;8460:21:36;;;;:28;8574:9;8569:344;8593:10;8589:1;:14;8569:344;;;8737:54;8757:15;:21;;;8779:1;8757:24;;;;;;;;:::i;8737:54::-;8708:187;;;8847:25;;;;;;;;;;;;;;8708:187;8605:3;;8569:344;;;;7229:1698;;;7179:1748;7224:3;;7179:1748;;;;1739:7198;;1497:7446;;:::o;6014:9639:42:-;6347:25;;;;6400:23;;;;6811:30;;;14393:4:32;6811:30:42;;;;;;;;;6327:17;;6811:30;;;;;;;;-1:-1:-1;;;8940:21:42;;;;:28;6784:57;;-1:-1:-1;8541:9:42;;8914:23;9112:1862;9136:15;9132:1;:19;9112:1862;;;9220:26;9249:15;:21;;;9271:1;9249:24;;;;;;;;:::i;:::-;;;;;;;9220:53;;9444:15;9422:37;;;;;;;;:::i;:::-;:18;;:37;;;;;;;;:::i;:::-;;9418:115;;9490:24;;;;;;;;;;;;;;9418:115;9733:14;9750:299;9790:9;:21;;;9837:9;:19;;;9882:9;9917:11;9954:9;9989:7;10022:5;9750:14;:299::i;:::-;10318:26;10303:42;;10267:140;-1:-1:-1;10541:29:42;10526:45;;10490:146;;;10837:23;;10882:26;;;;10766:193;;10307:9;;10930:11;10766:193;;;:::i;:::-;-1:-1:-1;9153:3:42;;9112:1862;;;-1:-1:-1;;;12829:46:42;;;;:70;11083:9;;12409;;11058:22;13056:2259;13080:23;13076:1;:27;13056:2259;;;13180:42;13247:15;:29;;;13277:1;13247:32;;;;;;;;:::i;:::-;;;;;;;13180:117;;13397:14;13414:282;13450:17;:29;;;13501:17;:27;;;13550:9;13581:11;13614:9;13645:7;13674:4;13414:14;:282::i;:::-;13961:26;13938:50;;13906:136;;;14373:34;14285:152;;14250:213;14194:29;14171:53;;14139:346;13397:299;-1:-1:-1;;14605:26:42;;:45;;;;;;;;:::i;:::-;;14601:411;;14768:14;14759:6;:23;14755:112;;;14817:27;;;;;;;;;;;;;;14755:112;14987:6;14969:24;;;;14601:411;15111:189;15159:17;15198:10;15230:19;15271:11;15111:26;:189;;:::i;:::-;-1:-1:-1;;13105:3:42;;13056:2259;;;;11896:3429;;15415:28;15431:11;15415:15;:28::i;:::-;15512:19;;15508:139;;15587:49;15608:10;15621:14;15587:12;:49::i;16297:855::-;16610:29;16686:5;16672:19;;16791:35;16876:13;16859:30;;17057:4;16985:160;;17036:7;16985:160;;;17013:9;17075;17098:10;17122:13;16985:160;;;;;;;;;:::i;:::-;;;;;;;;16531:621;;16297:855;;;;;;:::o;11503:208:39:-;11554:7;11624:9;11607:13;:26;:97;;11680:24;2724:187:31;;;2752:24;2724:187;;;45275:25:144;2794:10:31;45316:18:144;;;45309:34;;;;2822:13:31;45359:18:144;;;45352:34;2853:13:31;45402:18:144;;;45395:34;2892:4:31;45445:19:144;;;45438:84;2648:7:31;;45247:19:144;;2724:187:31;;;;;;;;;;;;2701:220;;;;;;2694:227;;2591:337;;11607:97:39;-1:-1:-1;11648:17:39;;11503:208::o;13181:24982:29:-;13567:21;:19;:21::i;:::-;13680:59;13692:10;:20;;;13714:10;:18;;;13734:4;13680:11;:59::i;:::-;;14090:34;:32;:34::i;:::-;14216:186;14296:31;;;;:10;:31;:::i;:::-;:38;;14348:10;:44;;;14216:66;:186::i;:::-;14466:17;15598:16;15617:28;15598:47;;16117:8;16074:41;16067:59;16234:16;16171:41;16143:125;16724:10;16667:35;16607:38;16573:179;17116:8;17058:36;16994:42;16960:182;17487:29;17420:41;17385:153;17324:39;17296:260;17901:44;17867:96;18242:7;18215:25;18211:39;18143:46;18118:150;18711:1;18615:44;18573:112;18544:190;18498:24;18470:282;18995:7;18949:24;18924:96;18896:124;;19147:16;19121:24;19114:50;19494:9;19437:35;19395:19;19369:24;19365:50;19331:190;20331:39;20701:28;20638:41;20610:137;20852:25;20792:38;20764:131;20964:1;20919:43;20912:54;21158:50;21124:102;21095:131;;21252:1;21305:3364;21318:25;21315:1;21312:32;21305:3364;;;21783:1;21756:25;21752:33;21684:42;21655:152;22097:7;22047:24;21977:44;21939:187;22426:25;22376:24;22308:42;22270:203;22755:7;22707:22;22678:106;22652:132;;23133:29;23062:41;23023:165;22975:22;22943:267;23762:17;23712:24;23683:118;23655:146;;23971:28;23921:24;23889:132;24219:25;24185:7;24159:24;24155:38;24123:143;24621:8;24571:24;24493:26;24439:24;24406:139;24368:283;-1:-1:-1;21379:1:29;21372:9;21305:3364;;;25322:7;25318:1;25291:25;25287:33;25283:47;25218:39;25183:169;25140:21;25112:258;25852:44;25818:96;25789:125;;25966:1721;25979:25;25976:1;25973:32;25966:1721;;;26318:1;26291:25;26287:33;26219:42;26190:152;26158:184;;26780:17;26730:24;26701:118;26673:146;;26989:28;26939:24;26907:132;27237:25;27203:7;27177:24;27173:38;27141:143;27639:8;27589:24;27511:26;27457:24;27424:139;27386:283;26040:1;26033:9;25966:1721;;;25970:2;;;;15791:11910;28195:16;28214:20;28195:39;;28552:8;28517:33;28510:51;28681:15;28646:33;28639:58;29193:10;29144:27;29092:30;29058:163;29482:7;29432:28;29376:34;29342:165;29809:21;29750:33;29715:137;29692:1;29664:206;30191:7;30188:1;30178:21;30144:32;30137:63;30619:7;30523:44;30481:112;30452:196;30392:38;30367:299;30775:1;30749:24;30742:35;30901:15;30891:7;30865:24;30861:38;30854:63;31295:10;31246:27;31198:25;31172:24;31168:56;31134:189;-1:-1:-1;;32453:24:29;32440:38;1822:18:35;;;32373:15:29;1822:18:35;;;:9;:18;;;;;;32730:15:29;32851:29;32844:47;;;32585:38;;-1:-1:-1;33153:8:29;33107:24;33057:28;33023:156;33371:21;33365:28;33303:40;33275:136;33537:9;33505:30;33498:49;33822:9;33774:26;33722:30;33688:161;33983:7;33953:28;33946:45;34154:17;34103:29;34072:117;34059:130;;32769:1434;;;35623:7;35556:44;35543:58;35518:130;35475:25;35454:208;35773:9;35759:12;35752:31;35937:8;35903:31;35889:12;35885:50;35878:68;36174:32;36123;36109:12;36105:51;36039:181;36379:40;36320;36306:12;36302:59;36233:200;36852:17;36785:44;36772:58;36747:140;36706:23;36685:216;37559:21;37546:35;37448:24;37435:38;37337:23;37249:8;37159:12;37073:522;;;37664:1;37654:8;37647:19;37765:185;37814:9;37837:10;:19;;;37870:9;37893:10;:18;;;;;;;;;;:::i;:::-;37925:15;;;;;;;;:::i;:::-;37765:35;:185::i;:::-;38023:133;38071:9;38094:18;;;;;;;;:::i;:::-;38126:20;;;;:10;:20;:::i;:::-;38023:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;38023:34:29;;-1:-1:-1;;;38023:133:29:i;:::-;13480:24683;13181:24982;;;;;;:::o;4792:3517:37:-;5106:24;;5102:3201;;5226:22;5463:21;5457:28;5439:46;;5596:25;5580:14;5573:49;5899:35;5813:42;5773:14;5744:133;5716:236;6229:38;6143:42;6103:14;6074:133;6046:239;6460:8;6401:36;6385:14;6381:57;6353:133;6654:5;6598:33;6582:14;6578:54;6550:127;6854:4;6799:32;6783:14;6779:53;6751:125;7013:2;6980:30;6964:14;6960:51;6953:63;7200:10;7139:38;7123:14;7119:59;7091:137;7407:6;7350:34;7334:14;7330:55;7302:129;7507:138;7549:10;7577:14;14273:5:32;7507:24:37;:138::i;:::-;5132:2524;5102:3201;;;7769:15;7757:8;:27;;;;;;;;:::i;:::-;;7753:540;;7882:6;7892:1;7882:11;7878:94;;7924:29;;;;;;;;;;;;;;7878:94;8059:51;8082:5;8089:4;8095:2;8099:10;8059:22;:51::i;:::-;7753:540;;;8218:60;8242:5;8249:4;8255:2;8259:10;8271:6;8218:23;:60::i;38682:2240:29:-;38942:9;39076:20;38917:22;39265:1045;39289:25;39285:1;:29;39265:1045;;;39393:48;39466:20;;39487:1;39466:23;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;39642:26:29;;39753:42;;;39749:123;;;39826:27;;;;;;;;;;;;;;39749:123;39953:128;39987:29;;;;;;;;:::i;:::-;40038:25;39953:12;:128::i;:::-;40252:43;;;;-1:-1:-1;39316:3:29;;39265:1045;;;;40403:14;40394:6;:23;40390:88;;;40440:27;;;;;;;;;;;;;;40390:88;40530:24;40543:2;40547:6;40530:12;:24::i;:::-;40660:6;40643:14;:23;40639:277;;;40833:58;40854:10;40884:6;40867:14;:23;40833:12;:58::i;:::-;38843:2079;;38682:2240;;;;:::o;12188:1092:37:-;12482:59;12517:11;12530:10;12482:34;:59::i;:::-;12603:10;12599:675;;12717:6;12727:1;12717:11;12713:86;;12755:29;;;;;;;;;;;;;;12713:86;12878:51;12901:5;12908:4;12914:2;12918:10;12878:22;:51::i;12599:675::-;13028:235;13053:10;13081:11;13110:22;13150:5;13173:4;13195:2;13215:10;13243:6;13028:7;:235::i;14247:1028::-;14533:28;14554:6;14533:20;:28::i;:::-;14637:59;14672:11;14685:10;14637:34;:59::i;:::-;14758:10;14754:515;;14863:60;14887:5;14894:4;14900:2;14904:10;14916:6;14863:23;:60::i;14754:515::-;15022:236;15047:10;15075:11;15104:23;15145:5;15168:4;15190:2;15210:10;15238:6;15022:7;:236::i;41466:3513:29:-;41735:12;41757:10;41857:13;41880:14;42070:18;42187:11;42183:815;;;42298:7;;-1:-1:-1;42328:10:29;;-1:-1:-1;42445:21:29;;;;;;;;:::i;:::-;42437:29;-1:-1:-1;;;42550:22:29;;;;42497:26;;;;42183:815;;;42691:10;;-1:-1:-1;42724:7:29;;-1:-1:-1;42832:29:29;;;;:10;:29;:::i;:::-;42824:37;-1:-1:-1;;;42953:30:29;;;;42892:34;;;;42183:815;43070:15;;43066:83;;43112:22;;;;;;;;;;;;;;43066:83;-1:-1:-1;43575:7:29;43558:25;;43503:33;43478:123;43448:167;43226:18;43763:31;;;;:10;:31;:::i;:::-;:38;;43713:98;;43878:9;43873:944;43897:25;43893:1;:29;43873:944;;;43990:48;44059:31;;;;:10;:31;:::i;:::-;44091:1;44059:34;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;44158:26:29;;44274:85;;;;44309:35;44319:25;44309:35;;:::i;:::-;;;44274:85;44450:220;44482:5;44505:4;44527:29;;;;;;;;:::i;:::-;44574:25;44617:10;44645:11;44450:14;:220::i;:::-;-1:-1:-1;;44789:3:29;;43873:944;;;;44908:64;44923:5;44930:4;44936:2;44940:6;44948:10;44960:11;44908:14;:64::i;:::-;41651:3328;;;;;;41466:3513;;;;:::o;16848:437:37:-;14435:4:32;16973:11:37;:18;:38;16969:75;;16848:437;:::o;16969:75::-;17120:29;17152:38;17178:11;21853:26;21836:44;21813:81;;21546:364;17152:38;17120:70;;17234:44;17243:21;17266:11;17234:8;:44::i;:::-;16908:377;16848:437;:::o;4672:1158:27:-;4802:16;4920:11;4907:9;:24;4903:67;;-1:-1:-1;4954:5:27;4947:12;;4903:67;5313:11;5302:9;5295:5;5288:37;5285:168;;;5354:31;5351:1;5344:42;5413:25;5410:1;5403:36;5285:168;5551:27;5581:17;5589:9;5581:5;:17;:::i;:::-;5777:37;;;;;4672:1158;-1:-1:-1;;;;4672:1158:27:o;1592:2272::-;1781:14;1902:9;1887:11;:24;1883:1881;;2295:19;;;2424:15;:27;;;2563:18;;;2005:16;2762:19;2424:27;2762:9;:19;:::i;:::-;2718:23;2732:9;2718:11;:23;:::i;:::-;2717:65;;;;:::i;:::-;2686:97;;3623:7;3588:8;3578:7;3557:19;3553:33;3549:48;3520:132;3174:19;3167:27;3160:35;3135:535;3125:545;;3740:13;;;;;;1883:1881;-1:-1:-1;3848:9:27;;1592:2272;-1:-1:-1;;;;1592:2272:27:o;1693:3815:38:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2051:27:38;;;:66;;-1:-1:-1;2082:35:38;;2051:66;2034:170;;;2149:44;;;;;;;;;;;;;;2034:170;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2384:155:38;2442:14;2470:23;;2384:155;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2507:22;2384:44;:155::i;:::-;2660:27;;2885:126;;;;;;;;;;;;;;;;;;;2935:14;;2885:126;2963:15;;;;;;2620:37;;2885:126;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2992:9;2885:36;:126::i;:::-;3145:26;;3118:53;;;;;;;;:::i;:::-;:14;;:23;:53;;;;;;;;:::i;:::-;;;:116;;;;3211:17;:23;;;3187:47;;:9;:14;;;:20;;;:47;;;;3118:116;:189;;;;3279:17;:28;;;3250:9;:14;;;:25;;;:57;;3118:189;3101:303;;;3339:54;;;;;;;;;;;;;;3101:303;3514:9;:14;;;:21;;;3487:17;:24;;;:48;3483:1750;;;3631:43;3695:23;;3719:1;3695:26;;;;;;;:::i;:::-;;;;;;3631:104;;;;;;;;;;:::i;:::-;;;4223:9;:14;;;:21;;;4176:17;:24;;;:68;4003:14;4018:15;:26;;;4003:42;;;;;;;;:::i;:::-;;;;;;;:74;;;:109;;;4113:15;:25;;;4003:136;;;;;;;;:::i;:::-;;;;;;;;;;;:169;;;;:242;;;;4377:14;;:21;;;4350:24;;;:48;-1:-1:-1;3483:1750:38;;;4501:43;4547:15;;4563:1;4547:18;;;;;;;:::i;:::-;;;;;;4501:64;;;;;;;;;;:::i;:::-;;;5044:17;:24;;;5000:9;:14;;;:21;;;:68;4835:14;4850:15;:26;;;4835:42;;;;;;;;:::i;:::-;;;;;;;:74;;;:101;;;4937:15;:25;;;4835:128;;;;;;;;:::i;:::-;;;;;;;:161;;:234;;;;;5198:17;:24;;;5174:9;:14;;;:21;;:48;;;;;4415:818;3483:1750;5312:27;;;;;5285:14;;:54;;;;:24;;:54;-1:-1:-1;1693:3815:38;;;;;;;:::o;28540:4511:41:-;28838:21;;28695:29;;28838:21;28947:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;28947:23:41;;28929:41;;29162:9;29157:1581;29181:11;29177:1;:15;29157:1581;;;29268:34;29305:14;29320:1;29305:17;;;;;;;;:::i;:::-;;;;;;;29268:54;;29423:13;:23;;;:28;;29450:1;29423:28;29419:323;;29715:8;;;29419:323;29829:4;29808:15;29824:1;29808:18;;;;;;;;:::i;:::-;:25;;;:18;;;;;;;;;;;:25;29995:24;;:38;;;30182:20;;29930:40;30298:426;30322:23;30318:1;:27;30298:426;;;30450:19;30472:13;30486:1;30472:16;;;;;;;;:::i;:::-;;;;;;;:28;;;30450:50;;30594:11;30609:1;30594:16;30590:116;;30645:38;;;;;;;;37572:25:144;;;37613:18;;;37606:34;;;37656:18;;;37649:34;;;37545:18;;30645:38:41;37370:319:144;30590:116:41;-1:-1:-1;30347:3:41;;30298:426;;;;29199:1539;;;29157:1581;29194:3;;29157:1581;;;-1:-1:-1;31244:30:41;;;14393:4:32;31244:30:41;;;;;;;;;30847:9;;30822:22;;31244:30;;;;;;;;;;;-1:-1:-1;;31386:17:41;;31217:57;;-1:-1:-1;31360:23:41;31454:1121;31478:15;31474:1;:19;31454:1121;;;31583:26;31612:10;31623:1;31612:13;;;;;;;;:::i;:::-;;;;;;;;;;;31666:14;;31612:13;;-1:-1:-1;31639:24:41;31776:13;;:32;;;;;;;;:::i;:::-;;31772:434;;31923:14;31909:4;:11;;;:28;31905:109;;;31968:27;;;;;;;;;;;;;;31905:109;32162:4;:11;;;32144:29;;;;31772:434;32281:147;32308:4;32330:9;:17;;;32365:9;:20;;;32403:11;32281:9;:147::i;:::-;-1:-1:-1;;32547:3:41;;31454:1121;;;;32665:28;32681:11;32665:15;:28::i;:::-;32785:19;;32781:99;;32820:49;32841:10;32854:14;32820:12;:49::i;:::-;32929:23;2345:1:32;1323:16:44;:31;1232:129;32929:23:41;33020:24;;;;28540:4511;;;;:::o;6712:2174:38:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7263:21:38;:28;7295:1;7263:33;7259:125;;7364:4;7323:46;;;;;;;;;;;:::i;7259:125::-;7479:10;7471:4;:18;;;;;;;;:::i;:::-;;7467:1084;;7578:14;;:45;;;:24;;;;:45;7720:164;7778:14;7814:21;7578:9;7720:36;:164::i;:::-;7467:1084;;;8109:172;8175:14;8211:21;8254:9;8109:44;:172::i;:::-;8387:10;8367:17;;;:30;8494:20;;;:42;;;7467:1084;8724:14;;:21;;;:14;:26;8720:150;;8798:1;8770:17;;;:30;;;8818:14;;:24;;:37;6712:2174;;;;;;;:::o;2790:425:28:-;3110:30;3077;:63;3073:136;;;3163:35;;;;;;;;;;;;;;1066:9919:45;1284:12;1484:1;1481;1474:12;1556:5;1652:9;1646:16;1954:7;1943:9;1939:23;2096:22;2090:29;2563:15;2546;2542:37;2655:19;2824:1;2815:7;2812:14;2802:3382;;2975:24;2964:9;2960:40;2929:93;3407:24;3396:9;3392:40;3386:47;3359:1;3329:126;3324:131;;3554:7;3551:820;;;3803:17;3754:18;3744:8;3740:33;3707:139;3702:144;;4265:28;4213:18;4176:147;4121:24;4110:9;4106:40;4070:279;3551:820;4556:1;4545:9;4538:20;4768:6;4744:22;4737:38;5430:7;5365:1;5284:19;5203:22;5123:20;5088:5;5048:451;-1:-1:-1;5604:57:45;;;5739:34;;;5901:24;5886:40;;5854:138;-1:-1:-1;;6158:8:45;2802:3382;6453:27;;6482:13;;;6449:47;;-1:-1:-1;6449:47:45;;-1:-1:-1;6602:3944:45;;6921:46;6877:22;6849:136;7156:48;7125:9;7100:122;7362:11;7356:18;7545:46;7514:9;7489:120;7745:9;7739:16;7868:33;7855:11;7848:54;7981:6;7970:9;7963:25;8396:7;8373:1;8285:44;8244:15;8215:136;8182:11;8154:6;8127:5;8095:326;8084:337;;8518:7;8515:1692;;;8702:33;8698:1;8692:8;8689:47;8679:1510;;8857:6;8845:19;8842:254;;;8960:36;8957:1;8950:47;9036:33;9033:1;9026:44;8842:254;9233:1;9215:15;9198;9194:37;9191:44;9188:292;;;9352:32;9349:1;9342:43;9424:29;9421:1;9414:40;9188:292;9604:42;9601:1;9596:51;9557:405;;9774:29;9771:1;9764:40;9868:1;9840:26;9833:37;9909:26;9906:1;9899:37;9557:405;10075:29;10072:1;10065:40;10140:26;10137:1;10130:37;8679:1510;10341:57;;;10415:52;;;;10484:48;;6602:3944;;;;;10604:7;10599:380;;10692:34;:32;:34::i;:::-;10857:36;10854:1;10847:47;10921:33;10918:1;10911:44;1338:627:48;1470:10;1587:15;1575:9;:27;:57;;;;1617:15;1606:7;:26;;1575:57;1571:314;;;1725:15;1721:74;;;1767:13;;;;;;;;;;;;;;1721:74;-1:-1:-1;1869:5:48;1862:12;;1571:314;-1:-1:-1;1954:4:48;1338:627;;;;;:::o;4116:1675:49:-;4581:1;4568:9;4560:18;;;;;;;;:::i;:::-;:22;:56;;;;-1:-1:-1;4598:10:49;:18;;;;;4560:56;:93;;;;-1:-1:-1;4632:10:49;:21;;;;;4560:93;4543:1242;;;4768:23;;;;:30;:35;:84;;;;-1:-1:-1;4823:24:49;;:29;4768:84;4747:1028;;;4944:53;4962:4;4968:9;4979:7;4988:8;4944:17;:53::i;:::-;4747:1028;;;5195:12;5210:395;5243:4;5317:53;;;5396:9;5431:10;5467:13;5506:16;5548:17;5269:318;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5210:11;:395::i;:::-;5195:410;;5704:56;5741:7;5750:9;5704:36;:56::i;4747:1028::-;4116:1675;;;;;;;;:::o;10054:2127:36:-;10259:12;10458:4;10455:1;10448:15;10590:7;10587:1;10577:21;10812:7;10805:5;10801:19;11036:5;11030:12;11027:1;11023:20;11017:4;11013:31;10907:1016;11068:3;11062:4;11059:13;10907:1016;;;11262:11;;11513:28;;;11510:1;11506:36;11722:29;;;11788:7;11775:21;;;11768:41;11900:8;11897:1;11887:22;;11151:18;;;;10907:1016;;;-1:-1:-1;;12008:22:36;;;-1:-1:-1;12008:22:36;12115:60;;12150:14;;;;;;;;;;;;;;1884:1797:37;2132:15;2115:13;;:32;;;;;;;;:::i;:::-;;2111:1564;;2269:15;;;;2255:10;;;;2247:37;;;2246:44;2242:112;;2317:22;;;;;;;;;;;;;;2242:112;2428:41;2441:4;:14;;;2457:4;:11;;;2428:12;:41::i;:::-;2111:1564;;;2507:14;2490:13;;:31;;;;;;;;:::i;:::-;;2486:1189;;2595:15;;;;:20;2591:88;;2642:22;;;;;;;;;;;;;;2591:88;2764:196;2796:4;:10;;;2824:4;2846;:14;;;2878:4;:11;;;2907:10;2935:11;2764:14;:196::i;2486:1189::-;2998:15;2981:13;;:32;;;;;;;;:::i;:::-;;2977:698;;3100:230;3133:4;:10;;;3161:4;3183;:14;;;3215:4;:15;;;3248:4;:11;;;3277:10;3305:11;3100:15;:230::i;2977:698::-;3433:231;3467:4;:10;;;3495:4;3517;:14;;;3549:4;:15;;;3582:4;:11;;;3611:10;3639:11;3433:16;:231::i;6625:866:27:-;6864:14;6985:9;6970:11;:24;6966:519;;7064:47;7077:9;7088:11;7101:9;7064:12;:47::i;:::-;7055:56;;6966:519;;;7231:243;7269:49;7282:9;7293:11;7306;7269:12;:49::i;:::-;7336:47;7349:9;7360:11;7373:9;7336:12;:47::i;:::-;7401:9;7428:7;7453;7231:20;:243::i;:::-;7222:252;;6966:519;6625:866;;;;;;;;;:::o;8540:742:37:-;8673:28;8694:6;8673:20;:28::i;:::-;8793:12;8949:1;8946;8943;8940;8932:6;8928:2;8921:5;8916:35;8905:46;;9008:7;9003:273;;9107:34;:32;:34::i;:::-;9226:39;;;;;44918:42:144;44906:55;;9226:39:37;;;44888:74:144;44978:18;;;44971:34;;;44861:18;;9226:39:37;44706:305:144;9003:273:37;8607:675;8540:742;;:::o;4092:2496:28:-;6334:31;6227;6214:45;6116:267;5380:26;5367:40;5539:24;5747:44;5701:120;5930:25;5589:392;5510:493;5277:744;4831:27;4818:41;4881:25;4794:130;5059:42;5046:56;5124:40;5022:160;4694:502;5226:809;6065:332;;6495:87;;6535:36;;;;;;;;;;;;;;6495:87;4150:2438;4092:2496::o;1236:544:49:-;1558:1;1545:9;1537:18;;;;;;;;:::i;:::-;:22;:56;;;;-1:-1:-1;1575:10:49;:18;;;;;1537:56;:93;;;;-1:-1:-1;1609:10:49;:21;;;;;1537:93;1520:254;;;1710:53;1728:4;1734:9;1745:7;1754:8;1710:17;:53::i;1524:985:43:-;1740:31;1774:23;;;:12;:23;;;;;1866:218;1787:9;1774:23;1946:4;;1866:18;:218::i;:::-;-1:-1:-1;2181:23:43;;;;2176:102;;2220:47;2237:7;2246:9;2257;2220:16;:47::i;:::-;2475:27;;;-1:-1:-1;;;1524:985:43:o;19773:1355:37:-;9996:21:39;9990:28;;9614:19;10205:18;10202:41;19990:15:37;10192:52:39;;;10339:7;10332:27;;;9759;10454:41;;10882:31;10761:28;10667:264;11121:48;;;;11022:23;10601:458;19990:44:37;;20045:12;20067:13;20213:1;20210;20203:12;20491:7;20472:1;20442:12;20410:14;20391:1;20366:7;20343:5;20321:191;20310:202;;20614:1;20608:8;20598:18;;20674:7;20669:254;;20772:34;:32;:34::i;:::-;20883:29;;;;;45709:42:144;45697:55;;20883:29:37;;;45679:74:144;45652:18;;20883:29:37;45533:226:144;20669:254:37;21010:43;;;21020:33;21010:43;21006:116;;21076:35;;;;;;;;45938:25:144;;;46011:42;45999:55;;45979:18;;;45972:83;45911:18;;21076:35:37;45764:297:144;11544:4914:46;11863:5;11851:18;11841:254;;11922:26;11896:24;11889:60;12001:5;11973:26;11966:41;12057:23;12031:24;12024:57;11841:254;12293:21;12287:28;12439:29;12410:27;12403:66;12519:4;12489:28;12482:42;12572:2;12544:26;12537:38;12623:10;12595:26;12588:46;12913:1;12894;12850:26;12805:27;12786:1;12763:5;12740;12718:210;12993:7;12983:3268;;13144:16;13141:2328;;;13586:7;13546:13;13528:16;13524:36;13495:120;13897:7;13885:10;13881:24;14025:15;14012:11;14008:33;14154:10;14137:15;14134:31;14131:769;;;14345:32;;;14415:11;14304:156;14762:26;14659:27;;;14580:37;;;14535:189;14494:328;14267:585;14200:678;14131:769;15144:5;15127:14;15121:4;15117:25;15114:36;15111:340;;;15279:16;15276:1;15273;15258:38;15412:16;15409:1;15402:27;15111:340;;;;13141:2328;15644:43;15581:41;15553:152;15774:5;15729:43;15722:58;15848:4;15804:42;15797:56;15919:2;15877:40;15870:52;15988:10;15946:40;15939:60;16069:1;16023:44;16016:55;16179:40;16116:41;16088:149;12983:3268;-1:-1:-1;16329:21:46;16322:41;-1:-1:-1;;16440:1:46;16430:8;16423:19;-1:-1:-1;;11544:4914:46:o;17106:5620::-;17451:5;17439:18;17429:254;;17510:26;17484:24;17477:60;17589:5;17561:26;17554:41;17645:23;17619:24;17612:57;17429:254;17875:21;17869:28;17932:8;17926:15;17976:8;17970:15;18020:8;18014:15;18195:34;18145:32;18121:122;18298:4;18263:33;18256:47;18356:2;18323:31;18316:43;18412:10;18379:31;18372:51;18480:6;18443:35;18436:51;18582:43;18524:40;18500:139;18701:1;18659:40;18652:51;18992:1;18973;18924:31;18874:32;18855:1;18832:5;18809;18787:220;19072:7;19062:3273;;19223:16;19220:2328;;;19665:7;19625:13;19607:16;19603:36;19574:120;19976:7;19964:10;19960:24;20104:15;20091:11;20087:33;20233:10;20216:15;20213:31;20210:769;;;20424:32;;;20494:11;20383:156;20841:26;20738:27;;;20659:37;;;20614:189;20573:328;20346:585;20279:678;20210:769;21223:5;21206:14;21200:4;21196:25;21193:36;21190:340;;;21358:16;21355:1;21352;21337:38;21491:16;21488:1;21481:27;21190:340;;;;19220:2328;21723:43;21660:41;21632:152;21853:5;21808:43;21801:58;21927:4;21883:42;21876:56;21998:2;21956:40;21949:52;22067:10;22025:40;22018:60;22148:6;22102:44;22095:60;22263:40;22200:41;22172:149;19062:3273;-1:-1:-1;22356:8:46;22349:26;;;;22417:8;22410:26;22478:8;22471:26;22597:21;22590:41;-1:-1:-1;;22708:1:46;-1:-1:-1;22691:19:46;-1:-1:-1;;;17106:5620:46:o;16026:458:37:-;16223:29;16255:38;16281:11;21853:26;21836:44;21813:81;;21546:364;16255:38;16223:70;;16413:10;16388:21;:35;16384:94;;16439:28;16455:11;16439:15;:28::i;22906:2154::-;23166:16;14393:4:32;23340:11:37;:18;:41;23336:1009;;-1:-1:-1;23535:16:37;23515:37;;;23619:26;23602:44;;;23595:64;;;23441:33;23683:42;;;23676:60;;;;23798:28;23781:46;;23753:138;23408:1;23932:28;23915:46;;23908:64;;;23336:1009;;;-1:-1:-1;24169:28:37;24152:46;;24146:53;;24221:1;24121:119;24257:64;;;;23336:1009;24522:36;24477:25;24467:8;24463:40;24450:11;24446:58;24425:147;24605:8;24592:11;24585:29;24684:5;24651:30;24638:11;24634:48;24627:63;24759:4;24727:29;24714:11;24710:47;24703:61;24831:2;24801:27;24788:11;24784:45;24777:57;24942:10;24888:35;24875:11;24871:53;24847:119;25037:6;25003:31;24990:11;24986:49;24979:65;;24392:662;22906:2154;;;;;;;;:::o;3381:203:28:-;3514:6;3524:1;3514:11;3510:68;;3548:19;;;;;;;;;;;;;;10218:969:37;10474:28;10495:6;10474:20;:28::i;:::-;10578:59;10613:11;10626:10;10578:34;:59::i;:::-;10699:10;10695:486;;10791:46;10813:5;10820:4;10826:2;10830:6;10791:21;:46::i;:::-;10695:486;;;10936:234;10961:10;10989:11;11018:21;11057:5;11080:4;11102:2;11130:1;11150:6;10936:7;:234::i;17990:1113::-;18664:28;18647:46;;18641:53;18478:8;18461:26;;;18716:25;18616:143;18570:28;18549:224;18874:66;18899:10;18461:26;18549:224;18874:24;:66::i;:::-;-1:-1:-1;;19067:19:37;19047:40;;-1:-1:-1;17990:1113:37:o;21096:10619:38:-;21495:366;;;21649:47;21646:1;21639:58;21805:41;21802:1;21795:52;21948:403;22053:21;22050:1;22043:32;22199:16;22179:18;22172:44;22318:18;22315:1;22308:29;21948:403;22481:7;22456:23;22452:37;22604:18;22598:25;22592:32;22733:14;22727:21;22715:10;22712:37;22702:119;;22769:38;;:::i;:::-;23074:7;23062:10;23058:24;23048:7;23032:14;23028:28;23024:59;22927:170;23351:41;23320:8;23314:15;23210:200;23187:237;23588:28;23567:18;23561:25;23557:60;23534:97;23739:19;23733:26;23722:9;23719:41;23709:123;;23780:38;;:::i;:::-;24200:7;24189:9;24185:23;24085:7;24064:19;24060:33;23970:256;23947:293;24340:1;24446;24599:30;24589:8;24585:45;24579:52;24576:516;;;-1:-1:-1;;24770:20:38;24744:47;;24854:16;;25076:1;25058:20;;;24955:14;;24576:516;25193:9;25187:16;25299:20;25293:27;25279:12;25272:49;25498:19;25476:20;25472:46;25466:53;25428:19;25414:12;25410:38;25386:147;25720:24;25698:20;25694:51;25688:58;25645:24;25631:12;25627:43;25603:157;26021:34;25975:20;25946:131;25919:176;25871:29;25857:12;25853:48;25829:280;26264:30;26234:12;26207:101;26507:7;26481:23;26475:30;26471:44;26430:23;26409:120;26630:4308;26661:6;26640:18;26637:31;26630:4308;;;26807:7;26787:18;26783:32;26761:54;;26929:18;26923:25;26917:32;26903:46;;27053:14;27047:21;27035:10;27032:37;27022:125;;27091:38;;:::i;:::-;27360:7;27348:10;27344:24;27310:7;27294:14;27290:28;27261:129;27234:174;27222:186;;27536:30;27526:8;27522:45;27516:52;27485:148;26630:4308;27485:148;27923:41;27888:8;27882:15;27775:211;27748:256;27725:279;;28141:7;28120:18;28114:25;28110:39;28104:46;28091:59;;28266:19;28260:26;28249:9;28246:41;28236:131;;28311:38;;:::i;:::-;28744:7;28733:9;28729:23;28627:7;28606:19;28602:33;28504:270;28477:315;28453:339;;28975:20;28931;28904:109;29123:9;29117:16;29109:6;29105:29;29389:9;29383:16;29376:24;29346:6;29335:9;29332:21;29329:1;29325:29;29301:119;29270:11;29248:190;29233:205;;29530:9;29520:19;;;29655:1;29644:9;29637:20;;30652:30;30602:20;30563:147;30527:8;30497:239;30281:29;30231:12;30190:154;30151:223;30028:29;29970:20;29929:162;29890:231;29858:542;29774:984;29743:1181;;30868:38;;:::i;:::-;26630:4308;;;-1:-1:-1;;31024:20:38;31006:39;30999:55;;;31149:550;;;;31272:1;31259:11;31256:18;31253:304;;31375:33;31372:1;31365:44;31511:27;31508:1;31501:38;31253:304;31670:15;;:::i;:::-;31149:550;;;;;;;;21096:10619;;;:::o;9506:10838::-;10786:7;10769:15;10765:29;10909:18;10903:25;10897:32;11038:14;11032:21;11020:10;11017:37;11007:119;;11074:38;;:::i;:::-;11379:7;11367:10;11363:24;11353:7;11337:14;11333:28;11329:59;11232:170;11514:8;11508:15;11639:33;11628:9;11624:49;11601:86;11851:28;11830:18;11824:25;11820:60;11797:97;12002:11;11996:18;11985:9;11982:33;11972:115;;12035:38;;:::i;:::-;12439:7;12428:9;12424:23;12324:7;12311:11;12307:25;12217:248;12194:285;12579:1;12685;12804:30;12794:8;12790:45;12784:52;12781:520;;;-1:-1:-1;;12967:20:38;12949:39;;13051:16;;13174:1;13156:20;;;13273:14;;12781:520;13395:9;13389:16;13504:12;13498:19;13481:15;13474:44;13690:19;13676:12;13672:38;13666:45;13628:19;13611:15;13607:41;13583:142;13907:24;13893:12;13889:43;13883:50;13840:24;13823:15;13819:46;13795:152;14090:9;14084:16;14057:24;14046:9;14042:40;14035:66;14299:30;14288:9;14284:46;14278:53;14235:24;14224:9;14220:40;14196:149;14503:30;14470:15;14443:104;14427:120;;14730:7;14712:15;14706:22;14702:36;14669:15;14648:104;14853:4710;14884:6;14863:18;14860:31;14853:4710;;;15037:7;15017:18;15013:32;14991:54;;15159:18;15153:25;15147:32;15133:46;;15283:14;15277:21;15265:10;15262:37;15252:125;;15321:38;;:::i;:::-;15590:7;15578:10;15574:24;15540:7;15524:14;15520:28;15491:129;15464:174;15452:186;;15766:30;15756:8;15752:45;15725:90;15715:148;14853:4710;15715:148;15979:8;15973:15;15960:28;;16157:33;16122:9;16093:119;16066:164;16051:179;;16367:7;16346:18;16340:25;16336:39;16330:46;16317:59;;16513:11;16507:18;16496:9;16493:33;16462:161;;16567:38;;:::i;:::-;16976:7;16965:9;16961:23;16859:7;16846:11;16842:25;16744:262;16717:307;16701:323;;17191:20;17155:12;17128:101;17339:9;17333:16;17325:6;17321:29;17605:9;17599:16;17592:24;17562:6;17551:9;17548:21;17545:1;17541:29;17517:119;17486:11;17464:190;17449:205;;17746:9;17736:19;;;17871:1;17860:9;17853:20;;19275:30;19229:12;19186:149;19148:8;19116:245;18869:24;18820:9;18777:152;18736:225;18606:30;18557:9;18514:158;18473:231;18439:550;18255:24;18244:9;18240:40;18199:113;18157:9;18151:16;18117:223;18019:996;17990:1393;17959:1590;;19493:38;;:::i;:::-;14853:4710;;;14857:2;;19676:6;19653:20;19641:9;19635:16;19631:43;19624:59;19781:11;19778:550;;;19901:1;19888:11;19885:18;19882:304;;20004:33;20001:1;19994:44;20140:27;20137:1;20130:38;19882:304;20299:15;;:::i;:::-;19778:550;;;;;;;;;9506:10838;;;:::o;1347:2237:40:-;1554:16;1551:2017;;;1920:7;1884:13;1866:16;1862:36;1837:108;2229:7;2205:21;2199:28;2195:42;2349:15;2336:11;2332:33;2470:10;2453:15;2450:31;2447:607;;;2608:32;;;2642:11;2604:50;2932:26;2837:27;;;2762:37;;;2721:177;2684:304;2571:443;2512:524;2447:607;3263:5;3246:14;3240:4;3236:25;3233:36;3230:324;;;3390:16;3387:1;3384;3369:38;3519:16;3516:1;3509:27;1786:621:49;2052:195;;;;;46297:25:144;;;2172:10:49;46399:18:144;;;46392:43;46341:42;46471:15;;46451:18;;;46444:43;46503:18;;;46496:34;;;1994:12:49;;2009:248;;2034:4;;2092:35;;46269:19:144;;2052:195:49;46066:470:144;2009:248:49;1994:263;;2344:56;2381:7;2390:9;2344:36;:56::i;695:406:40:-;802:12;1070:1;1051;1024:8;1018:15;992:7;982:8;978:22;954:6;931:5;903:182;892:193;695:406;-1:-1:-1;;;695:406:40:o;6260:633:49:-;6423:7;6418:256;;6511:34;:32;:34::i;:::-;6630:33;;;;;;;;13746:25:144;;;13719:18;;6630:33:49;13600:177:144;6418:256:49;6765:55;6784:35;6765:18;:55::i;:::-;6761:126;;;6843:33;;;;;;;;13746:25:144;;;13719:18;;6843:33:49;13600:177:144;1325:9615:46;1751:21;1745:28;1899;1871:26;1864:64;1977:4;1948:27;1941:41;2029:2;2002:25;1995:37;2083:6;2052:29;2045:45;2777:7;2758:1;2715:25;2671:26;2652:1;2629:5;2606;2584:214;3275:10;3222:16;3215:24;3189:2;3171:16;3168:24;3164:1;3160;3154:8;3151:15;3147:46;3123:134;2907:392;3660:16;3653:24;3646:32;3637:7;3633:46;3623:7110;;3981:7;3971:5;3959:18;3952:26;3945:34;3941:48;3931:6582;;4070:7;4060:6132;;4169:10;4159:4759;;4359:16;4356:3322;;;4926:7;4874:13;4856:16;4852:36;4811:156;5332:7;5320:10;5316:24;5484:15;5471:11;5467:33;5637:10;5620:15;5617:31;5614:1293;;;5888:186;;;6124:11;5835:346;6721:26;6594:27;;;6337:203;;;6280:391;6227:566;5786:1049;5695:1178;5614:1293;7199:5;7182:14;7176:4;7172:25;7169:36;7166:482;;;7397:16;7394:1;7391;7376:38;7597:16;7594:1;7587:27;7166:482;;;;4356:3322;7901:43;7826:41;7786:188;8120:5;8043:43;8003:152;8300:4;8224:42;8184:150;8412:2;8370:40;8363:52;8493:1;8451:40;8444:51;8642:6;8564:44;8524:154;8822:40;8747:41;8707:185;4159:4759;9207:49;9130:47;9094:188;9422:5;9343:49;9307:146;9592:4;9514:48;9478:144;9759:2;9683:46;9647:140;9928:6;9848:50;9812:148;10098:46;10021:47;9985:185;4060:6132;10328:26;10302:24;10295:60;10411:5;10383:26;10376:41;10471:23;10445:24;10438:57;3931:6582;-1:-1:-1;;10811:21:46;10804:41;-1:-1:-1;;10922:1:46;10912:8;10905:19;-1:-1:-1;;1325:9615:46:o;3929:779:40:-;3997:4;4089:13;4314:7;4296:16;4293:29;4290:285;;4441:7;4438:1;4435;4420:29;-1:-1:-1;4559:1:40;4553:8;4290:285;4683:18;;;;;;;;;;;;3929:779;-1:-1:-1;3929:779:40:o;-1:-1:-1:-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:531:144:-;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:162;170:6;167:1;164:13;156:162;;;232:4;288:13;;;284:22;;278:29;260:11;;;256:20;;249:59;185:12;156:162;;;336:6;333:1;330:13;327:87;;;402:1;395:4;386:6;381:3;377:16;373:27;366:38;327:87;-1:-1:-1;459:2:144;447:15;464:66;443:88;434:98;;;;534:4;430:109;;14:531;-1:-1:-1;;14:531:144:o;550:220::-;699:2;688:9;681:21;662:4;719:45;760:2;749:9;745:18;737:6;719:45;:::i;775:180::-;834:6;887:2;875:9;866:7;862:23;858:32;855:52;;;903:1;900;893:12;855:52;-1:-1:-1;926:23:144;;775:180;-1:-1:-1;775:180:144:o;1376:184::-;1428:77;1425:1;1418:88;1525:4;1522:1;1515:15;1549:4;1546:1;1539:15;1565:253;1637:2;1631:9;1679:4;1667:17;;1714:18;1699:34;;1735:22;;;1696:62;1693:88;;;1761:18;;:::i;:::-;1797:2;1790:22;1565:253;:::o;1823:255::-;1895:2;1889:9;1937:6;1925:19;;1974:18;1959:34;;1995:22;;;1956:62;1953:88;;;2021:18;;:::i;2083:334::-;2154:2;2148:9;2210:2;2200:13;;2215:66;2196:86;2184:99;;2313:18;2298:34;;2334:22;;;2295:62;2292:88;;;2360:18;;:::i;:::-;2396:2;2389:22;2083:334;;-1:-1:-1;2083:334:144:o;2422:196::-;2495:4;2528:18;2520:6;2517:30;2514:56;;;2550:18;;:::i;:::-;-1:-1:-1;2595:1:144;2591:14;2607:4;2587:25;;2422:196::o;2623:154::-;2709:42;2702:5;2698:54;2691:5;2688:65;2678:93;;2767:1;2764;2757:12;2782:134;2850:20;;2879:31;2850:20;2879:31;:::i;:::-;2782:134;;;:::o;2921:149::-;2995:20;;3044:1;3034:12;;3024:40;;3060:1;3057;3050:12;3075:566;3131:5;3179:4;3167:9;3162:3;3158:19;3154:30;3151:50;;;3197:1;3194;3187:12;3151:50;3219:22;;:::i;:::-;3210:31;;3264:35;3289:9;3264:35;:::i;:::-;3257:5;3250:50;3352:2;3341:9;3337:18;3324:32;3365:33;3390:7;3365:33;:::i;:::-;3430:7;3425:2;3418:5;3414:14;3407:31;;3498:2;3487:9;3483:18;3470:32;3465:2;3458:5;3454:14;3447:56;3563:2;3552:9;3548:18;3535:32;3530:2;3523:5;3519:14;3512:56;3629:3;3618:9;3614:19;3601:33;3595:3;3588:5;3584:15;3577:58;3075:566;;;;:::o;3646:728::-;3709:5;3762:3;3755:4;3747:6;3743:17;3739:27;3729:55;;3780:1;3777;3770:12;3729:55;3816:6;3803:20;3842:4;3866:73;3882:56;3935:2;3882:56;:::i;:::-;3866:73;:::i;:::-;3973:15;;;4035:4;4078:11;;;4066:24;;4062:33;;;4004:12;;;;3961:3;4107:15;;;4104:35;;;4135:1;4132;4125:12;4104:35;4171:2;4163:6;4159:15;4183:162;4199:6;4194:3;4191:15;4183:162;;;4265:37;4298:3;4293;4265:37;:::i;:::-;4253:50;;4323:12;;;;4216;;4183:162;;;-1:-1:-1;4363:5:144;;3646:728;-1:-1:-1;;;;;;;3646:728:144:o;4379:908::-;4443:5;4491:4;4479:9;4474:3;4470:19;4466:30;4463:50;;;4509:1;4506;4499:12;4463:50;4542:2;4536:9;4584:4;4576:6;4572:17;4655:6;4643:10;4640:22;4619:18;4607:10;4604:34;4601:62;4598:88;;;4666:18;;:::i;:::-;4702:2;4695:22;4735:6;-1:-1:-1;4735:6:144;4765:35;4790:9;4765:35;:::i;:::-;4757:6;4750:51;4853:2;4842:9;4838:18;4825:32;4866:33;4891:7;4866:33;:::i;:::-;4932:7;4927:2;4919:6;4915:15;4908:32;;5001:2;4990:9;4986:18;4973:32;4968:2;4960:6;4956:15;4949:57;5067:2;5056:9;5052:18;5039:32;5034:2;5026:6;5022:15;5015:57;5134:3;5123:9;5119:19;5106:33;5100:3;5092:6;5088:16;5081:59;5192:3;5181:9;5177:19;5164:33;5206;5231:7;5206:33;:::i;:::-;5267:3;5255:16;;;;5248:33;4379:908;;-1:-1:-1;;4379:908:144:o;5292:744::-;5363:5;5416:3;5409:4;5401:6;5397:17;5393:27;5383:55;;5434:1;5431;5424:12;5383:55;5470:6;5457:20;5496:4;5520:73;5536:56;5589:2;5536:56;:::i;5520:73::-;5627:15;;;5689:4;5732:11;;;5720:24;;5716:33;;;5658:12;;;;5615:3;5761:15;;;5758:35;;;5789:1;5786;5779:12;5758:35;5825:2;5817:6;5813:15;5837:170;5853:6;5848:3;5845:15;5837:170;;;5919:45;5960:3;5955;5919:45;:::i;:::-;5907:58;;5985:12;;;;5870;;5837:170;;6041:150;6116:20;;6165:1;6155:12;;6145:40;;6181:1;6178;6171:12;6196:1291;6258:5;6306:6;6294:9;6289:3;6285:19;6281:32;6278:52;;;6326:1;6323;6316:12;6278:52;6348:22;;:::i;:::-;6339:31;;6393:29;6412:9;6393:29;:::i;:::-;6386:5;6379:44;6455:38;6489:2;6478:9;6474:18;6455:38;:::i;:::-;6450:2;6443:5;6439:14;6432:62;6545:2;6534:9;6530:18;6517:32;6568:18;6609:2;6601:6;6598:14;6595:34;;;6625:1;6622;6615:12;6595:34;6661:66;6723:3;6714:6;6703:9;6699:22;6661:66;:::i;:::-;6656:2;6649:5;6645:14;6638:90;6781:2;6770:9;6766:18;6753:32;6737:48;;6810:2;6800:8;6797:16;6794:36;;;6826:1;6823;6816:12;6794:36;;6862:76;6934:3;6923:8;6912:9;6908:24;6862:76;:::i;:::-;6857:2;6850:5;6846:14;6839:100;;6972:46;7013:3;7002:9;6998:19;6972:46;:::i;:::-;6966:3;6959:5;6955:15;6948:71;7080:3;7069:9;7065:19;7052:33;7046:3;7039:5;7035:15;7028:58;7147:3;7136:9;7132:19;7119:33;7113:3;7106:5;7102:15;7095:58;7214:3;7203:9;7199:19;7186:33;7180:3;7173:5;7169:15;7162:58;7239:3;7302:2;7291:9;7287:18;7274:32;7269:2;7262:5;7258:14;7251:56;;7326:3;7389:2;7378:9;7374:18;7361:32;7356:2;7349:5;7345:14;7338:56;;7413:3;7476:2;7465:9;7461:18;7448:32;7443:2;7436:5;7432:14;7425:56;;6196:1291;;;;:::o;7492:186::-;7560:20;;7620:32;7609:44;;7599:55;;7589:83;;7668:1;7665;7658:12;7683:589;7725:5;7778:3;7771:4;7763:6;7759:17;7755:27;7745:55;;7796:1;7793;7786:12;7745:55;7832:6;7819:20;7858:18;7854:2;7851:26;7848:52;;;7880:18;;:::i;:::-;7924:114;8032:4;7963:66;7956:4;7952:2;7948:13;7944:86;7940:97;7924:114;:::i;:::-;8063:2;8054:7;8047:19;8109:3;8102:4;8097:2;8089:6;8085:15;8081:26;8078:35;8075:55;;;8126:1;8123;8116:12;8075:55;8191:2;8184:4;8176:6;8172:17;8165:4;8156:7;8152:18;8139:55;8239:1;8214:16;;;8232:4;8210:27;8203:38;;;;8218:7;7683:589;-1:-1:-1;;;7683:589:144:o;8277:896::-;8337:5;8385:4;8373:9;8368:3;8364:19;8360:30;8357:50;;;8403:1;8400;8393:12;8357:50;8425:22;;:::i;:::-;8416:31;;8483:9;8470:23;8512:18;8553:2;8545:6;8542:14;8539:34;;;8569:1;8566;8559:12;8539:34;8596:62;8654:3;8645:6;8634:9;8630:22;8596:62;:::i;:::-;8589:5;8582:77;8691:38;8725:2;8714:9;8710:18;8691:38;:::i;:::-;8686:2;8679:5;8675:14;8668:62;8762:38;8796:2;8785:9;8781:18;8762:38;:::i;:::-;8757:2;8750:5;8746:14;8739:62;8854:2;8843:9;8839:18;8826:32;8810:48;;8883:2;8873:8;8870:16;8867:36;;;8899:1;8896;8889:12;8867:36;8935:47;8978:3;8967:8;8956:9;8952:24;8935:47;:::i;:::-;8930:2;8923:5;8919:14;8912:71;9036:3;9025:9;9021:19;9008:33;8992:49;;9066:2;9056:8;9053:16;9050:36;;;9082:1;9079;9072:12;9050:36;;9119:47;9162:3;9151:8;9140:9;9136:24;9119:47;:::i;:::-;9113:3;9106:5;9102:15;9095:72;;8277:896;;;;:::o;9178:929::-;9245:5;9298:3;9291:4;9283:6;9279:17;9275:27;9265:55;;9316:1;9313;9306:12;9265:55;9352:6;9339:20;9378:4;9402:73;9418:56;9471:2;9418:56;:::i;9402:73::-;9509:15;;;9595:1;9591:10;;;;9579:23;;9575:32;;;9540:12;;;;9619:15;;;9616:35;;;9647:1;9644;9637:12;9616:35;9683:2;9675:6;9671:15;9695:383;9711:6;9706:3;9703:15;9695:383;;;9797:3;9784:17;9833:18;9820:11;9817:35;9814:125;;;9893:1;9922:2;9918;9911:14;9814:125;9964:71;10031:3;10026:2;10012:11;10004:6;10000:24;9996:33;9964:71;:::i;:::-;9952:84;;-1:-1:-1;10056:12:144;;;;9728;;9695:383;;;-1:-1:-1;10096:5:144;9178:929;-1:-1:-1;;;;;;9178:929:144:o;10112:392::-;10200:8;10210:6;10264:3;10257:4;10249:6;10245:17;10241:27;10231:55;;10282:1;10279;10272:12;10231:55;-1:-1:-1;10305:20:144;;10348:18;10337:30;;10334:50;;;10380:1;10377;10370:12;10334:50;10417:4;10409:6;10405:17;10393:29;;10477:3;10470:4;10460:6;10457:1;10453:14;10445:6;10441:27;10437:38;10434:47;10431:67;;;10494:1;10491;10484:12;10431:67;10112:392;;;;;:::o;10509:1160::-;10763:6;10771;10779;10787;10795;10848:2;10836:9;10827:7;10823:23;10819:32;10816:52;;;10864:1;10861;10854:12;10816:52;10904:9;10891:23;10933:18;10974:2;10966:6;10963:14;10960:34;;;10990:1;10987;10980:12;10960:34;11013:74;11079:7;11070:6;11059:9;11055:22;11013:74;:::i;:::-;11003:84;;11140:2;11129:9;11125:18;11112:32;11096:48;;11169:2;11159:8;11156:16;11153:36;;;11185:1;11182;11175:12;11153:36;11224:97;11313:7;11302:8;11291:9;11287:24;11224:97;:::i;:::-;11340:8;;-1:-1:-1;11198:123:144;-1:-1:-1;11428:2:144;11413:18;;11400:32;;-1:-1:-1;11444:16:144;;;11441:36;;;11473:1;11470;11463:12;11441:36;;11512:97;11601:7;11590:8;11579:9;11575:24;11512:97;:::i;:::-;10509:1160;;;;-1:-1:-1;10509:1160:144;;-1:-1:-1;11628:8:144;;11486:123;10509:1160;-1:-1:-1;;;10509:1160:144:o;11674:184::-;11726:77;11723:1;11716:88;11823:4;11820:1;11813:15;11847:4;11844:1;11837:15;11863:139;11943:1;11936:5;11933:12;11923:46;;11949:18;;:::i;:::-;11978;;11863:139::o;12139:459::-;12205:43;12244:3;12236:5;12230:12;12205:43;:::i;:::-;12294:4;12287:5;12283:16;12277:23;12319:42;12411:2;12397:12;12393:21;12386:4;12381:3;12377:14;12370:45;12464:4;12457:5;12453:16;12447:23;12440:4;12435:3;12431:14;12424:47;12520:4;12513:5;12509:16;12503:23;12496:4;12491:3;12487:14;12480:47;12588:2;12580:4;12573:5;12569:16;12563:23;12559:32;12552:4;12547:3;12543:14;12536:56;;;12139:459;;:::o;12603:663::-;12665:3;12703:5;12697:12;12730:6;12725:3;12718:19;12756:4;12785:2;12780:3;12776:12;12769:19;;12822:2;12815:5;12811:14;12843:1;12853:388;12867:6;12864:1;12861:13;12853:388;;;12932:6;12926:13;12952:46;12994:3;12989:2;12983:9;12952:46;:::i;:::-;13044:11;;;13038:18;13058:42;13034:67;13027:4;13018:14;;13011:91;13152:4;13144:13;13138:20;13131:4;13122:14;;13115:44;13188:4;13179:14;;;;13216:15;;;;12889:1;12882:9;12853:388;;;-1:-1:-1;13257:3:144;;12603:663;-1:-1:-1;;;;;12603:663:144:o;13271:324::-;13504:2;13493:9;13486:21;13467:4;13524:65;13585:2;13574:9;13570:18;13562:6;13524:65;:::i;13782:395::-;13876:6;13929:2;13917:9;13908:7;13904:23;13900:32;13897:52;;;13945:1;13942;13935:12;13897:52;13985:9;13972:23;14018:18;14010:6;14007:30;14004:50;;;14050:1;14047;14040:12;14004:50;14073:22;;14129:3;14111:16;;;14107:26;14104:46;;;14146:1;14143;14136:12;14364:1817;14784:6;14792;14800;14808;14816;14824;14832;14840;14848;14856;14909:3;14897:9;14888:7;14884:23;14880:33;14877:53;;;14926:1;14923;14916:12;14877:53;14966:9;14953:23;14995:18;15036:2;15028:6;15025:14;15022:34;;;15052:1;15049;15042:12;15022:34;15075:74;15141:7;15132:6;15121:9;15117:22;15075:74;:::i;:::-;15065:84;;15202:2;15191:9;15187:18;15174:32;15158:48;;15231:2;15221:8;15218:16;15215:36;;;15247:1;15244;15237:12;15215:36;15286:97;15375:7;15364:8;15353:9;15349:24;15286:97;:::i;:::-;15402:8;;-1:-1:-1;15260:123:144;-1:-1:-1;15490:2:144;15475:18;;15462:32;;-1:-1:-1;15506:16:144;;;15503:36;;;15535:1;15532;15525:12;15503:36;15574:97;15663:7;15652:8;15641:9;15637:24;15574:97;:::i;:::-;15690:8;;-1:-1:-1;15548:123:144;-1:-1:-1;15778:2:144;15763:18;;15750:32;;-1:-1:-1;15794:16:144;;;15791:36;;;15823:1;15820;15813:12;15791:36;;15862:97;15951:7;15940:8;15929:9;15925:24;15862:97;:::i;:::-;15978:8;;-1:-1:-1;15836:123:144;-1:-1:-1;;16060:3:144;16045:19;;16032:33;;-1:-1:-1;16084:39:144;16118:3;16103:19;;16084:39;:::i;:::-;16074:49;;16170:3;16159:9;16155:19;16142:33;16132:43;;14364:1817;;;;;;;;;;;;;:::o;16186:879::-;16502:2;16514:21;;;16584:13;;16487:18;;;16606:22;;;16454:4;;16681;;16659:2;16644:18;;;16708:15;;;16454:4;16751:185;16765:6;16762:1;16759:13;16751:185;;;16840:13;;16833:21;16826:29;16814:42;;16876:12;;;;16911:15;;;;16787:1;16780:9;16751:185;;;16755:3;;;16981:9;16976:3;16972:19;16967:2;16956:9;16952:18;16945:47;17009:50;17055:3;17047:6;17009:50;:::i;:::-;17001:58;16186:879;-1:-1:-1;;;;;;16186:879:144:o;17070:487::-;17181:6;17189;17242:2;17230:9;17221:7;17217:23;17213:32;17210:52;;;17258:1;17255;17248:12;17210:52;17298:9;17285:23;17331:18;17323:6;17320:30;17317:50;;;17363:1;17360;17353:12;17317:50;17402:95;17489:7;17480:6;17469:9;17465:22;17402:95;:::i;:::-;17516:8;;17376:121;;-1:-1:-1;17070:487:144;-1:-1:-1;;;;17070:487:144:o;17754:879::-;17932:6;17940;17948;17956;18009:2;17997:9;17988:7;17984:23;17980:32;17977:52;;;18025:1;18022;18015:12;17977:52;18065:9;18052:23;18094:18;18135:2;18127:6;18124:14;18121:34;;;18151:1;18148;18141:12;18121:34;18190:95;18277:7;18268:6;18257:9;18253:22;18190:95;:::i;:::-;18304:8;;-1:-1:-1;18164:121:144;-1:-1:-1;18392:2:144;18377:18;;18364:32;;-1:-1:-1;18408:16:144;;;18405:36;;;18437:1;18434;18427:12;18405:36;;18476:97;18565:7;18554:8;18543:9;18539:24;18476:97;:::i;:::-;17754:879;;;;-1:-1:-1;18592:8:144;-1:-1:-1;;;;17754:879:144:o;18638:452::-;18731:6;18739;18792:2;18780:9;18771:7;18767:23;18763:32;18760:52;;;18808:1;18805;18798:12;18760:52;18848:9;18835:23;18881:18;18873:6;18870:30;18867:50;;;18913:1;18910;18903:12;18867:50;18936:22;;18992:2;18974:16;;;18970:25;18967:45;;;19008:1;19005;18998:12;18967:45;19031:2;19080;19065:18;;;;19052:32;;-1:-1:-1;;;18638:452:144:o;19095:994::-;19277:6;19285;19293;19301;19309;19362:3;19350:9;19341:7;19337:23;19333:33;19330:53;;;19379:1;19376;19369:12;19330:53;19419:9;19406:23;19448:18;19489:2;19481:6;19478:14;19475:34;;;19505:1;19502;19495:12;19475:34;19528:22;;;;19584:3;19566:16;;;19562:26;19559:46;;;19601:1;19598;19591:12;19559:46;19624:2;;-1:-1:-1;19679:2:144;19664:18;;19651:32;;19695:16;;;19692:36;;;19724:1;19721;19714:12;19692:36;;19763:97;19852:7;19841:8;19830:9;19826:24;19763:97;:::i;:::-;19879:8;;-1:-1:-1;19737:123:144;-1:-1:-1;;19961:2:144;19946:18;;19933:32;;-1:-1:-1;20015:2:144;20000:18;;19987:32;20028:31;19987:32;20028:31;:::i;:::-;20078:5;20068:15;;;19095:994;;;;;;;;:::o;20094:1460::-;20429:6;20437;20445;20453;20461;20469;20477;20485;20538:3;20526:9;20517:7;20513:23;20509:33;20506:53;;;20555:1;20552;20545:12;20506:53;20595:9;20582:23;20624:18;20665:2;20657:6;20654:14;20651:34;;;20681:1;20678;20671:12;20651:34;20720:95;20807:7;20798:6;20787:9;20783:22;20720:95;:::i;:::-;20834:8;;-1:-1:-1;20694:121:144;-1:-1:-1;20922:2:144;20907:18;;20894:32;;-1:-1:-1;20938:16:144;;;20935:36;;;20967:1;20964;20957:12;20935:36;21006:97;21095:7;21084:8;21073:9;21069:24;21006:97;:::i;:::-;21122:8;;-1:-1:-1;20980:123:144;-1:-1:-1;21210:2:144;21195:18;;21182:32;;-1:-1:-1;21226:16:144;;;21223:36;;;21255:1;21252;21245:12;21223:36;;21294:97;21383:7;21372:8;21361:9;21357:24;21294:97;:::i;:::-;20094:1460;;;;-1:-1:-1;20094:1460:144;;;;21410:8;;21492:2;21477:18;;21464:32;;21543:3;21528:19;21515:33;;-1:-1:-1;20094:1460:144;-1:-1:-1;;;;20094:1460:144:o;21559:247::-;21618:6;21671:2;21659:9;21650:7;21646:23;21642:32;21639:52;;;21687:1;21684;21677:12;21639:52;21726:9;21713:23;21745:31;21770:5;21745:31;:::i;21811:411::-;22016:2;22005:9;21998:21;21979:4;22036:45;22077:2;22066:9;22062:18;22054:6;22036:45;:::i;:::-;22028:53;;22117:6;22112:2;22101:9;22097:18;22090:34;22172:42;22164:6;22160:55;22155:2;22144:9;22140:18;22133:83;21811:411;;;;;;:::o;22227:400::-;22326:6;22379:2;22367:9;22358:7;22354:23;22350:32;22347:52;;;22395:1;22392;22385:12;22347:52;22435:9;22422:23;22468:18;22460:6;22457:30;22454:50;;;22500:1;22497;22490:12;22454:50;22523:22;;22579:3;22561:16;;;22557:26;22554:46;;;22596:1;22593;22586:12;23134:2710;23320:9;23355:77;23371:60;23424:6;23371:60;:::i;23355:77::-;23466:19;;;23504:4;23524:12;;;;23454:3;23555:1;23590:15;;;23579:27;;23629:14;23618:26;;23615:46;;;23657:1;23654;23647:12;23615:46;23681:5;23695:2116;23711:6;23706:3;23703:15;23695:2116;;;23797:3;23784:17;23824:18;23874:2;23861:11;23858:19;23855:109;;;23918:1;23947:2;23943;23936:14;23855:109;23998:11;23991:5;23987:23;23977:33;;24055:4;24050:2;24034:14;24030:23;24026:34;24023:124;;;24101:1;24130:2;24126;24119:14;24023:124;24175:22;;:::i;:::-;24239:2;24226:16;24217:7;24210:33;24292:2;24288;24284:11;24271:25;24331:1;24322:7;24319:14;24309:112;;24375:1;24404:2;24400;24393:14;24309:112;24441:16;;;24434:33;24490:2;24543:11;;;24530:25;24512:16;;;24505:51;24579:2;24632:11;;;24619:25;24601:16;;;24594:51;24669:3;24712:12;;;24699:26;24741:14;;;24738:107;;;24797:1;24827:3;24822;24815:16;24738:107;24869:15;;;;;24927:14;24920:4;24911:14;;24907:35;24897:136;;24985:1;24974:12;;25015:3;25010;25003:16;24897:136;25070:3;25057:17;25046:28;;25100:74;25116:57;25169:3;25116:57;:::i;25100:74::-;25218:18;;;25314:12;;;25305:22;;25301:31;;;25258:14;;;;25361;25348:28;;25345:121;;;25418:1;25448:3;25443;25436:16;25345:121;25492:12;;;;25517:174;25535:8;25528:5;25525:19;25517:174;;;25617:19;;25603:34;;25556:14;;;;25663;;;;25517:174;;;25711:17;;;25704:32;;;;-1:-1:-1;25749:20:144;;-1:-1:-1;;25789:12:144;;;;23728;;23695:2116;;;-1:-1:-1;25833:5:144;;23134:2710;-1:-1:-1;;;;;;;23134:2710:144:o;25849:636::-;25971:4;25977:6;26037:11;26024:25;26127:66;26116:8;26100:14;26096:29;26092:102;26072:18;26068:127;26058:155;;26209:1;26206;26199:12;26058:155;26236:33;;26288:20;;;-1:-1:-1;26331:18:144;26320:30;;26317:50;;;26363:1;26360;26353:12;26317:50;26396:4;26384:17;;-1:-1:-1;26455:4:144;26443:17;;26427:14;26423:38;26413:49;;26410:69;;;26475:1;26472;26465:12;26490:232;26576:6;26629:3;26617:9;26608:7;26604:23;26600:33;26597:53;;;26646:1;26643;26636:12;26597:53;26669:47;26708:7;26697:9;26669:47;:::i;26727:644::-;26857:4;26863:6;26923:11;26910:25;27013:66;27002:8;26986:14;26982:29;26978:102;26958:18;26954:127;26944:155;;27095:1;27092;27085:12;26944:155;27122:33;;27174:20;;;-1:-1:-1;27217:18:144;27206:30;;27203:50;;;27249:1;27246;27239:12;27203:50;27282:4;27270:17;;-1:-1:-1;27341:4:144;27329:17;;27313:14;27309:38;27299:49;;27296:69;;;27361:1;27358;27351:12;27376:248;27470:6;27523:3;27511:9;27502:7;27498:23;27494:33;27491:53;;;27540:1;27537;27530:12;27491:53;27563:55;27610:7;27599:9;27563:55;:::i;27629:207::-;27702:6;27755:2;27743:9;27734:7;27730:23;27726:32;27723:52;;;27771:1;27768;27761:12;27723:52;27794:36;27820:9;27794:36;:::i;27841:211::-;27955:9;27992:54;28031:14;28024:5;27992:54;:::i;28057:489::-;28124:5;28172:4;28160:9;28155:3;28151:19;28147:30;28144:50;;;28190:1;28187;28180:12;28144:50;28223:4;28217:11;28267:4;28259:6;28255:17;28338:6;28326:10;28323:22;28302:18;28290:10;28287:34;28284:62;28281:88;;;28349:18;;:::i;:::-;28385:4;28378:24;28450:23;;28435:39;;28535:2;28520:18;;;28507:32;28490:15;;;28483:57;;;;-1:-1:-1;28420:6:144;28057:489;-1:-1:-1;28057:489:144:o;28551:1832::-;28797:9;28832:77;28848:60;28901:6;28848:60;:::i;28832:77::-;28931:3;28955:6;28950:3;28943:19;28981:4;29010:2;29005:3;29001:12;28994:19;;29054:6;29051:1;29047:14;29040:5;29036:26;29085:14;29077:6;29074:26;29071:46;;;29113:1;29110;29103:12;29071:46;29137:5;29151:1199;29167:6;29162:3;29159:15;29151:1199;;;29253:3;29240:17;29289:18;29276:11;29273:35;29270:125;;;29349:1;29378:2;29374;29367:14;29270:125;29418:23;;29483:14;29476:4;29468:13;;29464:34;29454:132;;29540:1;29569:2;29565;29558:14;29454:132;29622:2;29609:16;29651:73;29667:56;29720:2;29667:56;:::i;29651:73::-;29768:17;;;29866:1;29862:10;;;;29854:19;;29850:28;;;29807:14;;;;29907;29894:28;;29891:118;;;29963:1;29992:2;29988;29981:14;29891:118;30035:11;;;;30059:218;30077:8;30070:5;30067:19;30059:218;;;30161:61;30207:14;30200:5;30161:61;:::i;:::-;30154:5;30147:76;30260:2;30253:5;30249:14;30240:23;;30109:4;30102:5;30098:16;30089:25;;30059:218;;;30290:18;;-1:-1:-1;;;30328:12:144;;;;29184;;29151:1199;;;-1:-1:-1;30372:5:144;;28551:1832;-1:-1:-1;;;;;;28551:1832:144:o;30388:184::-;30440:77;30437:1;30430:88;30537:4;30534:1;30527:15;30561:4;30558:1;30551:15;30577:381;30668:4;30726:11;30713:25;30816:66;30805:8;30789:14;30785:29;30781:102;30761:18;30757:127;30747:155;;30898:1;30895;30888:12;30747:155;30919:33;;;;;30577:381;-1:-1:-1;;30577:381:144:o;30963:391::-;31064:4;31122:11;31109:25;31212:66;31201:8;31185:14;31181:29;31177:102;31157:18;31153:127;31143:155;;31294:1;31291;31284:12;31359:217;31477:9;31514:56;31555:14;31548:5;31514:56;:::i;31581:580::-;31658:4;31664:6;31724:11;31711:25;31814:66;31803:8;31787:14;31783:29;31779:102;31759:18;31755:127;31745:155;;31896:1;31893;31886:12;31745:155;31923:33;;31975:20;;;-1:-1:-1;32018:18:144;32007:30;;32004:50;;;32050:1;32047;32040:12;32004:50;32083:4;32071:17;;-1:-1:-1;32114:14:144;32110:27;;;32100:38;;32097:58;;;32151:1;32148;32141:12;32426:643;32558:4;32564:6;32624:11;32611:25;32714:66;32703:8;32687:14;32683:29;32679:102;32659:18;32655:127;32645:155;;32796:1;32793;32786:12;32645:155;32823:33;;32875:20;;;-1:-1:-1;32918:18:144;32907:30;;32904:50;;;32950:1;32947;32940:12;32904:50;32983:4;32971:17;;-1:-1:-1;33034:1:144;33030:14;;;33014;33010:35;33000:46;;32997:66;;;33059:1;33056;33049:12;34700:128;34740:3;34771:1;34767:6;34764:1;34761:13;34758:39;;;34777:18;;:::i;:::-;-1:-1:-1;34813:9:144;;34700:128::o;34833:228::-;34873:7;34999:1;34931:66;34927:74;34924:1;34921:81;34916:1;34909:9;34902:17;34898:105;34895:131;;;35006:18;;:::i;:::-;-1:-1:-1;35046:9:144;;34833:228::o;35066:473::-;35131:3;35169:5;35163:12;35196:6;35191:3;35184:19;35222:4;35251:2;35246:3;35242:12;35235:19;;35288:2;35281:5;35277:14;35309:1;35319:195;35333:6;35330:1;35327:13;35319:195;;;35382:50;35428:3;35419:6;35413:13;35382:50;:::i;:::-;35461:4;35452:14;;;;;35489:15;;;;35355:1;35348:9;35319:195;;35544:1433;35934:4;35963:3;36004:2;35993:9;35989:18;36034:6;36023:9;36016:25;36060:2;36081:42;36171:2;36163:6;36159:15;36154:2;36143:9;36139:18;36132:43;36194:2;36232;36227;36216:9;36212:18;36205:30;36255:6;36290;36284:13;36321:6;36313;36306:22;36359:3;36348:9;36344:19;36337:26;;36398:2;36390:6;36386:15;36372:29;;36419:1;36429:414;36443:6;36440:1;36437:13;36429:414;;;36508:6;36502:13;36528:40;36564:3;36559:2;36553:9;36528:40;:::i;:::-;36612:11;;;36606:18;36602:27;;36588:12;;;36581:49;36670:11;;;36664:18;36650:12;;;36643:40;36706:4;36750:11;;;36744:18;36730:12;;;36723:40;36818:15;;;;36783:12;;;;36465:1;36458:9;36429:414;;;36433:3;;36890:9;36885:3;36881:19;36874:4;36863:9;36859:20;36852:49;36918:53;36967:3;36959:6;36918:53;:::i;:::-;36910:61;35544:1433;-1:-1:-1;;;;;;;;;;;;35544:1433:144:o;36982:125::-;37022:4;37050:1;37047;37044:8;37041:34;;;37055:18;;:::i;:::-;-1:-1:-1;37092:9:144;;36982:125::o;37112:253::-;37209:6;37262:2;37250:9;37241:7;37237:23;37233:32;37230:52;;;37278:1;37275;37268:12;37230:52;37301:58;37351:7;37340:9;37301:58;:::i;37694:135::-;37770:1;37763:5;37760:12;37750:46;;37776:18;;:::i;37834:198::-;37975:2;37960:18;;37987:39;37964:9;38008:6;37987:39;:::i;38037:838::-;38099:3;38137:5;38131:12;38164:6;38159:3;38152:19;38190:4;38219:2;38214:3;38210:12;38203:19;;38256:2;38249:5;38245:14;38277:1;38287:563;38301:6;38298:1;38295:13;38287:563;;;38366:6;38360:13;38386:40;38422:3;38417:2;38411:9;38386:40;:::i;:::-;38470:11;;;38464:18;38484:42;38460:67;38446:12;;;38439:89;38551:4;38595:11;;;38589:18;38575:12;;;38568:40;38631:4;38675:11;;;38669:18;38655:12;;;38648:40;38711:4;38755:11;;;38749:18;38735:12;;;38728:40;38797:4;38788:14;;;;38825:15;;;;38323:1;38316:9;38287:563;;38880:1005;38950:3;38988:5;38982:12;39015:6;39010:3;39003:19;39041:4;39070:2;39065:3;39061:12;39054:19;;39107:2;39100:5;39096:14;39128:1;39138:722;39152:6;39149:1;39146:13;39138:722;;;39217:6;39211:13;39237:40;39273:3;39268:2;39262:9;39237:40;:::i;:::-;39316:11;;;39310:18;39351:42;39427:21;;;39413:12;;;39406:43;39472:4;39516:11;;;39510:18;39496:12;;;39489:40;39552:4;39596:11;;;39590:18;39576:12;;;39569:40;39632:4;39676:11;;;39670:18;39656:12;;;39649:40;39712:4;39760:11;;;39754:18;39750:27;39736:12;;;39729:49;39807:4;39798:14;;;;39835:15;;;;39174:1;39167:9;39138:722;;39890:140;39971:1;39964:5;39961:12;39951:46;;39977:18;;:::i;40157:435::-;40210:3;40248:5;40242:12;40275:6;40270:3;40263:19;40301:4;40330:2;40325:3;40321:12;40314:19;;40367:2;40360:5;40356:14;40388:1;40398:169;40412:6;40409:1;40406:13;40398:169;;;40473:13;;40461:26;;40507:12;;;;40542:15;;;;40434:1;40427:9;40398:169;;40597:1146;40666:3;40704:5;40698:12;40731:6;40726:3;40719:19;40757:4;40798:2;40793:3;40789:12;40823:11;40850;40843:18;;40900:6;40897:1;40893:14;40886:5;40882:26;40870:38;;40942:2;40935:5;40931:14;40963:1;40973:744;40987:6;40984:1;40981:13;40973:744;;;41058:5;41052:4;41048:16;41043:3;41036:29;41094:6;41088:13;41124:4;41160:2;41154:9;41148:4;41141:23;41211:2;41207;41203:11;41197:18;41228:49;41273:2;41267:4;41263:13;41249:12;41228:49;:::i;:::-;-1:-1:-1;41300:4:144;41345:11;;;41339:18;41324:13;;;41317:41;41381:4;41426:11;;;41420:18;41405:13;;;41398:41;41462:4;41507:11;;;41501:18;41539:13;;;41532:25;;;41578:59;41623:13;;;41501:18;41578:59;:::i;:::-;41695:12;;;;41570:67;-1:-1:-1;;;41660:15:144;;;;41009:1;41002:9;40973:744;;;-1:-1:-1;41733:4:144;;40597:1146;-1:-1:-1;;;;;;;40597:1146:144:o;41748:2953::-;42219:6;42208:9;42201:25;42274:42;42266:6;42262:55;42257:2;42246:9;42242:18;42235:83;42354:3;42349:2;42338:9;42334:18;42327:31;42182:4;42377:3;42415:6;42409:13;42459:3;42453;42442:9;42438:19;42431:32;42472:59;42527:2;42516:9;42512:18;42497:12;42491:19;12084:42;12073:54;12061:67;;12007:127;42472:59;42586:2;42572:12;42568:21;42562:28;42609:6;42624:54;42674:2;42663:9;42659:18;42643:14;12084:42;12073:54;12061:67;;12007:127;42624:54;42733:2;42719:12;42715:21;42709:28;42687:50;;42774:2;42768:3;42757:9;42753:19;42746:31;;42800:74;42869:3;42858:9;42854:19;42838:14;42800:74;:::i;:::-;42786:88;;42929:4;42915:12;42911:23;42905:30;43000:66;42988:9;42980:6;42976:22;42972:95;42966:3;42955:9;42951:19;42944:124;43091:69;43153:6;43137:14;43091:69;:::i;:::-;43077:83;;;43215:4;43201:12;43197:23;43191:30;43230:62;43287:3;43276:9;43272:19;43256:14;43230:62;:::i;:::-;;43353:3;43339:12;43335:22;43329:29;43323:3;43312:9;43308:19;43301:58;43420:4;43406:12;43402:23;43396:30;43390:3;43379:9;43375:19;43368:59;43488:4;43474:12;43470:23;43464:30;43458:3;43447:9;43443:19;43436:59;43514:6;43581:2;43567:12;43563:21;43557:28;43551:3;43540:9;43536:19;43529:57;43605:6;43672:2;43658:12;43654:21;43648:28;43642:3;43631:9;43627:19;43620:57;43738:2;43724:12;43720:21;43714:28;43708:3;43697:9;43693:19;43686:57;43792:2;43784:6;43780:15;43774:22;43752:44;;43805:56;43855:4;43844:9;43840:20;43824:14;40112:32;40101:44;40089:57;;40035:117;43805:56;43910:2;43898:15;;43892:22;40112:32;40101:44;43973:4;43958:20;;40089:57;44028:4;44016:17;;44010:24;44159:22;;;-1:-1:-1;44155:31:144;;;44135:18;;;44128:59;44010:24;;-1:-1:-1;;;44210:41:144;44163:6;44010:24;44210:41;:::i;:::-;44196:55;;44300:4;44292:6;44288:17;44282:24;44260:46;;44370:2;44358:9;44350:6;44346:22;44342:31;44337:2;44326:9;44322:18;44315:59;;;44394:41;44428:6;44412:14;44394:41;:::i;:::-;44383:52;;;;44482:9;44477:3;44473:19;44466:4;44455:9;44451:20;44444:49;44516:41;44553:3;44545:6;44516:41;:::i;:::-;44502:55;;44607:9;44599:6;44595:22;44588:4;44577:9;44573:20;44566:52;44635:60;44688:6;44680;44635:60;:::i;:::-;44627:68;41748:2953;-1:-1:-1;;;;;;;;41748:2953:144:o",
    "linkReferences": {},
    "immutableReferences": {
      "4175": [
        {
          "start": 10309,
          "length": 32
        }
      ],
      "4177": [
        {
          "start": 10349,
          "length": 32
        }
      ],
      "4179": [
        {
          "start": 10271,
          "length": 32
        }
      ],
      "4181": [
        {
          "start": 2101,
          "length": 32
        },
        {
          "start": 10824,
          "length": 32
        }
      ],
      "4183": [
        {
          "start": 2234,
          "length": 32
        },
        {
          "start": 10541,
          "length": 32
        }
      ],
      "4185": [
        {
          "start": 2407,
          "length": 32
        },
        {
          "start": 10972,
          "length": 32
        }
      ],
      "4187": [
        {
          "start": 10225,
          "length": 32
        }
      ],
      "4189": [
        {
          "start": 10433,
          "length": 32
        }
      ],
      "4192": [
        {
          "start": 3617,
          "length": 32
        },
        {
          "start": 16210,
          "length": 32
        }
      ],
      "4194": [
        {
          "start": 16276,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "cancel((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256)[])": "fd9f1e10",
    "fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)": "e7acab24",
    "fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)": "87201b41",
    "fulfillAvailableOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,uint256)": "ed98a574",
    "fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))": "fb0f3ee1",
    "fulfillOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes),bytes32)": "b3a34c4c",
    "getCounter(address)": "f07ec373",
    "getOrderHash((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))": "79df72bd",
    "getOrderStatus(bytes32)": "46423aa7",
    "incrementCounter()": "5b34b966",
    "information()": "f47b7740",
    "matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[])": "55944a42",
    "matchOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])": "a8174404",
    "name()": "06fdde03",
    "validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])": "88147732"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadFraction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadReturnValueFromERC20OnTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"BadSignatureV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConsiderationCriteriaResolverOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"considerationIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfallAmount\",\"type\":\"uint256\"}],\"name\":\"ConsiderationNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CriteriaNotEnabledForItem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"identifiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InexactFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientEtherSupplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid1155BatchTransferEncoding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBasicOrderParameterEncoding\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"InvalidCallToConduit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCanceller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"InvalidConduit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC721TransferAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFulfillmentComponentData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNativeOfferItem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidRestrictedOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedFulfillmentOfferAndConsiderationComponents\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"MissingFulfillmentComponentOnAggregation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingItemAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingOriginalConsiderationItems\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NoContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReentrantCalls\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSpecifiedOrdersAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferAndConsiderationRequiredOnFulfillment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferCriteriaResolverOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderAlreadyFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderCriteriaResolverOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderIsCancelled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderPartiallyFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialFillsNotEnabledForOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferGenericFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnresolvedConsiderationCriteria\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnresolvedOfferCriteria\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnusedItemParameters\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SpentItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ReceivedItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"}],\"name\":\"OrderFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"}],\"name\":\"OrderValidated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderComponents[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint120\",\"name\":\"numerator\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"denominator\",\"type\":\"uint120\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AdvancedOrder\",\"name\":\"advancedOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CriteriaResolver[]\",\"name\":\"criteriaResolvers\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"fulfillerConduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"fulfillAdvancedOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint120\",\"name\":\"numerator\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"denominator\",\"type\":\"uint120\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AdvancedOrder[]\",\"name\":\"advancedOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CriteriaResolver[]\",\"name\":\"criteriaResolvers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[][]\",\"name\":\"offerFulfillments\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[][]\",\"name\":\"considerationFulfillments\",\"type\":\"tuple[][]\"},{\"internalType\":\"bytes32\",\"name\":\"fulfillerConduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumFulfilled\",\"type\":\"uint256\"}],\"name\":\"fulfillAvailableAdvancedOrders\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"availableOrders\",\"type\":\"bool[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[][]\",\"name\":\"offerFulfillments\",\"type\":\"tuple[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[][]\",\"name\":\"considerationFulfillments\",\"type\":\"tuple[][]\"},{\"internalType\":\"bytes32\",\"name\":\"fulfillerConduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maximumFulfilled\",\"type\":\"uint256\"}],\"name\":\"fulfillAvailableOrders\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"availableOrders\",\"type\":\"bool[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"considerationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"considerationIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"considerationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BasicOrderType\",\"name\":\"basicOrderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offererConduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fulfillerConduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalAdditionalRecipients\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct AdditionalRecipient[]\",\"name\":\"additionalRecipients\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct BasicOrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"name\":\"fulfillBasicOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"fulfillerConduitKey\",\"type\":\"bytes32\"}],\"name\":\"fulfillOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"}],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderComponents\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"getOrderStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalFilled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newCounter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"information\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"uint120\",\"name\":\"numerator\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"denominator\",\"type\":\"uint120\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct AdvancedOrder[]\",\"name\":\"advancedOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CriteriaResolver[]\",\"name\":\"criteriaResolvers\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"offerComponents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"considerationComponents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Fulfillment[]\",\"name\":\"fulfillments\",\"type\":\"tuple[]\"}],\"name\":\"matchAdvancedOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"offerComponents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct FulfillmentComponent[]\",\"name\":\"considerationComponents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Fulfillment[]\",\"name\":\"fulfillments\",\"type\":\"tuple[]\"}],\"name\":\"matchOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReceivedItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"internalType\":\"struct Execution[]\",\"name\":\"executions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validated\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0age\",\"custom:coauthor\":\"d1ll0ntransmissions11\",\"custom:version\":\"1.1\",\"errors\":{\"BadContractSignature()\":[{\"details\":\"Revert with an error when an EIP-1271 call to an account fails.\"}],\"BadFraction()\":[{\"details\":\"Revert with an error when supplying a fraction with a value of zero      for the numerator or denominator, or one where the numerator exceeds      the denominator.\"}],\"BadReturnValueFromERC20OnTransfer(address,address,address,uint256)\":[{\"details\":\"Revert with an error when an ERC20 token transfer returns a falsey      value.\",\"params\":{\"amount\":\"The amount for the attempted ERC20 transfer.\",\"from\":\"The source of the attempted ERC20 transfer.\",\"to\":\"The recipient of the attempted ERC20 transfer.\",\"token\":\"The token for which the ERC20 transfer was attempted.\"}}],\"BadSignatureV(uint8)\":[{\"details\":\"Revert with an error when a signature that does not contain a v      value of 27 or 28 has been supplied.\",\"params\":{\"v\":\"The invalid v value.\"}}],\"ConsiderationCriteriaResolverOutOfRange()\":[{\"details\":\"Revert with an error when providing a criteria resolver that refers      to an order with a consideration item that has not been supplied.\"}],\"ConsiderationNotMet(uint256,uint256,uint256)\":[{\"details\":\"Revert with an error if a consideration amount has not been fully      zeroed out after applying all fulfillments.\",\"params\":{\"considerationIndex\":\"The index of the consideration item on the                           order.\",\"orderIndex\":\"The index of the order with the consideration                           item with a shortfall.\",\"shortfallAmount\":\"The unfulfilled consideration amount.\"}}],\"CriteriaNotEnabledForItem()\":[{\"details\":\"Revert with an error when providing a criteria resolver that refers      to an order with an item that does not expect a criteria to be      resolved.\"}],\"ERC1155BatchTransferGenericFailure(address,address,address,uint256[],uint256[])\":[{\"details\":\"Revert with an error when a batch ERC1155 token transfer reverts.\",\"params\":{\"amounts\":\"The amounts for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifiers\":\"The identifiers for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"EtherTransferGenericFailure(address,uint256)\":[{\"details\":\"Revert with an error when an ether transfer reverts.\"}],\"InexactFraction()\":[{\"details\":\"Revert with an error when attempting to apply a fraction as part of      a partial fill that does not divide the target amount cleanly.\"}],\"InsufficientEtherSupplied()\":[{\"details\":\"Revert with an error when insufficient ether is supplied as part of      msg.value when fulfilling orders.\"}],\"Invalid1155BatchTransferEncoding()\":[{\"details\":\"Revert with an error when attempting to execute an 1155 batch      transfer using calldata not produced by default ABI encoding or with      different lengths for ids and amounts arrays.\"}],\"InvalidBasicOrderParameterEncoding()\":[{\"details\":\"Revert with an error when attempting to fill a basic order using      calldata not produced by default ABI encoding.\"}],\"InvalidCallToConduit(address)\":[{\"details\":\"Revert with an error when a call to a conduit fails with revert data      that is too expensive to return.\"}],\"InvalidCanceller()\":[{\"details\":\"Revert with an error when attempting to cancel an order as a caller      other than the indicated offerer or zone.\"}],\"InvalidConduit(bytes32,address)\":[{\"details\":\"Revert with an error when attempting to fill an order referencing an      invalid conduit (i.e. one that has not been deployed).\"}],\"InvalidERC721TransferAmount()\":[{\"details\":\"Revert with an error when an ERC721 transfer with amount other than      one is attempted.\"}],\"InvalidFulfillmentComponentData()\":[{\"details\":\"Revert with an error when an order or item index are out of range      or a fulfillment component does not match the type, token,      identifier, or conduit preference of the initial consideration item.\"}],\"InvalidMsgValue(uint256)\":[{\"details\":\"Revert with an error when a caller attempts to supply callvalue to a      non-payable basic order route or does not supply any callvalue to a      payable basic order route.\"}],\"InvalidNativeOfferItem()\":[{\"details\":\"Revert with an error when attempting to fulfill an order with an      offer for ETH outside of matching orders.\"}],\"InvalidProof()\":[{\"details\":\"Revert with an error when providing a criteria resolver that      contains an invalid proof with respect to the given item and      chosen identifier.\"}],\"InvalidRestrictedOrder(bytes32)\":[{\"details\":\"Revert with an error when attempting to fill an order that specifies      a restricted submitter as its order type when not submitted by      either the offerer or the order's zone or approved as valid by the      zone in question via a staticcall to `isValidOrder`.\",\"params\":{\"orderHash\":\"The order hash for the invalid restricted order.\"}}],\"InvalidSignature()\":[{\"details\":\"Revert with an error when a signer cannot be recovered from the      supplied signature.\"}],\"InvalidSigner()\":[{\"details\":\"Revert with an error when the signer recovered by the supplied      signature does not match the offerer or an allowed EIP-1271 signer      as specified by the offerer in the event they are a contract.\"}],\"InvalidTime()\":[{\"details\":\"Revert with an error when attempting to fill an order outside the      specified start time and end time.\"}],\"MismatchedFulfillmentOfferAndConsiderationComponents()\":[{\"details\":\"Revert with an error when the initial offer item named by a      fulfillment component does not match the type, token, identifier,      or conduit preference of the initial consideration item.\"}],\"MissingFulfillmentComponentOnAggregation(uint8)\":[{\"details\":\"Revert with an error when a fulfillment is provided that does not      declare at least one component as part of a call to fulfill      available orders.\"}],\"MissingItemAmount()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has an amount of zero.\"}],\"MissingOriginalConsiderationItems()\":[{\"details\":\"Revert with an error when an order is supplied for fulfillment with      a consideration array that is shorter than the original array.\"}],\"NoContract(address)\":[{\"details\":\"Revert with an error when an account being called as an assumed      contract does not have code and returns no data.\",\"params\":{\"account\":\"The account that should contain code.\"}}],\"NoReentrantCalls()\":[{\"details\":\"Revert with an error when a caller attempts to reenter a protected      function.\"}],\"NoSpecifiedOrdersAvailable()\":[{\"details\":\"Revert with an error when attempting to fulfill any number of      available orders when none are fulfillable.\"}],\"OfferAndConsiderationRequiredOnFulfillment()\":[{\"details\":\"Revert with an error when a fulfillment is provided that does not      declare at least one offer component and at least one consideration      component.\"}],\"OfferCriteriaResolverOutOfRange()\":[{\"details\":\"Revert with an error when providing a criteria resolver that refers      to an order with an offer item that has not been supplied.\"}],\"OrderAlreadyFilled(bytes32)\":[{\"details\":\"Revert with an error when attempting to fill an order that has      already been fully filled.\",\"params\":{\"orderHash\":\"The order hash on which a fill was attempted.\"}}],\"OrderCriteriaResolverOutOfRange()\":[{\"details\":\"Revert with an error when providing a criteria resolver that refers      to an order that has not been supplied.\"}],\"OrderIsCancelled(bytes32)\":[{\"details\":\"Revert with an error when attempting to fill an order that has been      cancelled.\",\"params\":{\"orderHash\":\"The hash of the cancelled order.\"}}],\"OrderPartiallyFilled(bytes32)\":[{\"details\":\"Revert with an error when attempting to fill a basic order that has      been partially filled.\",\"params\":{\"orderHash\":\"The hash of the partially used order.\"}}],\"PartialFillsNotEnabledForOrder()\":[{\"details\":\"Revert with an error when a partial fill is attempted on an order      that does not specify partial fill support in its order type.\"}],\"TokenTransferGenericFailure(address,address,address,uint256,uint256)\":[{\"details\":\"Revert with an error when an ERC20, ERC721, or ERC1155 token      transfer reverts.\",\"params\":{\"amount\":\"The amount for the attempted transfer.\",\"from\":\"The source of the attempted transfer.\",\"identifier\":\"The identifier for the attempted transfer.\",\"to\":\"The recipient of the attempted transfer.\",\"token\":\"The token for which the transfer was attempted.\"}}],\"UnresolvedConsiderationCriteria()\":[{\"details\":\"Revert with an error if a consideration item still has unresolved      criteria after applying all criteria resolvers.\"}],\"UnresolvedOfferCriteria()\":[{\"details\":\"Revert with an error if an offer item still has unresolved criteria      after applying all criteria resolvers.\"}],\"UnusedItemParameters()\":[{\"details\":\"Revert with an error when attempting to fulfill an order where an      item has unused parameters. This includes both the token and the      identifier parameters for native transfers as well as the identifier      parameter for ERC20 transfers. Note that the conduit does not      perform this check, leaving it up to the calling channel to enforce      when desired.\"}]},\"kind\":\"dev\",\"methods\":{\"cancel((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256)[])\":{\"params\":{\"orders\":\"The orders to cancel.\"},\"returns\":{\"cancelled\":\"A boolean indicating whether the supplied orders have                   been successfully cancelled.\"}},\"constructor\":{\"params\":{\"conduitController\":\"A contract that deploys conduits, or proxies                          that may optionally be used to transfer approved                          ERC20/721/1155 tokens.\"}},\"fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)\":{\"params\":{\"advancedOrder\":\"The order to fulfill along with the fraction                            of the order to attempt to fill. Note that                            both the offerer and the fulfiller must first                            approve this contract (or their conduit if                            indicated by the order) to transfer any                            relevant tokens on their behalf and that                            contracts must implement `onERC1155Received`                            to receive ERC1155 tokens as consideration.                            Also note that all offer and consideration                            components must have no remainder after                            multiplication of the respective amount with                            the supplied fraction for the partial fill to                            be considered valid.\",\"criteriaResolvers\":\"An array where each element contains a                            reference to a specific offer or                            consideration, a token identifier, and a proof                            that the supplied token identifier is                            contained in the merkle root held by the item                            in question's criteria element. Note that an                            empty criteria indicates that any                            (transferable) token identifier on the token                            in question is valid and that no associated                            proof needs to be supplied.\",\"fulfillerConduitKey\":\"A bytes32 value indicating what conduit, if                            any, to source the fulfiller's token approvals                            from. The zero hash signifies that no conduit                            should be used (and direct approvals set on                            Consideration).\",\"recipient\":\"The intended recipient for all received items,                            with `address(0)` indicating that the caller                            should receive the items.\"},\"returns\":{\"fulfilled\":\"A boolean indicating whether the order has been                   successfully fulfilled.\"}},\"fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)\":{\"params\":{\"advancedOrders\":\"The orders to fulfill along with the                                  fraction of those orders to attempt to                                  fill. Note that both the offerer and the                                  fulfiller must first approve this                                  contract (or their conduit if indicated                                  by the order) to transfer any relevant                                  tokens on their behalf and that                                  contracts must implement                                  `onERC1155Received` in order to receive                                  ERC1155 tokens as consideration. Also                                  note that all offer and consideration                                  components must have no remainder after                                  multiplication of the respective amount                                  with the supplied fraction for an                                  order's partial fill amount to be                                  considered valid.\",\"considerationFulfillments\":\"An array of FulfillmentComponent arrays                                  indicating which consideration items to                                  attempt to aggregate when preparing                                  executions.\",\"criteriaResolvers\":\"An array where each element contains a                                  reference to a specific offer or                                  consideration, a token identifier, and a                                  proof that the supplied token identifier                                  is contained in the merkle root held by                                  the item in question's criteria element.                                  Note that an empty criteria indicates                                  that any (transferable) token                                  identifier on the token in question is                                  valid and that no associated proof needs                                  to be supplied.\",\"fulfillerConduitKey\":\"A bytes32 value indicating what conduit,                                  if any, to source the fulfiller's token                                  approvals from. The zero hash signifies                                  that no conduit should be used (and                                  direct approvals set on Consideration).\",\"maximumFulfilled\":\"The maximum number of orders to fulfill.\",\"offerFulfillments\":\"An array of FulfillmentComponent arrays                                  indicating which offer items to attempt                                  to aggregate when preparing executions.\",\"recipient\":\"The intended recipient for all received                                  items, with `address(0)` indicating that                                  the caller should receive the items.\"},\"returns\":{\"availableOrders\":\"An array of booleans indicating if each order                         with an index corresponding to the index of the                         returned boolean was fulfillable or not.\",\"executions\":\"     An array of elements indicating the sequence of                         transfers performed as part of matching the given                         orders.\"}},\"fulfillAvailableOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,uint256)\":{\"params\":{\"considerationFulfillments\":\"An array of FulfillmentComponent arrays                                  indicating which consideration items to                                  attempt to aggregate when preparing                                  executions.\",\"fulfillerConduitKey\":\"A bytes32 value indicating what conduit,                                  if any, to source the fulfiller's token                                  approvals from. The zero hash signifies                                  that no conduit should be used (and                                  direct approvals set on Consideration).\",\"maximumFulfilled\":\"The maximum number of orders to fulfill.\",\"offerFulfillments\":\"An array of FulfillmentComponent arrays                                  indicating which offer items to attempt                                  to aggregate when preparing executions.\",\"orders\":\"The orders to fulfill. Note that both                                  the offerer and the fulfiller must first                                  approve this contract (or the                                  corresponding conduit if indicated) to                                  transfer any relevant tokens on their                                  behalf and that contracts must implement                                  `onERC1155Received` to receive ERC1155                                  tokens as consideration.\"},\"returns\":{\"availableOrders\":\"An array of booleans indicating if each order                         with an index corresponding to the index of the                         returned boolean was fulfillable or not.\",\"executions\":\"     An array of elements indicating the sequence of                         transfers performed as part of matching the given                         orders.\"}},\"fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))\":{\"params\":{\"parameters\":\"Additional information on the fulfilled order. Note                   that the offerer and the fulfiller must first approve                   this contract (or their chosen conduit if indicated)                   before any tokens can be transferred. Also note that                   contract recipients of ERC1155 consideration items must                   implement `onERC1155Received` in order to receive those                   items.\"},\"returns\":{\"fulfilled\":\"A boolean indicating whether the order has been                   successfully fulfilled.\"}},\"fulfillOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes),bytes32)\":{\"params\":{\"fulfillerConduitKey\":\"A bytes32 value indicating what conduit, if                            any, to source the fulfiller's token approvals                            from. The zero hash signifies that no conduit                            should be used (and direct approvals set on                            Consideration).\",\"order\":\"The order to fulfill. Note that both the                            offerer and the fulfiller must first approve                            this contract (or the corresponding conduit if                            indicated) to transfer any relevant tokens on                            their behalf and that contracts must implement                            `onERC1155Received` to receive ERC1155 tokens                            as consideration.\"},\"returns\":{\"fulfilled\":\"A boolean indicating whether the order has been                   successfully fulfilled.\"}},\"getCounter(address)\":{\"params\":{\"offerer\":\"The offerer in question.\"},\"returns\":{\"counter\":\"The current counter.\"}},\"getOrderHash((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))\":{\"params\":{\"order\":\"The components of the order.\"},\"returns\":{\"orderHash\":\"The order hash.\"}},\"getOrderStatus(bytes32)\":{\"params\":{\"orderHash\":\"The order hash in question.\"},\"returns\":{\"isCancelled\":\"A boolean indicating whether the order in question                     has been cancelled.\",\"isValidated\":\"A boolean indicating whether the order in question                     has been validated (i.e. previously approved or                     partially filled).\",\"totalFilled\":\"The total portion of the order that has been filled                     (i.e. the \\\"numerator\\\").\",\"totalSize\":\"  The total size of the order that is either filled or                     unfilled (i.e. the \\\"denominator\\\").\"}},\"incrementCounter()\":{\"returns\":{\"newCounter\":\"The new counter.\"}},\"information()\":{\"returns\":{\"conduitController\":\"The conduit Controller set for this contract.\",\"domainSeparator\":\"  The domain separator for this contract.\",\"version\":\"          The contract version.\"}},\"matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[])\":{\"params\":{\"advancedOrders\":\"The advanced orders to match. Note that both the                          offerer and fulfiller on each order must first                          approve this contract (or their conduit if                          indicated by the order) to transfer any relevant                          tokens on their behalf and each consideration                          recipient must implement `onERC1155Received` in                          order to receive ERC1155 tokens. Also note that                          the offer and consideration components for each                          order must have no remainder after multiplying                          the respective amount with the supplied fraction                          in order for the group of partial fills to be                          considered valid.\",\"criteriaResolvers\":\"An array where each element contains a reference                          to a specific order as well as that order's                          offer or consideration, a token identifier, and                          a proof that the supplied token identifier is                          contained in the order's merkle root. Note that                          an empty root indicates that any (transferable)                          token identifier is valid and that no associated                          proof needs to be supplied.\",\"fulfillments\":\"An array of elements allocating offer components                          to consideration components. Note that each                          consideration component must be fully met in                          order for the match operation to be valid.\"},\"returns\":{\"executions\":\"An array of elements indicating the sequence of                    transfers performed as part of matching the given                    orders.\"}},\"matchOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])\":{\"params\":{\"fulfillments\":\"An array of elements allocating offer components                          to consideration components. Note that each                          consideration component must be fully met in                          order for the match operation to be valid.\",\"orders\":\"The orders to match. Note that both the offerer                          and fulfiller on each order must first approve                          this contract (or their conduit if indicated by                          the order) to transfer any relevant tokens on                          their behalf and each consideration recipient                          must implement `onERC1155Received` in order to                          receive ERC1155 tokens.\"},\"returns\":{\"executions\":\"An array of elements indicating the sequence of                    transfers performed as part of matching the given                    orders.\"}},\"name()\":{\"returns\":{\"contractName\":\"The name of this contract.\"}},\"validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])\":{\"params\":{\"orders\":\"The orders to validate.\"},\"returns\":{\"validated\":\"A boolean indicating whether the supplied orders have                   been successfully validated.\"}}},\"title\":\"Consideration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancel((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256)[])\":{\"notice\":\"Cancel an arbitrary number of orders. Note that only the offerer         or the zone of a given order may cancel it. Callers should ensure         that the intended order was cancelled by calling `getOrderStatus`         and confirming that `isCancelled` returns `true`.\"},\"constructor\":{\"notice\":\"Derive and set hashes, reference chainId, and associated domain         separator during deployment.\"},\"fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)\":{\"notice\":\"Fill an order, fully or partially, with an arbitrary number of         items for offer and consideration alongside criteria resolvers         containing specific token identifiers and associated proofs.\"},\"fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)\":{\"notice\":\"Attempt to fill a group of orders, fully or partially, with an         arbitrary number of items for offer and consideration per order         alongside criteria resolvers containing specific token         identifiers and associated proofs. Any order that is not         currently active, has already been fully filled, or has been         cancelled will be omitted. Remaining offer and consideration         items will then be aggregated where possible as indicated by the         supplied offer and consideration component arrays and aggregated         items will be transferred to the fulfiller or to each intended         recipient, respectively. Note that a failing item transfer or an         issue with order formatting will cause the entire batch to fail.\"},\"fulfillAvailableOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,uint256)\":{\"notice\":\"Attempt to fill a group of orders, each with an arbitrary number         of items for offer and consideration. Any order that is not         currently active, has already been fully filled, or has been         cancelled will be omitted. Remaining offer and consideration         items will then be aggregated where possible as indicated by the         supplied offer and consideration component arrays and aggregated         items will be transferred to the fulfiller or to each intended         recipient, respectively. Note that a failing item transfer or an         issue with order formatting will cause the entire batch to fail.         Note that this function does not support criteria-based orders or         partial filling of orders (though filling the remainder of a         partially-filled order is supported).\"},\"fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))\":{\"notice\":\"Fulfill an order offering an ERC20, ERC721, or ERC1155 item by         supplying Ether (or other native tokens), ERC20 tokens, an ERC721         item, or an ERC1155 item as consideration. Six permutations are         supported: Native token to ERC721, Native token to ERC1155, ERC20         to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and ERC1155 to         ERC20 (with native tokens supplied as msg.value). For an order to         be eligible for fulfillment via this method, it must contain a         single offer item (though that item may have a greater amount if         the item is not an ERC721). An arbitrary number of \\\"additional         recipients\\\" may also be supplied which will each receive native         tokens or ERC20 items from the fulfiller as consideration. Refer         to the documentation for a more comprehensive summary of how to         utilize this method and what orders are compatible with it.\"},\"fulfillOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes),bytes32)\":{\"notice\":\"Fulfill an order with an arbitrary number of items for offer and         consideration. Note that this function does not support         criteria-based orders or partial filling of orders (though         filling the remainder of a partially-filled order is supported).\"},\"getCounter(address)\":{\"notice\":\"Retrieve the current counter for a given offerer.\"},\"getOrderHash((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))\":{\"notice\":\"Retrieve the order hash for a given order.\"},\"getOrderStatus(bytes32)\":{\"notice\":\"Retrieve the status of a given order by hash, including whether         the order has been cancelled or validated and the fraction of the         order that has been filled.\"},\"incrementCounter()\":{\"notice\":\"Cancel all orders from a given offerer with a given zone in bulk         by incrementing a counter. Note that only the offerer may         increment the counter.\"},\"information()\":{\"notice\":\"Retrieve configuration information for this contract.\"},\"matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[])\":{\"notice\":\"Match an arbitrary number of full or partial orders, each with an         arbitrary number of items for offer and consideration, supplying         criteria resolvers containing specific token identifiers and         associated proofs as well as fulfillments allocating offer         components to consideration components.\"},\"matchOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])\":{\"notice\":\"Match an arbitrary number of orders, each with an arbitrary         number of items for offer and consideration along with a set of         fulfillments allocating offer components to consideration         components. Note that this function does not support         criteria-based or partial filling of orders (though filling the         remainder of a partially-filled order is supported).\"},\"name()\":{\"notice\":\"Retrieve the name of this contract.\"},\"validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])\":{\"notice\":\"Validate an arbitrary number of orders, thereby registering their         signatures as valid and allowing the fulfiller to skip signature         verification on fulfillment. Note that validated orders may still         be unfulfillable due to invalid item amounts or other factors;         callers should determine whether validated orders are fulfillable         by simulating the fulfillment call prior to execution. Also note         that anyone can validate a signed order, but only the offerer can         validate an order without supplying a signature.\"}},\"notice\":\"Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.         It minimizes external calls to the greatest extent possible and         provides lightweight methods for common routes as well as more         flexible methods for composing advanced orders or groups of orders.         Each order contains an arbitrary number of items that may be spent         (the \\\"offer\\\") along with an arbitrary number of items that must be         received back by the indicated recipients (the \\\"consideration\\\").\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Consideration.sol\":\"Consideration\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":19066},\"remappings\":[\":@rari-capital/solmate/=lib/solmate/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/conduit/lib/ConduitEnums.sol\":{\"keccak256\":\"0x1a84850bbff4b820573334c70ee0797462f20fd8c9b86fdebeacc85ecb1963a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://322f8198eefa578cbb9e3a116d484903d1dc38ddcdc6cce66ae386739a4bbb3e\",\"dweb:/ipfs/QmRrCMFNSuzUHtEE4tuJWwXrT1UpLTpkauuQ7CTZ7zA8RH\"]},\"contracts/conduit/lib/ConduitStructs.sol\":{\"keccak256\":\"0xe3e87c74dd79c59293e49b7236cc7befdc19886bb79af5fe53208b1772fd24f9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b4721002090245fcf5066229a1af02797405e31f05c7174340e06b50474c076\",\"dweb:/ipfs/QmT8XtMhRfvFNsDeEmoqrwGkCYbuxp4wHk3VhiVkuFUJnD\"]},\"contracts/interfaces/AmountDerivationErrors.sol\":{\"keccak256\":\"0xd7296f4958294009bd696a8034ed5b1c6562f753f3767869e83c20a9203e21e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b34adcf58fdcd88234ab19f671b34007cc8badac09e08d20874bfa9a0cf2334c\",\"dweb:/ipfs/QmZDkz5Enfzxr8oM31wYWYRaYtfJXRhCjMT6AHqfoyAz8C\"]},\"contracts/interfaces/ConduitControllerInterface.sol\":{\"keccak256\":\"0xb124e40645efdf5d92b48fd54eaeb0ba1d05fde62bf51e7684c1bc3bf5343388\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://757b4b1edb39b78b94debeb877e68036c1181a5d20d0f299c497cecc903f147d\",\"dweb:/ipfs/QmeXsKmxsMXCxGTtcRAnyuRhtkQF4V4cfXukRYSpFwFoaF\"]},\"contracts/interfaces/ConduitInterface.sol\":{\"keccak256\":\"0x628e23ec7e820e8ac59c0999211bb022bb5c5581a5bc6bd39465d6419d7d85b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b5ebbf33264fb98536f50b5fae8e0bf31d19759939c823c7626bf9d693200d0b\",\"dweb:/ipfs/QmdBV7voV8WBcjsuJZAStW4UEAAhPPLv8C3S77BiVpucDa\"]},\"contracts/interfaces/ConsiderationEventsAndErrors.sol\":{\"keccak256\":\"0xe31a7bc05a79d64fbbe1a02af1c71d44e95fcdd92b6240d3636622e681b6982b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d297eb426422b314a2db487ddd8a953f88682ec56543509b054c57cf1e1f7310\",\"dweb:/ipfs/QmaRPxBA9pZjQhDjVmcAk1xxPUA5cKbF1EHNYVZTD2w6Pz\"]},\"contracts/interfaces/ConsiderationInterface.sol\":{\"keccak256\":\"0x1c535d369a2eb5eb3a62783c770870274a07fbdc7c20d6f7dc75decc75930688\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b85c960a378c3f425a1653dd8d978f2915203dfd16ec9932e4dd7b4963c17240\",\"dweb:/ipfs/QmYADawT4zzRFkkEteLTHpXdp9nrVW7ag7CvKmvQS5kYHB\"]},\"contracts/interfaces/CriteriaResolutionErrors.sol\":{\"keccak256\":\"0x7f94afdbf5a346aee951f7c2b93baa67a5e01980d496604bce70994bee727b13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffbb4b927c4943b1fbf74cfb1eb6cedb6e48f800c93a0fe9f70718df2da1dcc5\",\"dweb:/ipfs/Qmcnb1m9Qxa5yPJThdSSjefeS2USTz7P69WaZdQNqBnXnj\"]},\"contracts/interfaces/EIP1271Interface.sol\":{\"keccak256\":\"0x7b508919429572c3a59b27b8fd9d06c560ec0b7189bc22ad73f8c293d705745f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5fad9fc0e971254146df164542f3811e068ecd7c20e02894f60413a32b13a60\",\"dweb:/ipfs/QmWRCAjQkPXosDRx5Y62QKqWvnST4edZf9yZeU4GaKSgyX\"]},\"contracts/interfaces/FulfillmentApplicationErrors.sol\":{\"keccak256\":\"0xa9001846591c94e90ee09ac70f978d7e20fa794fabe83d877019736b22a00754\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ed27d3dfd1970dd65d9e0db2349c5dad7bdb4ab6ce50a4d767e5895af198a2c\",\"dweb:/ipfs/QmcssChobp4rue7SwikvXDxjikdJGqrxeC6e7NxqE9hPph\"]},\"contracts/interfaces/ReentrancyErrors.sol\":{\"keccak256\":\"0xd8825124dc105b07e1d2c857f219a30092f02f14b56905ae44e503ead6d276c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0e5dfd036484867fe6a11bfa5bd698ab2dd8e4a39cec6a39c8dc4f1260e9f7c\",\"dweb:/ipfs/Qmb1qvvBwD65eSp9dTMLvB67nYJJiRYFoqcHhCmYHo6Cz2\"]},\"contracts/interfaces/SignatureVerificationErrors.sol\":{\"keccak256\":\"0xd0f5b26469ba6cd303e5ea9b53cf6b7c25cb00918097eb59a263678b51197381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a51ca924d919f0a2eddd6e666f6bbe30f71b1bd6f6c9b0e36e67df85aebcd57\",\"dweb:/ipfs/QmTb72fphyawGeM8S6q2SjWu94wf6bFSJDN2KAj12jQr2E\"]},\"contracts/interfaces/TokenTransferrerErrors.sol\":{\"keccak256\":\"0x0a89101400c263654f920aad668249ce67eaebd1af7d5582d38456c8384fc962\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5368eff6e44d333bdd50fb135720a232975e775423f19113b1316414fb20bfa9\",\"dweb:/ipfs/QmYQsYqdfX5JXqRkF5RdiSDJErwyY5GZU1txRMx4taBcZE\"]},\"contracts/interfaces/ZoneInteractionErrors.sol\":{\"keccak256\":\"0x966590f8c6e0df523168b933cd73d0c063902f52a0853f4766cbcf977e3164f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59a52227d0ec78d2cccb4a2925fa18d3c51a5af22b70a360b5b92b106161b239\",\"dweb:/ipfs/QmXzB8VxHWGt49fhbqgswcQdyPB4bYJp6EcuPJPvuZFinu\"]},\"contracts/interfaces/ZoneInterface.sol\":{\"keccak256\":\"0x5ac01fb62293f1645220471e4a00888d2549d4de3c179e46c044b8dab90d3c66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://274526a97bbfff48e902207f6546021524ac6ae67869a5f1a47fe164c9131d41\",\"dweb:/ipfs/QmTHhioVQbB4EHAhyqWX9KPRV25LvARrPy731KiV9DPzsG\"]},\"contracts/lib/AmountDeriver.sol\":{\"keccak256\":\"0xb1526d34fa4f723986128c8792fe324de8c6b8024fd7deda5bcdeb6c4ccaf690\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a0b37d6bda3caa67376b8c4a24c8c6e96cb0943229c1b561a7901b5321bbeca\",\"dweb:/ipfs/QmRE2UvmiqveLqT6f3Yh7fz69321RaHKkwG75bcJCQ3pm2\"]},\"contracts/lib/Assertions.sol\":{\"keccak256\":\"0x85243336fcc963e9f89dac66e5de9bf592338b655598cf14e891cde4c36f2110\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ee4919a8d6ba0a5b3cd3b0827830cae4ad3fad9ca75f43312c81b2c124ff103\",\"dweb:/ipfs/QmPZyJ4d7QSZG9Md4Sa5mC5pVduVcf6Ri5AxSFXpDreWxz\"]},\"contracts/lib/BasicOrderFulfiller.sol\":{\"keccak256\":\"0x6e836f173b4ce80701095e8462525f1a69e545be70d11a823f140f82dfe3891c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8f5d28d7802711ac8bb68ad241a90c154e00b6d93db2435c9fad7eadceccc08\",\"dweb:/ipfs/QmWR8Yc9V2DWUfy3qEdWj3TEnT3M4Lzw9nUw6pYc5XJQYo\"]},\"contracts/lib/Consideration.sol\":{\"keccak256\":\"0x02da2c93d605b642c793308bc886dded767849e171813db2ed52bd8d28628c69\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://582a0ff1a6ec3553f90b2af53c7de9379a5ec65e6029fa232cee585a447654c1\",\"dweb:/ipfs/QmadzBjixdS1foEwoDikPu2JQdbp9GxEwjDBs2BCVygtPt\"]},\"contracts/lib/ConsiderationBase.sol\":{\"keccak256\":\"0x369dad1787bc0871bf34e602277c0d97aae4f27993742d77e8a97f3110396680\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ec661f7e084c37307cb6d2ec8fa9ad5ee62fc6c407b33a0bfbde1b38e4d9965\",\"dweb:/ipfs/QmWWdtUzarVosgfCxbWNq1kL5YGNNJwgoxtZvWqTmcC3Bj\"]},\"contracts/lib/ConsiderationConstants.sol\":{\"keccak256\":\"0xa932563f00b8cbf6e403247d8633211c581904481e67b64f085346c456ae5e80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b0921621f5e4b3ed8e99b583503678b43040499a6ce534a72a451b7b29c5bbc8\",\"dweb:/ipfs/QmeimHoxDtNCxcJUTgcVD77d9Bw3qLA2pb19vKUTHTCyUo\"]},\"contracts/lib/ConsiderationEnums.sol\":{\"keccak256\":\"0xe78faea2c9d9322ca557af34e8d576fe21dab9c995f0657d34ba6c4e94fe9c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ebef28980d88b7707013dd98658b22d4494755f59d0b93463dba1c377a62bbb\",\"dweb:/ipfs/QmRdfKbcuCYVB3rpTbS6peRY4XnhBxQRewbxpttA4Jv9ie\"]},\"contracts/lib/ConsiderationStructs.sol\":{\"keccak256\":\"0x1cf7b9e7d034197a5af36536ff8b8fea6041e8c66c1928e6d6d5e411c465b234\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://369e5901a714935a54f68c1abd1f96e901d95b51a05897cfcf2eb9e28ef57896\",\"dweb:/ipfs/QmNM5XGK419cC2xn23qgB68gbR7qqbif44QBFwKax2SBpM\"]},\"contracts/lib/CounterManager.sol\":{\"keccak256\":\"0xb2f5f4742bcd8b702483087752e2997e2399936772da7c0b4f96c9e629bbd152\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ae32dd152f438510f2ebd1760777521d848e1745738b0924596495dbc1f6a82\",\"dweb:/ipfs/QmTBwPyU5G3vwuQ51RxmyjRD8ZcprvL5FBYnTsnvnPey1X\"]},\"contracts/lib/CriteriaResolution.sol\":{\"keccak256\":\"0x14eee514b1f089959f121a9c7460bb66457502e98fb4b8f1b3503a7a39ee7cdb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://097eec641821c6232ff1ab7c2b5e0fe797d834af22c17e854b7a28a8806e5fe3\",\"dweb:/ipfs/QmQJnfzC99MtPEAkApCcLJXoTBf6upp6LznhqRqXtNyXb5\"]},\"contracts/lib/Executor.sol\":{\"keccak256\":\"0x6b248a05b34e80beb1058bef27b6928616bb0faf2e19d86fcf54540e1f3c4c85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cf97772d501fe0c434fa574e9654be61e5230e623707fb6d18b9021b4a3fd0d\",\"dweb:/ipfs/QmVdVLhgPZ3uqKgxQFnetpvka6kc8fhavVs8xaqZXjHJWL\"]},\"contracts/lib/FulfillmentApplier.sol\":{\"keccak256\":\"0xf96eec5620f0e5659a97b2006a0a333af2fc9cacd1e9da715b6cd1a6128bedd2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8effb931973f72a8a84db3483dfc2b239af952fe0f9b3dddcb067b25583d2cd\",\"dweb:/ipfs/QmfFPkgKSbPh8woKq52gwjHZw2dwnhXag2toRmLSJRKwHX\"]},\"contracts/lib/GettersAndDerivers.sol\":{\"keccak256\":\"0x0ebbfce9155cd6fd49f4a8974e8bf23d09374b50f2dbc7e28906564f7b433643\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3daecc84fb1e0d5659bce9bf406f2aa6aa5e280dc49dd1a80547328f938d2a0\",\"dweb:/ipfs/QmeooggfQRJt3HrUeUbAqX77ctuLK2Uz1w8fQqjHaxPme9\"]},\"contracts/lib/LowLevelHelpers.sol\":{\"keccak256\":\"0x57700a6f8f18d1cdfc8492724ef3b9f89aa143382f13794489df70c1f3fc027c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5e9e879ac9e9b9ae9c444a963d16fb9e8736725df9b4a750fb25ac3d6219cec9\",\"dweb:/ipfs/QmWNttmqzq9Lk3K9FvGAxmjTDJ6EGVLUMWQWfQAoACWBTY\"]},\"contracts/lib/OrderCombiner.sol\":{\"keccak256\":\"0x1e12ad53e2cf29c145e8877cf21425be48d5b7f77cb1c94494241c5d95d85b6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7aa84687f6ccd59e654f4d4dc3ec5e40e64511f2ef3b589817316c30b3db0db6\",\"dweb:/ipfs/QmTrCX7eTncGd8sVQwzT2Va3S3qBxk8xVA6jzbVsnmFBrR\"]},\"contracts/lib/OrderFulfiller.sol\":{\"keccak256\":\"0x17bd567789284f2da800ffe57157c746c7c27d08077b02f048f167b48539ca04\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79aa603c7d9dfd311285ab51f71f096675e0c85e9ae2da6eb03ba5d559d0d180\",\"dweb:/ipfs/QmcHinzjjs7LVuahexkGdKYokjy84J76BoknyE9SEVBkxJ\"]},\"contracts/lib/OrderValidator.sol\":{\"keccak256\":\"0xd971b3099997a07be677c5f17d5bb63acdf122dac5368238bb840dad79663a2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e39d85e0101780442bc03d312cd904a937bd5b71a17ac1b1f975314f19272ee\",\"dweb:/ipfs/QmfSRMYgrr26D2KYF3vJJE8r2GJCnE5AtW3YL7mLuszmHo\"]},\"contracts/lib/ReentrancyGuard.sol\":{\"keccak256\":\"0xa52711c788a24071f8a872ea5ee3030f0f8f592abf8f0d5577707e585a7628d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea73c7072734c457cd811a06e48660ed8b1206722f6a4521a4a3049a34b8940\",\"dweb:/ipfs/QmQFvXvo321QuLAzGVNSRpY9iENQAv3WbU6sPrjNSpCZiR\"]},\"contracts/lib/SignatureVerification.sol\":{\"keccak256\":\"0x9af8a720f3f6aac730d7896484f407ecea62105c1c9dc45666273d51555a0f42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfd33e4b31f0d30e9bee83aadcbf952c8eb8592991b11d187faffa7820be9b9e\",\"dweb:/ipfs/QmPhVdF7Jaqaa5tk5UA6xorGbcN8DvxC87Bh1GPvLVqfah\"]},\"contracts/lib/TokenTransferrer.sol\":{\"keccak256\":\"0x9fc47ddb3e9e741e3c34d942b3d7e5277c4c8191a38208e69e49bf18cde8ea2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2042d4a901fdffa7fd045e9125deb4f1988801a6c3e7825d38cc61d710cce682\",\"dweb:/ipfs/QmRTcJB47snGNmzY3gkS3R1onMNDggX3W9sD7qzq7MPyGw\"]},\"contracts/lib/TokenTransferrerConstants.sol\":{\"keccak256\":\"0xa27ce8b77d5386e95f9b9b4897f1585b78e016c8d1e4c6531fe3b1963cdba08a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25f15e002308f4f7b28d673d5c40c12b230039ec9c871dbc50607ce567bf7bd3\",\"dweb:/ipfs/QmPjc46Qdnw8ekiaNxZ5Q8nsecTL5pr1QF6hdBPkaUkWuq\"]},\"contracts/lib/Verifiers.sol\":{\"keccak256\":\"0x27f0a3791ded47a6b8fc15e726a0b1a0932de4ee21652bc6d220b53e38201a55\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://999c65bcf8eceb3fb170585ff19e4c3e8e4644641c0c99828776af84b6999733\",\"dweb:/ipfs/QmWNZEU85q3ExYw2VbRDdsyn9ijpotYacUAA9vDZJVw7z4\"]},\"contracts/lib/ZoneInteraction.sol\":{\"keccak256\":\"0x2a8836e99495c8f48475280e0351b305f0adfb133932918bf433ada861807f3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1803535bd4abf24c81a519d493edabecd561a204a5e36dcf2ed98545f51e819b\",\"dweb:/ipfs/QmRGWaEBa8UdQagwqgzBdN3P8JJY77oQvd7TFvDVBUgQfd\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.14+commit.80d49f37"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "conduitController",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BadContractSignature"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BadFraction"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "BadReturnValueFromERC20OnTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "BadSignatureV"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ConsiderationCriteriaResolverOutOfRange"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "orderIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "considerationIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shortfallAmount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "ConsiderationNotMet"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CriteriaNotEnabledForItem"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "identifiers",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "type": "error",
          "name": "ERC1155BatchTransferGenericFailure"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "EtherTransferGenericFailure"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InexactFraction"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InsufficientEtherSupplied"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "Invalid1155BatchTransferEncoding"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidBasicOrderParameterEncoding"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "conduit",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidCallToConduit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidCanceller"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "conduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "conduit",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidConduit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidERC721TransferAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidFulfillmentComponentData"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidMsgValue"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidNativeOfferItem"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidProof"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "InvalidRestrictedOrder"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSignature"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidSigner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidTime"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MismatchedFulfillmentOfferAndConsiderationComponents"
        },
        {
          "inputs": [
            {
              "internalType": "enum Side",
              "name": "side",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "MissingFulfillmentComponentOnAggregation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MissingItemAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MissingOriginalConsiderationItems"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "NoContract"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoReentrantCalls"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoSpecifiedOrdersAvailable"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OfferAndConsiderationRequiredOnFulfillment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OfferCriteriaResolverOutOfRange"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "OrderAlreadyFilled"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OrderCriteriaResolverOutOfRange"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "OrderIsCancelled"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "type": "error",
          "name": "OrderPartiallyFilled"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "PartialFillsNotEnabledForOrder"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "identifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "TokenTransferGenericFailure"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnresolvedConsiderationCriteria"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnresolvedOfferCriteria"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "UnusedItemParameters"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newCounter",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "CounterIncremented",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OrderCancelled",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "struct SpentItem[]",
              "name": "offer",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "struct ReceivedItem[]",
              "name": "consideration",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "enum ItemType",
                  "name": "itemType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OrderFulfilled",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "zone",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OrderValidated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct OrderComponents[]",
              "name": "orders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "counter",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancel",
          "outputs": [
            {
              "internalType": "bool",
              "name": "cancelled",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AdvancedOrder",
              "name": "advancedOrder",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint120",
                  "name": "numerator",
                  "type": "uint120"
                },
                {
                  "internalType": "uint120",
                  "name": "denominator",
                  "type": "uint120"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct CriteriaResolver[]",
              "name": "criteriaResolvers",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Side",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "criteriaProof",
                  "type": "bytes32[]"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "fulfillerConduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fulfillAdvancedOrder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AdvancedOrder[]",
              "name": "advancedOrders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint120",
                  "name": "numerator",
                  "type": "uint120"
                },
                {
                  "internalType": "uint120",
                  "name": "denominator",
                  "type": "uint120"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct CriteriaResolver[]",
              "name": "criteriaResolvers",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Side",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "criteriaProof",
                  "type": "bytes32[]"
                }
              ]
            },
            {
              "internalType": "struct FulfillmentComponent[][]",
              "name": "offerFulfillments",
              "type": "tuple[][]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "struct FulfillmentComponent[][]",
              "name": "considerationFulfillments",
              "type": "tuple[][]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "fulfillerConduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maximumFulfilled",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fulfillAvailableAdvancedOrders",
          "outputs": [
            {
              "internalType": "bool[]",
              "name": "availableOrders",
              "type": "bool[]"
            },
            {
              "internalType": "struct Execution[]",
              "name": "executions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct ReceivedItem",
                  "name": "item",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifier",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Order[]",
              "name": "orders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct FulfillmentComponent[][]",
              "name": "offerFulfillments",
              "type": "tuple[][]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "struct FulfillmentComponent[][]",
              "name": "considerationFulfillments",
              "type": "tuple[][]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIndex",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "fulfillerConduitKey",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maximumFulfilled",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fulfillAvailableOrders",
          "outputs": [
            {
              "internalType": "bool[]",
              "name": "availableOrders",
              "type": "bool[]"
            },
            {
              "internalType": "struct Execution[]",
              "name": "executions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct ReceivedItem",
                  "name": "item",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifier",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct BasicOrderParameters",
              "name": "parameters",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "considerationToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "considerationIdentifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "considerationAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address payable",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "offerToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "offerIdentifier",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "offerAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "enum BasicOrderType",
                  "name": "basicOrderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "offererConduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "fulfillerConduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOriginalAdditionalRecipients",
                  "type": "uint256"
                },
                {
                  "internalType": "struct AdditionalRecipient[]",
                  "name": "additionalRecipients",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fulfillBasicOrder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "fulfillerConduitKey",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fulfillOrder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "offerer",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct OrderComponents",
              "name": "order",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "zone",
                  "type": "address"
                },
                {
                  "internalType": "struct OfferItem[]",
                  "name": "offer",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct ConsiderationItem[]",
                  "name": "consideration",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifierOrCriteria",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "enum OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "startTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTime",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "zoneHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "counter",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOrderHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "orderHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOrderStatus",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isValidated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "totalFilled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSize",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "incrementCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "newCounter",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "information",
          "outputs": [
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "conduitController",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct AdvancedOrder[]",
              "name": "advancedOrders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "uint120",
                  "name": "numerator",
                  "type": "uint120"
                },
                {
                  "internalType": "uint120",
                  "name": "denominator",
                  "type": "uint120"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct CriteriaResolver[]",
              "name": "criteriaResolvers",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "orderIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Side",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "identifier",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "criteriaProof",
                  "type": "bytes32[]"
                }
              ]
            },
            {
              "internalType": "struct Fulfillment[]",
              "name": "fulfillments",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct FulfillmentComponent[]",
                  "name": "offerComponents",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "orderIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "itemIndex",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct FulfillmentComponent[]",
                  "name": "considerationComponents",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "orderIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "itemIndex",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "matchAdvancedOrders",
          "outputs": [
            {
              "internalType": "struct Execution[]",
              "name": "executions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct ReceivedItem",
                  "name": "item",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifier",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Order[]",
              "name": "orders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "struct Fulfillment[]",
              "name": "fulfillments",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct FulfillmentComponent[]",
                  "name": "offerComponents",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "orderIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "itemIndex",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "struct FulfillmentComponent[]",
                  "name": "considerationComponents",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "orderIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "itemIndex",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "matchOrders",
          "outputs": [
            {
              "internalType": "struct Execution[]",
              "name": "executions",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct ReceivedItem",
                  "name": "item",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "enum ItemType",
                      "name": "itemType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "identifier",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address payable",
                      "name": "recipient",
                      "type": "address"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "offerer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "conduitKey",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "contractName",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct Order[]",
              "name": "orders",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct OrderParameters",
                  "name": "parameters",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "offerer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "zone",
                      "type": "address"
                    },
                    {
                      "internalType": "struct OfferItem[]",
                      "name": "offer",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        }
                      ]
                    },
                    {
                      "internalType": "struct ConsiderationItem[]",
                      "name": "consideration",
                      "type": "tuple[]",
                      "components": [
                        {
                          "internalType": "enum ItemType",
                          "name": "itemType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "token",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "identifierOrCriteria",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "startAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "endAmount",
                          "type": "uint256"
                        },
                        {
                          "internalType": "address payable",
                          "name": "recipient",
                          "type": "address"
                        }
                      ]
                    },
                    {
                      "internalType": "enum OrderType",
                      "name": "orderType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "zoneHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "salt",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "conduitKey",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalOriginalConsiderationItems",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "validate",
          "outputs": [
            {
              "internalType": "bool",
              "name": "validated",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "cancel((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256)[])": {
            "params": {
              "orders": "The orders to cancel."
            },
            "returns": {
              "cancelled": "A boolean indicating whether the supplied orders have                   been successfully cancelled."
            }
          },
          "constructor": {
            "params": {
              "conduitController": "A contract that deploys conduits, or proxies                          that may optionally be used to transfer approved                          ERC20/721/1155 tokens."
            }
          },
          "fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)": {
            "params": {
              "advancedOrder": "The order to fulfill along with the fraction                            of the order to attempt to fill. Note that                            both the offerer and the fulfiller must first                            approve this contract (or their conduit if                            indicated by the order) to transfer any                            relevant tokens on their behalf and that                            contracts must implement `onERC1155Received`                            to receive ERC1155 tokens as consideration.                            Also note that all offer and consideration                            components must have no remainder after                            multiplication of the respective amount with                            the supplied fraction for the partial fill to                            be considered valid.",
              "criteriaResolvers": "An array where each element contains a                            reference to a specific offer or                            consideration, a token identifier, and a proof                            that the supplied token identifier is                            contained in the merkle root held by the item                            in question's criteria element. Note that an                            empty criteria indicates that any                            (transferable) token identifier on the token                            in question is valid and that no associated                            proof needs to be supplied.",
              "fulfillerConduitKey": "A bytes32 value indicating what conduit, if                            any, to source the fulfiller's token approvals                            from. The zero hash signifies that no conduit                            should be used (and direct approvals set on                            Consideration).",
              "recipient": "The intended recipient for all received items,                            with `address(0)` indicating that the caller                            should receive the items."
            },
            "returns": {
              "fulfilled": "A boolean indicating whether the order has been                   successfully fulfilled."
            }
          },
          "fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)": {
            "params": {
              "advancedOrders": "The orders to fulfill along with the                                  fraction of those orders to attempt to                                  fill. Note that both the offerer and the                                  fulfiller must first approve this                                  contract (or their conduit if indicated                                  by the order) to transfer any relevant                                  tokens on their behalf and that                                  contracts must implement                                  `onERC1155Received` in order to receive                                  ERC1155 tokens as consideration. Also                                  note that all offer and consideration                                  components must have no remainder after                                  multiplication of the respective amount                                  with the supplied fraction for an                                  order's partial fill amount to be                                  considered valid.",
              "considerationFulfillments": "An array of FulfillmentComponent arrays                                  indicating which consideration items to                                  attempt to aggregate when preparing                                  executions.",
              "criteriaResolvers": "An array where each element contains a                                  reference to a specific offer or                                  consideration, a token identifier, and a                                  proof that the supplied token identifier                                  is contained in the merkle root held by                                  the item in question's criteria element.                                  Note that an empty criteria indicates                                  that any (transferable) token                                  identifier on the token in question is                                  valid and that no associated proof needs                                  to be supplied.",
              "fulfillerConduitKey": "A bytes32 value indicating what conduit,                                  if any, to source the fulfiller's token                                  approvals from. The zero hash signifies                                  that no conduit should be used (and                                  direct approvals set on Consideration).",
              "maximumFulfilled": "The maximum number of orders to fulfill.",
              "offerFulfillments": "An array of FulfillmentComponent arrays                                  indicating which offer items to attempt                                  to aggregate when preparing executions.",
              "recipient": "The intended recipient for all received                                  items, with `address(0)` indicating that                                  the caller should receive the items."
            },
            "returns": {
              "availableOrders": "An array of booleans indicating if each order                         with an index corresponding to the index of the                         returned boolean was fulfillable or not.",
              "executions": "     An array of elements indicating the sequence of                         transfers performed as part of matching the given                         orders."
            }
          },
          "fulfillAvailableOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,uint256)": {
            "params": {
              "considerationFulfillments": "An array of FulfillmentComponent arrays                                  indicating which consideration items to                                  attempt to aggregate when preparing                                  executions.",
              "fulfillerConduitKey": "A bytes32 value indicating what conduit,                                  if any, to source the fulfiller's token                                  approvals from. The zero hash signifies                                  that no conduit should be used (and                                  direct approvals set on Consideration).",
              "maximumFulfilled": "The maximum number of orders to fulfill.",
              "offerFulfillments": "An array of FulfillmentComponent arrays                                  indicating which offer items to attempt                                  to aggregate when preparing executions.",
              "orders": "The orders to fulfill. Note that both                                  the offerer and the fulfiller must first                                  approve this contract (or the                                  corresponding conduit if indicated) to                                  transfer any relevant tokens on their                                  behalf and that contracts must implement                                  `onERC1155Received` to receive ERC1155                                  tokens as consideration."
            },
            "returns": {
              "availableOrders": "An array of booleans indicating if each order                         with an index corresponding to the index of the                         returned boolean was fulfillable or not.",
              "executions": "     An array of elements indicating the sequence of                         transfers performed as part of matching the given                         orders."
            }
          },
          "fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))": {
            "params": {
              "parameters": "Additional information on the fulfilled order. Note                   that the offerer and the fulfiller must first approve                   this contract (or their chosen conduit if indicated)                   before any tokens can be transferred. Also note that                   contract recipients of ERC1155 consideration items must                   implement `onERC1155Received` in order to receive those                   items."
            },
            "returns": {
              "fulfilled": "A boolean indicating whether the order has been                   successfully fulfilled."
            }
          },
          "fulfillOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes),bytes32)": {
            "params": {
              "fulfillerConduitKey": "A bytes32 value indicating what conduit, if                            any, to source the fulfiller's token approvals                            from. The zero hash signifies that no conduit                            should be used (and direct approvals set on                            Consideration).",
              "order": "The order to fulfill. Note that both the                            offerer and the fulfiller must first approve                            this contract (or the corresponding conduit if                            indicated) to transfer any relevant tokens on                            their behalf and that contracts must implement                            `onERC1155Received` to receive ERC1155 tokens                            as consideration."
            },
            "returns": {
              "fulfilled": "A boolean indicating whether the order has been                   successfully fulfilled."
            }
          },
          "getCounter(address)": {
            "params": {
              "offerer": "The offerer in question."
            },
            "returns": {
              "counter": "The current counter."
            }
          },
          "getOrderHash((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))": {
            "params": {
              "order": "The components of the order."
            },
            "returns": {
              "orderHash": "The order hash."
            }
          },
          "getOrderStatus(bytes32)": {
            "params": {
              "orderHash": "The order hash in question."
            },
            "returns": {
              "isCancelled": "A boolean indicating whether the order in question                     has been cancelled.",
              "isValidated": "A boolean indicating whether the order in question                     has been validated (i.e. previously approved or                     partially filled).",
              "totalFilled": "The total portion of the order that has been filled                     (i.e. the \"numerator\").",
              "totalSize": "  The total size of the order that is either filled or                     unfilled (i.e. the \"denominator\")."
            }
          },
          "incrementCounter()": {
            "returns": {
              "newCounter": "The new counter."
            }
          },
          "information()": {
            "returns": {
              "conduitController": "The conduit Controller set for this contract.",
              "domainSeparator": "  The domain separator for this contract.",
              "version": "          The contract version."
            }
          },
          "matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[])": {
            "params": {
              "advancedOrders": "The advanced orders to match. Note that both the                          offerer and fulfiller on each order must first                          approve this contract (or their conduit if                          indicated by the order) to transfer any relevant                          tokens on their behalf and each consideration                          recipient must implement `onERC1155Received` in                          order to receive ERC1155 tokens. Also note that                          the offer and consideration components for each                          order must have no remainder after multiplying                          the respective amount with the supplied fraction                          in order for the group of partial fills to be                          considered valid.",
              "criteriaResolvers": "An array where each element contains a reference                          to a specific order as well as that order's                          offer or consideration, a token identifier, and                          a proof that the supplied token identifier is                          contained in the order's merkle root. Note that                          an empty root indicates that any (transferable)                          token identifier is valid and that no associated                          proof needs to be supplied.",
              "fulfillments": "An array of elements allocating offer components                          to consideration components. Note that each                          consideration component must be fully met in                          order for the match operation to be valid."
            },
            "returns": {
              "executions": "An array of elements indicating the sequence of                    transfers performed as part of matching the given                    orders."
            }
          },
          "matchOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])": {
            "params": {
              "fulfillments": "An array of elements allocating offer components                          to consideration components. Note that each                          consideration component must be fully met in                          order for the match operation to be valid.",
              "orders": "The orders to match. Note that both the offerer                          and fulfiller on each order must first approve                          this contract (or their conduit if indicated by                          the order) to transfer any relevant tokens on                          their behalf and each consideration recipient                          must implement `onERC1155Received` in order to                          receive ERC1155 tokens."
            },
            "returns": {
              "executions": "An array of elements indicating the sequence of                    transfers performed as part of matching the given                    orders."
            }
          },
          "name()": {
            "returns": {
              "contractName": "The name of this contract."
            }
          },
          "validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])": {
            "params": {
              "orders": "The orders to validate."
            },
            "returns": {
              "validated": "A boolean indicating whether the supplied orders have                   been successfully validated."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "cancel((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256)[])": {
            "notice": "Cancel an arbitrary number of orders. Note that only the offerer         or the zone of a given order may cancel it. Callers should ensure         that the intended order was cancelled by calling `getOrderStatus`         and confirming that `isCancelled` returns `true`."
          },
          "constructor": {
            "notice": "Derive and set hashes, reference chainId, and associated domain         separator during deployment."
          },
          "fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)": {
            "notice": "Fill an order, fully or partially, with an arbitrary number of         items for offer and consideration alongside criteria resolvers         containing specific token identifiers and associated proofs."
          },
          "fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)": {
            "notice": "Attempt to fill a group of orders, fully or partially, with an         arbitrary number of items for offer and consideration per order         alongside criteria resolvers containing specific token         identifiers and associated proofs. Any order that is not         currently active, has already been fully filled, or has been         cancelled will be omitted. Remaining offer and consideration         items will then be aggregated where possible as indicated by the         supplied offer and consideration component arrays and aggregated         items will be transferred to the fulfiller or to each intended         recipient, respectively. Note that a failing item transfer or an         issue with order formatting will cause the entire batch to fail."
          },
          "fulfillAvailableOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,uint256)": {
            "notice": "Attempt to fill a group of orders, each with an arbitrary number         of items for offer and consideration. Any order that is not         currently active, has already been fully filled, or has been         cancelled will be omitted. Remaining offer and consideration         items will then be aggregated where possible as indicated by the         supplied offer and consideration component arrays and aggregated         items will be transferred to the fulfiller or to each intended         recipient, respectively. Note that a failing item transfer or an         issue with order formatting will cause the entire batch to fail.         Note that this function does not support criteria-based orders or         partial filling of orders (though filling the remainder of a         partially-filled order is supported)."
          },
          "fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))": {
            "notice": "Fulfill an order offering an ERC20, ERC721, or ERC1155 item by         supplying Ether (or other native tokens), ERC20 tokens, an ERC721         item, or an ERC1155 item as consideration. Six permutations are         supported: Native token to ERC721, Native token to ERC1155, ERC20         to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and ERC1155 to         ERC20 (with native tokens supplied as msg.value). For an order to         be eligible for fulfillment via this method, it must contain a         single offer item (though that item may have a greater amount if         the item is not an ERC721). An arbitrary number of \"additional         recipients\" may also be supplied which will each receive native         tokens or ERC20 items from the fulfiller as consideration. Refer         to the documentation for a more comprehensive summary of how to         utilize this method and what orders are compatible with it."
          },
          "fulfillOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes),bytes32)": {
            "notice": "Fulfill an order with an arbitrary number of items for offer and         consideration. Note that this function does not support         criteria-based orders or partial filling of orders (though         filling the remainder of a partially-filled order is supported)."
          },
          "getCounter(address)": {
            "notice": "Retrieve the current counter for a given offerer."
          },
          "getOrderHash((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))": {
            "notice": "Retrieve the order hash for a given order."
          },
          "getOrderStatus(bytes32)": {
            "notice": "Retrieve the status of a given order by hash, including whether         the order has been cancelled or validated and the fraction of the         order that has been filled."
          },
          "incrementCounter()": {
            "notice": "Cancel all orders from a given offerer with a given zone in bulk         by incrementing a counter. Note that only the offerer may         increment the counter."
          },
          "information()": {
            "notice": "Retrieve configuration information for this contract."
          },
          "matchAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],((uint256,uint256)[],(uint256,uint256)[])[])": {
            "notice": "Match an arbitrary number of full or partial orders, each with an         arbitrary number of items for offer and consideration, supplying         criteria resolvers containing specific token identifiers and         associated proofs as well as fulfillments allocating offer         components to consideration components."
          },
          "matchOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[],((uint256,uint256)[],(uint256,uint256)[])[])": {
            "notice": "Match an arbitrary number of orders, each with an arbitrary         number of items for offer and consideration along with a set of         fulfillments allocating offer components to consideration         components. Note that this function does not support         criteria-based or partial filling of orders (though filling the         remainder of a partially-filled order is supported)."
          },
          "name()": {
            "notice": "Retrieve the name of this contract."
          },
          "validate(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),bytes)[])": {
            "notice": "Validate an arbitrary number of orders, thereby registering their         signatures as valid and allowing the fulfiller to skip signature         verification on fulfillment. Note that validated orders may still         be unfulfillable due to invalid item amounts or other factors;         callers should determine whether validated orders are fulfillable         by simulating the fulfillment call prior to execution. Also note         that anyone can validate a signed order, but only the offerer can         validate an order without supplying a signature."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@rari-capital/solmate/=lib/solmate/",
        ":contracts/=contracts/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":murky/=lib/murky/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 19066
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/lib/Consideration.sol": "Consideration"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/conduit/lib/ConduitEnums.sol": {
        "keccak256": "0x1a84850bbff4b820573334c70ee0797462f20fd8c9b86fdebeacc85ecb1963a6",
        "urls": [
          "bzz-raw://322f8198eefa578cbb9e3a116d484903d1dc38ddcdc6cce66ae386739a4bbb3e",
          "dweb:/ipfs/QmRrCMFNSuzUHtEE4tuJWwXrT1UpLTpkauuQ7CTZ7zA8RH"
        ],
        "license": "MIT"
      },
      "contracts/conduit/lib/ConduitStructs.sol": {
        "keccak256": "0xe3e87c74dd79c59293e49b7236cc7befdc19886bb79af5fe53208b1772fd24f9",
        "urls": [
          "bzz-raw://7b4721002090245fcf5066229a1af02797405e31f05c7174340e06b50474c076",
          "dweb:/ipfs/QmT8XtMhRfvFNsDeEmoqrwGkCYbuxp4wHk3VhiVkuFUJnD"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/AmountDerivationErrors.sol": {
        "keccak256": "0xd7296f4958294009bd696a8034ed5b1c6562f753f3767869e83c20a9203e21e0",
        "urls": [
          "bzz-raw://b34adcf58fdcd88234ab19f671b34007cc8badac09e08d20874bfa9a0cf2334c",
          "dweb:/ipfs/QmZDkz5Enfzxr8oM31wYWYRaYtfJXRhCjMT6AHqfoyAz8C"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ConduitControllerInterface.sol": {
        "keccak256": "0xb124e40645efdf5d92b48fd54eaeb0ba1d05fde62bf51e7684c1bc3bf5343388",
        "urls": [
          "bzz-raw://757b4b1edb39b78b94debeb877e68036c1181a5d20d0f299c497cecc903f147d",
          "dweb:/ipfs/QmeXsKmxsMXCxGTtcRAnyuRhtkQF4V4cfXukRYSpFwFoaF"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ConduitInterface.sol": {
        "keccak256": "0x628e23ec7e820e8ac59c0999211bb022bb5c5581a5bc6bd39465d6419d7d85b5",
        "urls": [
          "bzz-raw://b5ebbf33264fb98536f50b5fae8e0bf31d19759939c823c7626bf9d693200d0b",
          "dweb:/ipfs/QmdBV7voV8WBcjsuJZAStW4UEAAhPPLv8C3S77BiVpucDa"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ConsiderationEventsAndErrors.sol": {
        "keccak256": "0xe31a7bc05a79d64fbbe1a02af1c71d44e95fcdd92b6240d3636622e681b6982b",
        "urls": [
          "bzz-raw://d297eb426422b314a2db487ddd8a953f88682ec56543509b054c57cf1e1f7310",
          "dweb:/ipfs/QmaRPxBA9pZjQhDjVmcAk1xxPUA5cKbF1EHNYVZTD2w6Pz"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ConsiderationInterface.sol": {
        "keccak256": "0x1c535d369a2eb5eb3a62783c770870274a07fbdc7c20d6f7dc75decc75930688",
        "urls": [
          "bzz-raw://b85c960a378c3f425a1653dd8d978f2915203dfd16ec9932e4dd7b4963c17240",
          "dweb:/ipfs/QmYADawT4zzRFkkEteLTHpXdp9nrVW7ag7CvKmvQS5kYHB"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/CriteriaResolutionErrors.sol": {
        "keccak256": "0x7f94afdbf5a346aee951f7c2b93baa67a5e01980d496604bce70994bee727b13",
        "urls": [
          "bzz-raw://ffbb4b927c4943b1fbf74cfb1eb6cedb6e48f800c93a0fe9f70718df2da1dcc5",
          "dweb:/ipfs/Qmcnb1m9Qxa5yPJThdSSjefeS2USTz7P69WaZdQNqBnXnj"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/EIP1271Interface.sol": {
        "keccak256": "0x7b508919429572c3a59b27b8fd9d06c560ec0b7189bc22ad73f8c293d705745f",
        "urls": [
          "bzz-raw://e5fad9fc0e971254146df164542f3811e068ecd7c20e02894f60413a32b13a60",
          "dweb:/ipfs/QmWRCAjQkPXosDRx5Y62QKqWvnST4edZf9yZeU4GaKSgyX"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/FulfillmentApplicationErrors.sol": {
        "keccak256": "0xa9001846591c94e90ee09ac70f978d7e20fa794fabe83d877019736b22a00754",
        "urls": [
          "bzz-raw://7ed27d3dfd1970dd65d9e0db2349c5dad7bdb4ab6ce50a4d767e5895af198a2c",
          "dweb:/ipfs/QmcssChobp4rue7SwikvXDxjikdJGqrxeC6e7NxqE9hPph"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ReentrancyErrors.sol": {
        "keccak256": "0xd8825124dc105b07e1d2c857f219a30092f02f14b56905ae44e503ead6d276c8",
        "urls": [
          "bzz-raw://f0e5dfd036484867fe6a11bfa5bd698ab2dd8e4a39cec6a39c8dc4f1260e9f7c",
          "dweb:/ipfs/Qmb1qvvBwD65eSp9dTMLvB67nYJJiRYFoqcHhCmYHo6Cz2"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/SignatureVerificationErrors.sol": {
        "keccak256": "0xd0f5b26469ba6cd303e5ea9b53cf6b7c25cb00918097eb59a263678b51197381",
        "urls": [
          "bzz-raw://0a51ca924d919f0a2eddd6e666f6bbe30f71b1bd6f6c9b0e36e67df85aebcd57",
          "dweb:/ipfs/QmTb72fphyawGeM8S6q2SjWu94wf6bFSJDN2KAj12jQr2E"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/TokenTransferrerErrors.sol": {
        "keccak256": "0x0a89101400c263654f920aad668249ce67eaebd1af7d5582d38456c8384fc962",
        "urls": [
          "bzz-raw://5368eff6e44d333bdd50fb135720a232975e775423f19113b1316414fb20bfa9",
          "dweb:/ipfs/QmYQsYqdfX5JXqRkF5RdiSDJErwyY5GZU1txRMx4taBcZE"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ZoneInteractionErrors.sol": {
        "keccak256": "0x966590f8c6e0df523168b933cd73d0c063902f52a0853f4766cbcf977e3164f8",
        "urls": [
          "bzz-raw://59a52227d0ec78d2cccb4a2925fa18d3c51a5af22b70a360b5b92b106161b239",
          "dweb:/ipfs/QmXzB8VxHWGt49fhbqgswcQdyPB4bYJp6EcuPJPvuZFinu"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/ZoneInterface.sol": {
        "keccak256": "0x5ac01fb62293f1645220471e4a00888d2549d4de3c179e46c044b8dab90d3c66",
        "urls": [
          "bzz-raw://274526a97bbfff48e902207f6546021524ac6ae67869a5f1a47fe164c9131d41",
          "dweb:/ipfs/QmTHhioVQbB4EHAhyqWX9KPRV25LvARrPy731KiV9DPzsG"
        ],
        "license": "MIT"
      },
      "contracts/lib/AmountDeriver.sol": {
        "keccak256": "0xb1526d34fa4f723986128c8792fe324de8c6b8024fd7deda5bcdeb6c4ccaf690",
        "urls": [
          "bzz-raw://3a0b37d6bda3caa67376b8c4a24c8c6e96cb0943229c1b561a7901b5321bbeca",
          "dweb:/ipfs/QmRE2UvmiqveLqT6f3Yh7fz69321RaHKkwG75bcJCQ3pm2"
        ],
        "license": "MIT"
      },
      "contracts/lib/Assertions.sol": {
        "keccak256": "0x85243336fcc963e9f89dac66e5de9bf592338b655598cf14e891cde4c36f2110",
        "urls": [
          "bzz-raw://8ee4919a8d6ba0a5b3cd3b0827830cae4ad3fad9ca75f43312c81b2c124ff103",
          "dweb:/ipfs/QmPZyJ4d7QSZG9Md4Sa5mC5pVduVcf6Ri5AxSFXpDreWxz"
        ],
        "license": "MIT"
      },
      "contracts/lib/BasicOrderFulfiller.sol": {
        "keccak256": "0x6e836f173b4ce80701095e8462525f1a69e545be70d11a823f140f82dfe3891c",
        "urls": [
          "bzz-raw://e8f5d28d7802711ac8bb68ad241a90c154e00b6d93db2435c9fad7eadceccc08",
          "dweb:/ipfs/QmWR8Yc9V2DWUfy3qEdWj3TEnT3M4Lzw9nUw6pYc5XJQYo"
        ],
        "license": "MIT"
      },
      "contracts/lib/Consideration.sol": {
        "keccak256": "0x02da2c93d605b642c793308bc886dded767849e171813db2ed52bd8d28628c69",
        "urls": [
          "bzz-raw://582a0ff1a6ec3553f90b2af53c7de9379a5ec65e6029fa232cee585a447654c1",
          "dweb:/ipfs/QmadzBjixdS1foEwoDikPu2JQdbp9GxEwjDBs2BCVygtPt"
        ],
        "license": "MIT"
      },
      "contracts/lib/ConsiderationBase.sol": {
        "keccak256": "0x369dad1787bc0871bf34e602277c0d97aae4f27993742d77e8a97f3110396680",
        "urls": [
          "bzz-raw://4ec661f7e084c37307cb6d2ec8fa9ad5ee62fc6c407b33a0bfbde1b38e4d9965",
          "dweb:/ipfs/QmWWdtUzarVosgfCxbWNq1kL5YGNNJwgoxtZvWqTmcC3Bj"
        ],
        "license": "MIT"
      },
      "contracts/lib/ConsiderationConstants.sol": {
        "keccak256": "0xa932563f00b8cbf6e403247d8633211c581904481e67b64f085346c456ae5e80",
        "urls": [
          "bzz-raw://b0921621f5e4b3ed8e99b583503678b43040499a6ce534a72a451b7b29c5bbc8",
          "dweb:/ipfs/QmeimHoxDtNCxcJUTgcVD77d9Bw3qLA2pb19vKUTHTCyUo"
        ],
        "license": "MIT"
      },
      "contracts/lib/ConsiderationEnums.sol": {
        "keccak256": "0xe78faea2c9d9322ca557af34e8d576fe21dab9c995f0657d34ba6c4e94fe9c0f",
        "urls": [
          "bzz-raw://6ebef28980d88b7707013dd98658b22d4494755f59d0b93463dba1c377a62bbb",
          "dweb:/ipfs/QmRdfKbcuCYVB3rpTbS6peRY4XnhBxQRewbxpttA4Jv9ie"
        ],
        "license": "MIT"
      },
      "contracts/lib/ConsiderationStructs.sol": {
        "keccak256": "0x1cf7b9e7d034197a5af36536ff8b8fea6041e8c66c1928e6d6d5e411c465b234",
        "urls": [
          "bzz-raw://369e5901a714935a54f68c1abd1f96e901d95b51a05897cfcf2eb9e28ef57896",
          "dweb:/ipfs/QmNM5XGK419cC2xn23qgB68gbR7qqbif44QBFwKax2SBpM"
        ],
        "license": "MIT"
      },
      "contracts/lib/CounterManager.sol": {
        "keccak256": "0xb2f5f4742bcd8b702483087752e2997e2399936772da7c0b4f96c9e629bbd152",
        "urls": [
          "bzz-raw://0ae32dd152f438510f2ebd1760777521d848e1745738b0924596495dbc1f6a82",
          "dweb:/ipfs/QmTBwPyU5G3vwuQ51RxmyjRD8ZcprvL5FBYnTsnvnPey1X"
        ],
        "license": "MIT"
      },
      "contracts/lib/CriteriaResolution.sol": {
        "keccak256": "0x14eee514b1f089959f121a9c7460bb66457502e98fb4b8f1b3503a7a39ee7cdb",
        "urls": [
          "bzz-raw://097eec641821c6232ff1ab7c2b5e0fe797d834af22c17e854b7a28a8806e5fe3",
          "dweb:/ipfs/QmQJnfzC99MtPEAkApCcLJXoTBf6upp6LznhqRqXtNyXb5"
        ],
        "license": "MIT"
      },
      "contracts/lib/Executor.sol": {
        "keccak256": "0x6b248a05b34e80beb1058bef27b6928616bb0faf2e19d86fcf54540e1f3c4c85",
        "urls": [
          "bzz-raw://4cf97772d501fe0c434fa574e9654be61e5230e623707fb6d18b9021b4a3fd0d",
          "dweb:/ipfs/QmVdVLhgPZ3uqKgxQFnetpvka6kc8fhavVs8xaqZXjHJWL"
        ],
        "license": "MIT"
      },
      "contracts/lib/FulfillmentApplier.sol": {
        "keccak256": "0xf96eec5620f0e5659a97b2006a0a333af2fc9cacd1e9da715b6cd1a6128bedd2",
        "urls": [
          "bzz-raw://e8effb931973f72a8a84db3483dfc2b239af952fe0f9b3dddcb067b25583d2cd",
          "dweb:/ipfs/QmfFPkgKSbPh8woKq52gwjHZw2dwnhXag2toRmLSJRKwHX"
        ],
        "license": "MIT"
      },
      "contracts/lib/GettersAndDerivers.sol": {
        "keccak256": "0x0ebbfce9155cd6fd49f4a8974e8bf23d09374b50f2dbc7e28906564f7b433643",
        "urls": [
          "bzz-raw://f3daecc84fb1e0d5659bce9bf406f2aa6aa5e280dc49dd1a80547328f938d2a0",
          "dweb:/ipfs/QmeooggfQRJt3HrUeUbAqX77ctuLK2Uz1w8fQqjHaxPme9"
        ],
        "license": "MIT"
      },
      "contracts/lib/LowLevelHelpers.sol": {
        "keccak256": "0x57700a6f8f18d1cdfc8492724ef3b9f89aa143382f13794489df70c1f3fc027c",
        "urls": [
          "bzz-raw://5e9e879ac9e9b9ae9c444a963d16fb9e8736725df9b4a750fb25ac3d6219cec9",
          "dweb:/ipfs/QmWNttmqzq9Lk3K9FvGAxmjTDJ6EGVLUMWQWfQAoACWBTY"
        ],
        "license": "MIT"
      },
      "contracts/lib/OrderCombiner.sol": {
        "keccak256": "0x1e12ad53e2cf29c145e8877cf21425be48d5b7f77cb1c94494241c5d95d85b6d",
        "urls": [
          "bzz-raw://7aa84687f6ccd59e654f4d4dc3ec5e40e64511f2ef3b589817316c30b3db0db6",
          "dweb:/ipfs/QmTrCX7eTncGd8sVQwzT2Va3S3qBxk8xVA6jzbVsnmFBrR"
        ],
        "license": "MIT"
      },
      "contracts/lib/OrderFulfiller.sol": {
        "keccak256": "0x17bd567789284f2da800ffe57157c746c7c27d08077b02f048f167b48539ca04",
        "urls": [
          "bzz-raw://79aa603c7d9dfd311285ab51f71f096675e0c85e9ae2da6eb03ba5d559d0d180",
          "dweb:/ipfs/QmcHinzjjs7LVuahexkGdKYokjy84J76BoknyE9SEVBkxJ"
        ],
        "license": "MIT"
      },
      "contracts/lib/OrderValidator.sol": {
        "keccak256": "0xd971b3099997a07be677c5f17d5bb63acdf122dac5368238bb840dad79663a2a",
        "urls": [
          "bzz-raw://3e39d85e0101780442bc03d312cd904a937bd5b71a17ac1b1f975314f19272ee",
          "dweb:/ipfs/QmfSRMYgrr26D2KYF3vJJE8r2GJCnE5AtW3YL7mLuszmHo"
        ],
        "license": "MIT"
      },
      "contracts/lib/ReentrancyGuard.sol": {
        "keccak256": "0xa52711c788a24071f8a872ea5ee3030f0f8f592abf8f0d5577707e585a7628d5",
        "urls": [
          "bzz-raw://0ea73c7072734c457cd811a06e48660ed8b1206722f6a4521a4a3049a34b8940",
          "dweb:/ipfs/QmQFvXvo321QuLAzGVNSRpY9iENQAv3WbU6sPrjNSpCZiR"
        ],
        "license": "MIT"
      },
      "contracts/lib/SignatureVerification.sol": {
        "keccak256": "0x9af8a720f3f6aac730d7896484f407ecea62105c1c9dc45666273d51555a0f42",
        "urls": [
          "bzz-raw://cfd33e4b31f0d30e9bee83aadcbf952c8eb8592991b11d187faffa7820be9b9e",
          "dweb:/ipfs/QmPhVdF7Jaqaa5tk5UA6xorGbcN8DvxC87Bh1GPvLVqfah"
        ],
        "license": "MIT"
      },
      "contracts/lib/TokenTransferrer.sol": {
        "keccak256": "0x9fc47ddb3e9e741e3c34d942b3d7e5277c4c8191a38208e69e49bf18cde8ea2c",
        "urls": [
          "bzz-raw://2042d4a901fdffa7fd045e9125deb4f1988801a6c3e7825d38cc61d710cce682",
          "dweb:/ipfs/QmRTcJB47snGNmzY3gkS3R1onMNDggX3W9sD7qzq7MPyGw"
        ],
        "license": "MIT"
      },
      "contracts/lib/TokenTransferrerConstants.sol": {
        "keccak256": "0xa27ce8b77d5386e95f9b9b4897f1585b78e016c8d1e4c6531fe3b1963cdba08a",
        "urls": [
          "bzz-raw://25f15e002308f4f7b28d673d5c40c12b230039ec9c871dbc50607ce567bf7bd3",
          "dweb:/ipfs/QmPjc46Qdnw8ekiaNxZ5Q8nsecTL5pr1QF6hdBPkaUkWuq"
        ],
        "license": "MIT"
      },
      "contracts/lib/Verifiers.sol": {
        "keccak256": "0x27f0a3791ded47a6b8fc15e726a0b1a0932de4ee21652bc6d220b53e38201a55",
        "urls": [
          "bzz-raw://999c65bcf8eceb3fb170585ff19e4c3e8e4644641c0c99828776af84b6999733",
          "dweb:/ipfs/QmWNZEU85q3ExYw2VbRDdsyn9ijpotYacUAA9vDZJVw7z4"
        ],
        "license": "MIT"
      },
      "contracts/lib/ZoneInteraction.sol": {
        "keccak256": "0x2a8836e99495c8f48475280e0351b305f0adfb133932918bf433ada861807f3e",
        "urls": [
          "bzz-raw://1803535bd4abf24c81a519d493edabecd561a204a5e36dcf2ed98545f51e819b",
          "dweb:/ipfs/QmRGWaEBa8UdQagwqgzBdN3P8JJY77oQvd7TFvDVBUgQfd"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/lib/Consideration.sol",
    "id": 4164,
    "exportedSymbols": {
      "AdvancedOrder": [
        5148
      ],
      "BasicOrderParameters": [
        5097
      ],
      "Consideration": [
        4163
      ],
      "ConsiderationInterface": [
        2309
      ],
      "CriteriaResolver": [
        5170
      ],
      "Execution": [
        5192
      ],
      "Fulfillment": [
        5179
      ],
      "FulfillmentComponent": [
        5184
      ],
      "Order": [
        5136
      ],
      "OrderCombiner": [
        7717
      ],
      "OrderComponents": [
        5009
      ],
      "OrderParameters": [
        5130
      ],
      "OrderStatus": [
        5157
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:28615:30",
    "nodes": [
      {
        "id": 3728,
        "nodeType": "PragmaDirective",
        "src": "32:24:30",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".13"
        ]
      },
      {
        "id": 3730,
        "nodeType": "ImportDirective",
        "src": "58:86:30",
        "nodes": [],
        "absolutePath": "contracts/interfaces/ConsiderationInterface.sol",
        "file": "../interfaces/ConsiderationInterface.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4164,
        "sourceUnit": 2310,
        "symbolAliases": [
          {
            "foreign": {
              "id": 3729,
              "name": "ConsiderationInterface",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2309,
              "src": "71:22:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 3741,
        "nodeType": "ImportDirective",
        "src": "146:239:30",
        "nodes": [],
        "absolutePath": "contracts/lib/ConsiderationStructs.sol",
        "file": "./ConsiderationStructs.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4164,
        "sourceUnit": 5193,
        "symbolAliases": [
          {
            "foreign": {
              "id": 3731,
              "name": "OrderComponents",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5009,
              "src": "159:15:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3732,
              "name": "BasicOrderParameters",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5097,
              "src": "180:20:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3733,
              "name": "OrderParameters",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5130,
              "src": "206:15:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3734,
              "name": "Order",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5136,
              "src": "227:5:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3735,
              "name": "AdvancedOrder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5148,
              "src": "238:13:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3736,
              "name": "OrderStatus",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5157,
              "src": "257:11:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3737,
              "name": "CriteriaResolver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5170,
              "src": "274:16:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3738,
              "name": "Fulfillment",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5179,
              "src": "296:11:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3739,
              "name": "FulfillmentComponent",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5184,
              "src": "313:20:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3740,
              "name": "Execution",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5192,
              "src": "339:9:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 3743,
        "nodeType": "ImportDirective",
        "src": "387:52:30",
        "nodes": [],
        "absolutePath": "contracts/lib/OrderCombiner.sol",
        "file": "./OrderCombiner.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4164,
        "sourceUnit": 7718,
        "symbolAliases": [
          {
            "foreign": {
              "id": 3742,
              "name": "OrderCombiner",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7717,
              "src": "396:13:30",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 4163,
        "nodeType": "ContractDefinition",
        "src": "1115:27531:30",
        "nodes": [
          {
            "id": 3758,
            "nodeType": "FunctionDefinition",
            "src": "1544:74:30",
            "nodes": [],
            "body": {
              "id": 3757,
              "nodeType": "Block",
              "src": "1616:2:30",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 3749,
              "nodeType": "StructuredDocumentation",
              "src": "1185:354:30",
              "text": " @notice Derive and set hashes, reference chainId, and associated domain\n         separator during deployment.\n @param conduitController A contract that deploys conduits, or proxies\n                          that may optionally be used to transfer approved\n                          ERC20/721/1155 tokens."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 3754,
                    "name": "conduitController",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3751,
                    "src": "1597:17:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 3755,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 3753,
                  "name": "OrderCombiner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7717,
                  "src": "1583:13:30"
                },
                "nodeType": "ModifierInvocation",
                "src": "1583:32:30"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 3752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3751,
                  "mutability": "mutable",
                  "name": "conduitController",
                  "nameLocation": "1564:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3758,
                  "src": "1556:25:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3750,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1556:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1555:27:30"
            },
            "returnParameters": {
              "id": 3756,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1616:0:30"
            },
            "scope": 4163,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 3775,
            "nodeType": "FunctionDefinition",
            "src": "3307:275:30",
            "nodes": [],
            "body": {
              "id": 3774,
              "nodeType": "Block",
              "src": "3463:119:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 3772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3768,
                      "name": "fulfilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3766,
                      "src": "3522:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 3770,
                          "name": "parameters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3762,
                          "src": "3564:10:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BasicOrderParameters_$5097_calldata_ptr",
                            "typeString": "struct BasicOrderParameters calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_BasicOrderParameters_$5097_calldata_ptr",
                            "typeString": "struct BasicOrderParameters calldata"
                          }
                        ],
                        "id": 3769,
                        "name": "_validateAndFulfillBasicOrder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3376,
                        "src": "3534:29:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_BasicOrderParameters_$5097_calldata_ptr_$returns$_t_bool_$",
                          "typeString": "function (struct BasicOrderParameters calldata) returns (bool)"
                        }
                      },
                      "id": 3771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3534:41:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3522:53:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3773,
                  "nodeType": "ExpressionStatement",
                  "src": "3522:53:30"
                }
              ]
            },
            "baseFunctions": [
              2107
            ],
            "documentation": {
              "id": 3759,
              "nodeType": "StructuredDocumentation",
              "src": "1624:1678:30",
              "text": " @notice Fulfill an order offering an ERC20, ERC721, or ERC1155 item by\n         supplying Ether (or other native tokens), ERC20 tokens, an ERC721\n         item, or an ERC1155 item as consideration. Six permutations are\n         supported: Native token to ERC721, Native token to ERC1155, ERC20\n         to ERC721, ERC20 to ERC1155, ERC721 to ERC20, and ERC1155 to\n         ERC20 (with native tokens supplied as msg.value). For an order to\n         be eligible for fulfillment via this method, it must contain a\n         single offer item (though that item may have a greater amount if\n         the item is not an ERC721). An arbitrary number of \"additional\n         recipients\" may also be supplied which will each receive native\n         tokens or ERC20 items from the fulfiller as consideration. Refer\n         to the documentation for a more comprehensive summary of how to\n         utilize this method and what orders are compatible with it.\n @param parameters Additional information on the fulfilled order. Note\n                   that the offerer and the fulfiller must first approve\n                   this contract (or their chosen conduit if indicated)\n                   before any tokens can be transferred. Also note that\n                   contract recipients of ERC1155 consideration items must\n                   implement `onERC1155Received` in order to receive those\n                   items.\n @return fulfilled A boolean indicating whether the order has been\n                   successfully fulfilled."
            },
            "functionSelector": "fb0f3ee1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillBasicOrder",
            "nameLocation": "3316:17:30",
            "overrides": {
              "id": 3764,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3417:8:30"
            },
            "parameters": {
              "id": 3763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3762,
                  "mutability": "mutable",
                  "name": "parameters",
                  "nameLocation": "3364:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3775,
                  "src": "3334:40:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BasicOrderParameters_$5097_calldata_ptr",
                    "typeString": "struct BasicOrderParameters"
                  },
                  "typeName": {
                    "id": 3761,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3760,
                      "name": "BasicOrderParameters",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5097,
                      "src": "3334:20:30"
                    },
                    "referencedDeclaration": 5097,
                    "src": "3334:20:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BasicOrderParameters_$5097_storage_ptr",
                      "typeString": "struct BasicOrderParameters"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3333:42:30"
            },
            "returnParameters": {
              "id": 3767,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3766,
                  "mutability": "mutable",
                  "name": "fulfilled",
                  "nameLocation": "3448:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3775,
                  "src": "3443:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3765,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3443:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3442:16:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3805,
            "nodeType": "FunctionDefinition",
            "src": "4940:482:30",
            "nodes": [],
            "body": {
              "id": 3804,
              "nodeType": "Block",
              "src": "5100:322:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 3802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3787,
                      "name": "fulfilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3785,
                      "src": "5186:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 3790,
                              "name": "order",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3779,
                              "src": "5268:5:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Order_$5136_calldata_ptr",
                                "typeString": "struct Order calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Order_$5136_calldata_ptr",
                                "typeString": "struct Order calldata"
                              }
                            ],
                            "id": 3789,
                            "name": "_convertOrderToAdvanced",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8168,
                            "src": "5244:23:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_Order_$5136_calldata_ptr_$returns$_t_struct$_AdvancedOrder_$5148_memory_ptr_$",
                              "typeString": "function (struct Order calldata) pure returns (struct AdvancedOrder memory)"
                            }
                          },
                          "id": 3791,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5244:30:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AdvancedOrder_$5148_memory_ptr",
                            "typeString": "struct AdvancedOrder memory"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 3796,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5311:1:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 3795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "5288:22:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (struct CriteriaResolver memory[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 3793,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 3792,
                                  "name": "CriteriaResolver",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 5170,
                                  "src": "5292:16:30"
                                },
                                "referencedDeclaration": 5170,
                                "src": "5292:16:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                                  "typeString": "struct CriteriaResolver"
                                }
                              },
                              "id": 3794,
                              "nodeType": "ArrayTypeName",
                              "src": "5292:18:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                                "typeString": "struct CriteriaResolver[]"
                              }
                            }
                          },
                          "id": 3797,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5288:25:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct CriteriaResolver memory[] memory"
                          }
                        },
                        {
                          "id": 3798,
                          "name": "fulfillerConduitKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3781,
                          "src": "5362:19:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "expression": {
                            "id": 3799,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5395:3:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3800,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "5395:10:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_AdvancedOrder_$5148_memory_ptr",
                            "typeString": "struct AdvancedOrder memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct CriteriaResolver memory[] memory"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 3788,
                        "name": "_validateAndFulfillAdvancedOrder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7851,
                        "src": "5198:32:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AdvancedOrder_$5148_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$",
                          "typeString": "function (struct AdvancedOrder memory,struct CriteriaResolver memory[] memory,bytes32,address) returns (bool)"
                        }
                      },
                      "id": 3801,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5198:217:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5186:229:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3803,
                  "nodeType": "ExpressionStatement",
                  "src": "5186:229:30"
                }
              ]
            },
            "baseFunctions": [
              2118
            ],
            "documentation": {
              "id": 3776,
              "nodeType": "StructuredDocumentation",
              "src": "3588:1347:30",
              "text": " @notice Fulfill an order with an arbitrary number of items for offer and\n         consideration. Note that this function does not support\n         criteria-based orders or partial filling of orders (though\n         filling the remainder of a partially-filled order is supported).\n @param order               The order to fulfill. Note that both the\n                            offerer and the fulfiller must first approve\n                            this contract (or the corresponding conduit if\n                            indicated) to transfer any relevant tokens on\n                            their behalf and that contracts must implement\n                            `onERC1155Received` to receive ERC1155 tokens\n                            as consideration.\n @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n                            any, to source the fulfiller's token approvals\n                            from. The zero hash signifies that no conduit\n                            should be used (and direct approvals set on\n                            Consideration).\n @return fulfilled A boolean indicating whether the order has been\n                   successfully fulfilled."
            },
            "functionSelector": "b3a34c4c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillOrder",
            "nameLocation": "4949:12:30",
            "overrides": {
              "id": 3783,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5054:8:30"
            },
            "parameters": {
              "id": 3782,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3779,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "4977:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3805,
                  "src": "4962:20:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Order_$5136_calldata_ptr",
                    "typeString": "struct Order"
                  },
                  "typeName": {
                    "id": 3778,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3777,
                      "name": "Order",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5136,
                      "src": "4962:5:30"
                    },
                    "referencedDeclaration": 5136,
                    "src": "4962:5:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Order_$5136_storage_ptr",
                      "typeString": "struct Order"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3781,
                  "mutability": "mutable",
                  "name": "fulfillerConduitKey",
                  "nameLocation": "4992:19:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3805,
                  "src": "4984:27:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3780,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4984:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4961:51:30"
            },
            "returnParameters": {
              "id": 3786,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3785,
                  "mutability": "mutable",
                  "name": "fulfilled",
                  "nameLocation": "5085:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3805,
                  "src": "5080:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3784,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5080:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5079:16:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3842,
            "nodeType": "FunctionDefinition",
            "src": "8122:519:30",
            "nodes": [],
            "body": {
              "id": 3841,
              "nodeType": "Block",
              "src": "8374:267:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 3839,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3823,
                      "name": "fulfilled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3821,
                      "src": "8427:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 3825,
                          "name": "advancedOrder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3809,
                          "src": "8485:13:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AdvancedOrder_$5148_calldata_ptr",
                            "typeString": "struct AdvancedOrder calldata"
                          }
                        },
                        {
                          "id": 3826,
                          "name": "criteriaResolvers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3813,
                          "src": "8512:17:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct CriteriaResolver calldata[] calldata"
                          }
                        },
                        {
                          "id": 3827,
                          "name": "fulfillerConduitKey",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3815,
                          "src": "8543:19:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 3833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 3828,
                              "name": "recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3817,
                              "src": "8576:9:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 3831,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8597:1:30",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 3830,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8589:7:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3829,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8589:7:30",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3832,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8589:10:30",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "8576:23:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 3836,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3817,
                            "src": "8615:9:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 3837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "8576:48:30",
                          "trueExpression": {
                            "expression": {
                              "id": 3834,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "8602:3:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3835,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8602:10:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_AdvancedOrder_$5148_calldata_ptr",
                            "typeString": "struct AdvancedOrder calldata"
                          },
                          {
                            "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct CriteriaResolver calldata[] calldata"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 3824,
                        "name": "_validateAndFulfillAdvancedOrder",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7851,
                        "src": "8439:32:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_AdvancedOrder_$5148_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$",
                          "typeString": "function (struct AdvancedOrder memory,struct CriteriaResolver memory[] memory,bytes32,address) returns (bool)"
                        }
                      },
                      "id": 3838,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8439:195:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "8427:207:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3840,
                  "nodeType": "ExpressionStatement",
                  "src": "8427:207:30"
                }
              ]
            },
            "baseFunctions": [
              2135
            ],
            "documentation": {
              "id": 3806,
              "nodeType": "StructuredDocumentation",
              "src": "5428:2689:30",
              "text": " @notice Fill an order, fully or partially, with an arbitrary number of\n         items for offer and consideration alongside criteria resolvers\n         containing specific token identifiers and associated proofs.\n @param advancedOrder       The order to fulfill along with the fraction\n                            of the order to attempt to fill. Note that\n                            both the offerer and the fulfiller must first\n                            approve this contract (or their conduit if\n                            indicated by the order) to transfer any\n                            relevant tokens on their behalf and that\n                            contracts must implement `onERC1155Received`\n                            to receive ERC1155 tokens as consideration.\n                            Also note that all offer and consideration\n                            components must have no remainder after\n                            multiplication of the respective amount with\n                            the supplied fraction for the partial fill to\n                            be considered valid.\n @param criteriaResolvers   An array where each element contains a\n                            reference to a specific offer or\n                            consideration, a token identifier, and a proof\n                            that the supplied token identifier is\n                            contained in the merkle root held by the item\n                            in question's criteria element. Note that an\n                            empty criteria indicates that any\n                            (transferable) token identifier on the token\n                            in question is valid and that no associated\n                            proof needs to be supplied.\n @param fulfillerConduitKey A bytes32 value indicating what conduit, if\n                            any, to source the fulfiller's token approvals\n                            from. The zero hash signifies that no conduit\n                            should be used (and direct approvals set on\n                            Consideration).\n @param recipient           The intended recipient for all received items,\n                            with `address(0)` indicating that the caller\n                            should receive the items.\n @return fulfilled A boolean indicating whether the order has been\n                   successfully fulfilled."
            },
            "functionSelector": "e7acab24",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillAdvancedOrder",
            "nameLocation": "8131:20:30",
            "overrides": {
              "id": 3819,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "8340:8:30"
            },
            "parameters": {
              "id": 3818,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3809,
                  "mutability": "mutable",
                  "name": "advancedOrder",
                  "nameLocation": "8184:13:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3842,
                  "src": "8161:36:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_AdvancedOrder_$5148_calldata_ptr",
                    "typeString": "struct AdvancedOrder"
                  },
                  "typeName": {
                    "id": 3808,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3807,
                      "name": "AdvancedOrder",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5148,
                      "src": "8161:13:30"
                    },
                    "referencedDeclaration": 5148,
                    "src": "8161:13:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_AdvancedOrder_$5148_storage_ptr",
                      "typeString": "struct AdvancedOrder"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3813,
                  "mutability": "mutable",
                  "name": "criteriaResolvers",
                  "nameLocation": "8235:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3842,
                  "src": "8207:45:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct CriteriaResolver[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3811,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3810,
                        "name": "CriteriaResolver",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5170,
                        "src": "8207:16:30"
                      },
                      "referencedDeclaration": 5170,
                      "src": "8207:16:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                        "typeString": "struct CriteriaResolver"
                      }
                    },
                    "id": 3812,
                    "nodeType": "ArrayTypeName",
                    "src": "8207:18:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                      "typeString": "struct CriteriaResolver[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3815,
                  "mutability": "mutable",
                  "name": "fulfillerConduitKey",
                  "nameLocation": "8270:19:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3842,
                  "src": "8262:27:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3814,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8262:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3817,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "8307:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3842,
                  "src": "8299:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3816,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8299:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8151:171:30"
            },
            "returnParameters": {
              "id": 3822,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3821,
                  "mutability": "mutable",
                  "name": "fulfilled",
                  "nameLocation": "8363:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3842,
                  "src": "8358:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3820,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8358:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8357:16:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3891,
            "nodeType": "FunctionDefinition",
            "src": "11636:903:30",
            "nodes": [],
            "body": {
              "id": 3890,
              "nodeType": "Block",
              "src": "12041:498:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 3874,
                            "name": "orders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3847,
                            "src": "12225:6:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "struct Order calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "struct Order calldata[] calldata"
                            }
                          ],
                          "id": 3873,
                          "name": "_convertOrdersToAdvanced",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8220,
                          "src": "12200:24:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$",
                            "typeString": "function (struct Order calldata[] calldata) pure returns (struct AdvancedOrder memory[] memory)"
                          }
                        },
                        "id": 3875,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12200:32:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 3880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12304:1:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 3879,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "NewExpression",
                          "src": "12281:22:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (struct CriteriaResolver memory[] memory)"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 3877,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3876,
                                "name": "CriteriaResolver",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 5170,
                                "src": "12285:16:30"
                              },
                              "referencedDeclaration": 5170,
                              "src": "12285:16:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                                "typeString": "struct CriteriaResolver"
                              }
                            },
                            "id": 3878,
                            "nodeType": "ArrayTypeName",
                            "src": "12285:18:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                              "typeString": "struct CriteriaResolver[]"
                            }
                          }
                        },
                        "id": 3881,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12281:25:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct CriteriaResolver memory[] memory"
                        }
                      },
                      {
                        "id": 3882,
                        "name": "offerFulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3852,
                        "src": "12359:17:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        }
                      },
                      {
                        "id": 3883,
                        "name": "considerationFulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3857,
                        "src": "12394:25:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        }
                      },
                      {
                        "id": 3884,
                        "name": "fulfillerConduitKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3859,
                        "src": "12437:19:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "expression": {
                          "id": 3885,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "12474:3:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3886,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "12474:10:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3887,
                        "name": "maximumFulfilled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3861,
                        "src": "12502:16:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct CriteriaResolver memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3872,
                      "name": "_fulfillAvailableAdvancedOrders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6813,
                      "src": "12151:31:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr_$_t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (struct AdvancedOrder memory[] memory,struct CriteriaResolver memory[] memory,struct FulfillmentComponent calldata[] calldata[] calldata,struct FulfillmentComponent calldata[] calldata[] calldata,bytes32,address,uint256) returns (bool[] memory,struct Execution memory[] memory)"
                      }
                    },
                    "id": 3888,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12151:381:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                      "typeString": "tuple(bool[] memory,struct Execution memory[] memory)"
                    }
                  },
                  "functionReturnParameters": 3871,
                  "id": 3889,
                  "nodeType": "Return",
                  "src": "12132:400:30"
                }
              ]
            },
            "baseFunctions": [
              2164
            ],
            "documentation": {
              "id": 3843,
              "nodeType": "StructuredDocumentation",
              "src": "8647:2984:30",
              "text": " @notice Attempt to fill a group of orders, each with an arbitrary number\n         of items for offer and consideration. Any order that is not\n         currently active, has already been fully filled, or has been\n         cancelled will be omitted. Remaining offer and consideration\n         items will then be aggregated where possible as indicated by the\n         supplied offer and consideration component arrays and aggregated\n         items will be transferred to the fulfiller or to each intended\n         recipient, respectively. Note that a failing item transfer or an\n         issue with order formatting will cause the entire batch to fail.\n         Note that this function does not support criteria-based orders or\n         partial filling of orders (though filling the remainder of a\n         partially-filled order is supported).\n @param orders                    The orders to fulfill. Note that both\n                                  the offerer and the fulfiller must first\n                                  approve this contract (or the\n                                  corresponding conduit if indicated) to\n                                  transfer any relevant tokens on their\n                                  behalf and that contracts must implement\n                                  `onERC1155Received` to receive ERC1155\n                                  tokens as consideration.\n @param offerFulfillments         An array of FulfillmentComponent arrays\n                                  indicating which offer items to attempt\n                                  to aggregate when preparing executions.\n @param considerationFulfillments An array of FulfillmentComponent arrays\n                                  indicating which consideration items to\n                                  attempt to aggregate when preparing\n                                  executions.\n @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n                                  if any, to source the fulfiller's token\n                                  approvals from. The zero hash signifies\n                                  that no conduit should be used (and\n                                  direct approvals set on Consideration).\n @param maximumFulfilled          The maximum number of orders to fulfill.\n @return availableOrders An array of booleans indicating if each order\n                         with an index corresponding to the index of the\n                         returned boolean was fulfillable or not.\n @return executions      An array of elements indicating the sequence of\n                         transfers performed as part of matching the given\n                         orders."
            },
            "functionSelector": "ed98a574",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillAvailableOrders",
            "nameLocation": "11645:22:30",
            "overrides": {
              "id": 3863,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "11949:8:30"
            },
            "parameters": {
              "id": 3862,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3847,
                  "mutability": "mutable",
                  "name": "orders",
                  "nameLocation": "11694:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11677:23:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct Order[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3845,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3844,
                        "name": "Order",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5136,
                        "src": "11677:5:30"
                      },
                      "referencedDeclaration": 5136,
                      "src": "11677:5:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$5136_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "id": 3846,
                    "nodeType": "ArrayTypeName",
                    "src": "11677:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Order_$5136_storage_$dyn_storage_ptr",
                      "typeString": "struct Order[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3852,
                  "mutability": "mutable",
                  "name": "offerFulfillments",
                  "nameLocation": "11744:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11710:51:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct FulfillmentComponent[][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 3849,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 3848,
                          "name": "FulfillmentComponent",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5184,
                          "src": "11710:20:30"
                        },
                        "referencedDeclaration": 5184,
                        "src": "11710:20:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FulfillmentComponent_$5184_storage_ptr",
                          "typeString": "struct FulfillmentComponent"
                        }
                      },
                      "id": 3850,
                      "nodeType": "ArrayTypeName",
                      "src": "11710:22:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_ptr",
                        "typeString": "struct FulfillmentComponent[]"
                      }
                    },
                    "id": 3851,
                    "nodeType": "ArrayTypeName",
                    "src": "11710:24:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_$dyn_storage_ptr",
                      "typeString": "struct FulfillmentComponent[][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3857,
                  "mutability": "mutable",
                  "name": "considerationFulfillments",
                  "nameLocation": "11805:25:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11771:59:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct FulfillmentComponent[][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 3854,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 3853,
                          "name": "FulfillmentComponent",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5184,
                          "src": "11771:20:30"
                        },
                        "referencedDeclaration": 5184,
                        "src": "11771:20:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FulfillmentComponent_$5184_storage_ptr",
                          "typeString": "struct FulfillmentComponent"
                        }
                      },
                      "id": 3855,
                      "nodeType": "ArrayTypeName",
                      "src": "11771:22:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_ptr",
                        "typeString": "struct FulfillmentComponent[]"
                      }
                    },
                    "id": 3856,
                    "nodeType": "ArrayTypeName",
                    "src": "11771:24:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_$dyn_storage_ptr",
                      "typeString": "struct FulfillmentComponent[][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3859,
                  "mutability": "mutable",
                  "name": "fulfillerConduitKey",
                  "nameLocation": "11848:19:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11840:27:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3858,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11840:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3861,
                  "mutability": "mutable",
                  "name": "maximumFulfilled",
                  "nameLocation": "11885:16:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11877:24:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3860,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11877:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11667:240:30"
            },
            "returnParameters": {
              "id": 3871,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3866,
                  "mutability": "mutable",
                  "name": "availableOrders",
                  "nameLocation": "11989:15:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "11975:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3864,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "11975:4:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 3865,
                    "nodeType": "ArrayTypeName",
                    "src": "11975:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3870,
                  "mutability": "mutable",
                  "name": "executions",
                  "nameLocation": "12025:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3891,
                  "src": "12006:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Execution[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3868,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3867,
                        "name": "Execution",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5192,
                        "src": "12006:9:30"
                      },
                      "referencedDeclaration": 5192,
                      "src": "12006:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Execution_$5192_storage_ptr",
                        "typeString": "struct Execution"
                      }
                    },
                    "id": 3869,
                    "nodeType": "ArrayTypeName",
                    "src": "12006:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_storage_$dyn_storage_ptr",
                      "typeString": "struct Execution[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11974:62:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3947,
            "nodeType": "FunctionDefinition",
            "src": "17143:913:30",
            "nodes": [],
            "body": {
              "id": 3946,
              "nodeType": "Block",
              "src": "17652:404:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3928,
                        "name": "advancedOrders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3896,
                        "src": "17771:14:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        }
                      },
                      {
                        "id": 3929,
                        "name": "criteriaResolvers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3900,
                        "src": "17803:17:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct CriteriaResolver calldata[] calldata"
                        }
                      },
                      {
                        "id": 3930,
                        "name": "offerFulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3905,
                        "src": "17838:17:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        }
                      },
                      {
                        "id": 3931,
                        "name": "considerationFulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3910,
                        "src": "17873:25:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        }
                      },
                      {
                        "id": 3932,
                        "name": "fulfillerConduitKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3912,
                        "src": "17916:19:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 3938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3933,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3914,
                            "src": "17953:9:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 3936,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17974:1:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 3935,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "17966:7:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 3934,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "17966:7:30",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 3937,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17966:10:30",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "17953:23:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "id": 3941,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3914,
                          "src": "17992:9:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3942,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "17953:48:30",
                        "trueExpression": {
                          "expression": {
                            "id": 3939,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "17979:3:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3940,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "17979:10:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3943,
                        "name": "maximumFulfilled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3916,
                        "src": "18019:16:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct CriteriaResolver calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct FulfillmentComponent calldata[] calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3927,
                      "name": "_fulfillAvailableAdvancedOrders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6813,
                      "src": "17722:31:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr_$_t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr_$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (struct AdvancedOrder memory[] memory,struct CriteriaResolver memory[] memory,struct FulfillmentComponent calldata[] calldata[] calldata,struct FulfillmentComponent calldata[] calldata[] calldata,bytes32,address,uint256) returns (bool[] memory,struct Execution memory[] memory)"
                      }
                    },
                    "id": 3944,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17722:327:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                      "typeString": "tuple(bool[] memory,struct Execution memory[] memory)"
                    }
                  },
                  "functionReturnParameters": 3926,
                  "id": 3945,
                  "nodeType": "Return",
                  "src": "17703:346:30"
                }
              ]
            },
            "baseFunctions": [
              2199
            ],
            "documentation": {
              "id": 3892,
              "nodeType": "StructuredDocumentation",
              "src": "12545:4593:30",
              "text": " @notice Attempt to fill a group of orders, fully or partially, with an\n         arbitrary number of items for offer and consideration per order\n         alongside criteria resolvers containing specific token\n         identifiers and associated proofs. Any order that is not\n         currently active, has already been fully filled, or has been\n         cancelled will be omitted. Remaining offer and consideration\n         items will then be aggregated where possible as indicated by the\n         supplied offer and consideration component arrays and aggregated\n         items will be transferred to the fulfiller or to each intended\n         recipient, respectively. Note that a failing item transfer or an\n         issue with order formatting will cause the entire batch to fail.\n @param advancedOrders            The orders to fulfill along with the\n                                  fraction of those orders to attempt to\n                                  fill. Note that both the offerer and the\n                                  fulfiller must first approve this\n                                  contract (or their conduit if indicated\n                                  by the order) to transfer any relevant\n                                  tokens on their behalf and that\n                                  contracts must implement\n                                  `onERC1155Received` in order to receive\n                                  ERC1155 tokens as consideration. Also\n                                  note that all offer and consideration\n                                  components must have no remainder after\n                                  multiplication of the respective amount\n                                  with the supplied fraction for an\n                                  order's partial fill amount to be\n                                  considered valid.\n @param criteriaResolvers         An array where each element contains a\n                                  reference to a specific offer or\n                                  consideration, a token identifier, and a\n                                  proof that the supplied token identifier\n                                  is contained in the merkle root held by\n                                  the item in question's criteria element.\n                                  Note that an empty criteria indicates\n                                  that any (transferable) token\n                                  identifier on the token in question is\n                                  valid and that no associated proof needs\n                                  to be supplied.\n @param offerFulfillments         An array of FulfillmentComponent arrays\n                                  indicating which offer items to attempt\n                                  to aggregate when preparing executions.\n @param considerationFulfillments An array of FulfillmentComponent arrays\n                                  indicating which consideration items to\n                                  attempt to aggregate when preparing\n                                  executions.\n @param fulfillerConduitKey       A bytes32 value indicating what conduit,\n                                  if any, to source the fulfiller's token\n                                  approvals from. The zero hash signifies\n                                  that no conduit should be used (and\n                                  direct approvals set on Consideration).\n @param recipient                 The intended recipient for all received\n                                  items, with `address(0)` indicating that\n                                  the caller should receive the items.\n @param maximumFulfilled          The maximum number of orders to fulfill.\n @return availableOrders An array of booleans indicating if each order\n                         with an index corresponding to the index of the\n                         returned boolean was fulfillable or not.\n @return executions      An array of elements indicating the sequence of\n                         transfers performed as part of matching the given\n                         orders."
            },
            "functionSelector": "87201b41",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillAvailableAdvancedOrders",
            "nameLocation": "17152:30:30",
            "overrides": {
              "id": 3918,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "17560:8:30"
            },
            "parameters": {
              "id": 3917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3896,
                  "mutability": "mutable",
                  "name": "advancedOrders",
                  "nameLocation": "17215:14:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17192:37:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct AdvancedOrder[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3894,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3893,
                        "name": "AdvancedOrder",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5148,
                        "src": "17192:13:30"
                      },
                      "referencedDeclaration": 5148,
                      "src": "17192:13:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_AdvancedOrder_$5148_storage_ptr",
                        "typeString": "struct AdvancedOrder"
                      }
                    },
                    "id": 3895,
                    "nodeType": "ArrayTypeName",
                    "src": "17192:15:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_storage_$dyn_storage_ptr",
                      "typeString": "struct AdvancedOrder[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3900,
                  "mutability": "mutable",
                  "name": "criteriaResolvers",
                  "nameLocation": "17267:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17239:45:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct CriteriaResolver[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3898,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3897,
                        "name": "CriteriaResolver",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5170,
                        "src": "17239:16:30"
                      },
                      "referencedDeclaration": 5170,
                      "src": "17239:16:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                        "typeString": "struct CriteriaResolver"
                      }
                    },
                    "id": 3899,
                    "nodeType": "ArrayTypeName",
                    "src": "17239:18:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                      "typeString": "struct CriteriaResolver[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3905,
                  "mutability": "mutable",
                  "name": "offerFulfillments",
                  "nameLocation": "17328:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17294:51:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct FulfillmentComponent[][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 3902,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 3901,
                          "name": "FulfillmentComponent",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5184,
                          "src": "17294:20:30"
                        },
                        "referencedDeclaration": 5184,
                        "src": "17294:20:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FulfillmentComponent_$5184_storage_ptr",
                          "typeString": "struct FulfillmentComponent"
                        }
                      },
                      "id": 3903,
                      "nodeType": "ArrayTypeName",
                      "src": "17294:22:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_ptr",
                        "typeString": "struct FulfillmentComponent[]"
                      }
                    },
                    "id": 3904,
                    "nodeType": "ArrayTypeName",
                    "src": "17294:24:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_$dyn_storage_ptr",
                      "typeString": "struct FulfillmentComponent[][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3910,
                  "mutability": "mutable",
                  "name": "considerationFulfillments",
                  "nameLocation": "17389:25:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17355:59:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_calldata_ptr_$dyn_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct FulfillmentComponent[][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 3907,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 3906,
                          "name": "FulfillmentComponent",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 5184,
                          "src": "17355:20:30"
                        },
                        "referencedDeclaration": 5184,
                        "src": "17355:20:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FulfillmentComponent_$5184_storage_ptr",
                          "typeString": "struct FulfillmentComponent"
                        }
                      },
                      "id": 3908,
                      "nodeType": "ArrayTypeName",
                      "src": "17355:22:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_ptr",
                        "typeString": "struct FulfillmentComponent[]"
                      }
                    },
                    "id": 3909,
                    "nodeType": "ArrayTypeName",
                    "src": "17355:24:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_struct$_FulfillmentComponent_$5184_storage_$dyn_storage_$dyn_storage_ptr",
                      "typeString": "struct FulfillmentComponent[][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3912,
                  "mutability": "mutable",
                  "name": "fulfillerConduitKey",
                  "nameLocation": "17432:19:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17424:27:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3911,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "17424:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3914,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "17469:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17461:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17461:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3916,
                  "mutability": "mutable",
                  "name": "maximumFulfilled",
                  "nameLocation": "17496:16:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17488:24:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17488:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17182:336:30"
            },
            "returnParameters": {
              "id": 3926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3921,
                  "mutability": "mutable",
                  "name": "availableOrders",
                  "nameLocation": "17600:15:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17586:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                    "typeString": "bool[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3919,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "17586:4:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "id": 3920,
                    "nodeType": "ArrayTypeName",
                    "src": "17586:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                      "typeString": "bool[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3925,
                  "mutability": "mutable",
                  "name": "executions",
                  "nameLocation": "17636:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3947,
                  "src": "17617:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Execution[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3923,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3922,
                        "name": "Execution",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5192,
                        "src": "17617:9:30"
                      },
                      "referencedDeclaration": 5192,
                      "src": "17617:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Execution_$5192_storage_ptr",
                        "typeString": "struct Execution"
                      }
                    },
                    "id": 3924,
                    "nodeType": "ArrayTypeName",
                    "src": "17617:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_storage_$dyn_storage_ptr",
                      "typeString": "struct Execution[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17585:62:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 3978,
            "nodeType": "FunctionDefinition",
            "src": "19557:478:30",
            "nodes": [],
            "body": {
              "id": 3977,
              "nodeType": "Block",
              "src": "19728:307:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 3966,
                            "name": "orders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3952,
                            "src": "19899:6:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "struct Order calldata[] calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                              "typeString": "struct Order calldata[] calldata"
                            }
                          ],
                          "id": 3965,
                          "name": "_convertOrdersToAdvanced",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8220,
                          "src": "19874:24:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$",
                            "typeString": "function (struct Order calldata[] calldata) pure returns (struct AdvancedOrder memory[] memory)"
                          }
                        },
                        "id": 3967,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19874:32:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 3972,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "19947:1:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 3971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "NewExpression",
                          "src": "19924:22:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (struct CriteriaResolver memory[] memory)"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 3969,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3968,
                                "name": "CriteriaResolver",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 5170,
                                "src": "19928:16:30"
                              },
                              "referencedDeclaration": 5170,
                              "src": "19928:16:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                                "typeString": "struct CriteriaResolver"
                              }
                            },
                            "id": 3970,
                            "nodeType": "ArrayTypeName",
                            "src": "19928:18:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                              "typeString": "struct CriteriaResolver[]"
                            }
                          }
                        },
                        "id": 3973,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19924:25:30",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct CriteriaResolver memory[] memory"
                        }
                      },
                      {
                        "id": 3974,
                        "name": "fulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3956,
                        "src": "20002:12:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct Fulfillment calldata[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct CriteriaResolver memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct Fulfillment calldata[] calldata"
                        }
                      ],
                      "id": 3964,
                      "name": "_matchAdvancedOrders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7615,
                      "src": "19836:20:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (struct AdvancedOrder memory[] memory,struct CriteriaResolver memory[] memory,struct Fulfillment calldata[] calldata) returns (struct Execution memory[] memory)"
                      }
                    },
                    "id": 3975,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "19836:192:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Execution memory[] memory"
                    }
                  },
                  "functionReturnParameters": 3963,
                  "id": 3976,
                  "nodeType": "Return",
                  "src": "19817:211:30"
                }
              ]
            },
            "baseFunctions": [
              2215
            ],
            "documentation": {
              "id": 3948,
              "nodeType": "StructuredDocumentation",
              "src": "18062:1490:30",
              "text": " @notice Match an arbitrary number of orders, each with an arbitrary\n         number of items for offer and consideration along with a set of\n         fulfillments allocating offer components to consideration\n         components. Note that this function does not support\n         criteria-based or partial filling of orders (though filling the\n         remainder of a partially-filled order is supported).\n @param orders            The orders to match. Note that both the offerer\n                          and fulfiller on each order must first approve\n                          this contract (or their conduit if indicated by\n                          the order) to transfer any relevant tokens on\n                          their behalf and each consideration recipient\n                          must implement `onERC1155Received` in order to\n                          receive ERC1155 tokens.\n @param fulfillments      An array of elements allocating offer components\n                          to consideration components. Note that each\n                          consideration component must be fully met in\n                          order for the match operation to be valid.\n @return executions An array of elements indicating the sequence of\n                    transfers performed as part of matching the given\n                    orders."
            },
            "functionSelector": "a8174404",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "matchOrders",
            "nameLocation": "19566:11:30",
            "overrides": {
              "id": 3958,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "19679:8:30"
            },
            "parameters": {
              "id": 3957,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3952,
                  "mutability": "mutable",
                  "name": "orders",
                  "nameLocation": "19604:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3978,
                  "src": "19587:23:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct Order[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3950,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3949,
                        "name": "Order",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5136,
                        "src": "19587:5:30"
                      },
                      "referencedDeclaration": 5136,
                      "src": "19587:5:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$5136_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "id": 3951,
                    "nodeType": "ArrayTypeName",
                    "src": "19587:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Order_$5136_storage_$dyn_storage_ptr",
                      "typeString": "struct Order[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3956,
                  "mutability": "mutable",
                  "name": "fulfillments",
                  "nameLocation": "19643:12:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3978,
                  "src": "19620:35:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct Fulfillment[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3954,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3953,
                        "name": "Fulfillment",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5179,
                        "src": "19620:11:30"
                      },
                      "referencedDeclaration": 5179,
                      "src": "19620:11:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fulfillment_$5179_storage_ptr",
                        "typeString": "struct Fulfillment"
                      }
                    },
                    "id": 3955,
                    "nodeType": "ArrayTypeName",
                    "src": "19620:13:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_storage_$dyn_storage_ptr",
                      "typeString": "struct Fulfillment[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19577:84:30"
            },
            "returnParameters": {
              "id": 3963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3962,
                  "mutability": "mutable",
                  "name": "executions",
                  "nameLocation": "19716:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 3978,
                  "src": "19697:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Execution[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3960,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3959,
                        "name": "Execution",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5192,
                        "src": "19697:9:30"
                      },
                      "referencedDeclaration": 5192,
                      "src": "19697:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Execution_$5192_storage_ptr",
                        "typeString": "struct Execution"
                      }
                    },
                    "id": 3961,
                    "nodeType": "ArrayTypeName",
                    "src": "19697:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_storage_$dyn_storage_ptr",
                      "typeString": "struct Execution[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19696:31:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4006,
            "nodeType": "FunctionDefinition",
            "src": "22468:494:30",
            "nodes": [],
            "body": {
              "id": 4005,
              "nodeType": "Block",
              "src": "22716:246:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4000,
                        "name": "advancedOrders",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3983,
                        "src": "22862:14:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        }
                      },
                      {
                        "id": 4001,
                        "name": "criteriaResolvers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3987,
                        "src": "22894:17:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct CriteriaResolver calldata[] calldata"
                        }
                      },
                      {
                        "id": 4002,
                        "name": "fulfillments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3991,
                        "src": "22929:12:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct Fulfillment calldata[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct AdvancedOrder memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct CriteriaResolver calldata[] calldata"
                        },
                        {
                          "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "struct Fulfillment calldata[] calldata"
                        }
                      ],
                      "id": 3999,
                      "name": "_matchAdvancedOrders",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7615,
                      "src": "22824:20:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_CriteriaResolver_$5170_memory_ptr_$dyn_memory_ptr_$_t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr_$returns$_t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (struct AdvancedOrder memory[] memory,struct CriteriaResolver memory[] memory,struct Fulfillment calldata[] calldata) returns (struct Execution memory[] memory)"
                      }
                    },
                    "id": 4003,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "22824:131:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Execution memory[] memory"
                    }
                  },
                  "functionReturnParameters": 3998,
                  "id": 4004,
                  "nodeType": "Return",
                  "src": "22805:150:30"
                }
              ]
            },
            "baseFunctions": [
              2235
            ],
            "documentation": {
              "id": 3979,
              "nodeType": "StructuredDocumentation",
              "src": "20041:2422:30",
              "text": " @notice Match an arbitrary number of full or partial orders, each with an\n         arbitrary number of items for offer and consideration, supplying\n         criteria resolvers containing specific token identifiers and\n         associated proofs as well as fulfillments allocating offer\n         components to consideration components.\n @param advancedOrders    The advanced orders to match. Note that both the\n                          offerer and fulfiller on each order must first\n                          approve this contract (or their conduit if\n                          indicated by the order) to transfer any relevant\n                          tokens on their behalf and each consideration\n                          recipient must implement `onERC1155Received` in\n                          order to receive ERC1155 tokens. Also note that\n                          the offer and consideration components for each\n                          order must have no remainder after multiplying\n                          the respective amount with the supplied fraction\n                          in order for the group of partial fills to be\n                          considered valid.\n @param criteriaResolvers An array where each element contains a reference\n                          to a specific order as well as that order's\n                          offer or consideration, a token identifier, and\n                          a proof that the supplied token identifier is\n                          contained in the order's merkle root. Note that\n                          an empty root indicates that any (transferable)\n                          token identifier is valid and that no associated\n                          proof needs to be supplied.\n @param fulfillments      An array of elements allocating offer components\n                          to consideration components. Note that each\n                          consideration component must be fully met in\n                          order for the match operation to be valid.\n @return executions An array of elements indicating the sequence of\n                    transfers performed as part of matching the given\n                    orders."
            },
            "functionSelector": "55944a42",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "matchAdvancedOrders",
            "nameLocation": "22477:19:30",
            "overrides": {
              "id": 3993,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "22667:8:30"
            },
            "parameters": {
              "id": 3992,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3983,
                  "mutability": "mutable",
                  "name": "advancedOrders",
                  "nameLocation": "22529:14:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4006,
                  "src": "22506:37:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct AdvancedOrder[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3981,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3980,
                        "name": "AdvancedOrder",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5148,
                        "src": "22506:13:30"
                      },
                      "referencedDeclaration": 5148,
                      "src": "22506:13:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_AdvancedOrder_$5148_storage_ptr",
                        "typeString": "struct AdvancedOrder"
                      }
                    },
                    "id": 3982,
                    "nodeType": "ArrayTypeName",
                    "src": "22506:15:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_AdvancedOrder_$5148_storage_$dyn_storage_ptr",
                      "typeString": "struct AdvancedOrder[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3987,
                  "mutability": "mutable",
                  "name": "criteriaResolvers",
                  "nameLocation": "22581:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4006,
                  "src": "22553:45:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct CriteriaResolver[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3985,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3984,
                        "name": "CriteriaResolver",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5170,
                        "src": "22553:16:30"
                      },
                      "referencedDeclaration": 5170,
                      "src": "22553:16:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CriteriaResolver_$5170_storage_ptr",
                        "typeString": "struct CriteriaResolver"
                      }
                    },
                    "id": 3986,
                    "nodeType": "ArrayTypeName",
                    "src": "22553:18:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CriteriaResolver_$5170_storage_$dyn_storage_ptr",
                      "typeString": "struct CriteriaResolver[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3991,
                  "mutability": "mutable",
                  "name": "fulfillments",
                  "nameLocation": "22631:12:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4006,
                  "src": "22608:35:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct Fulfillment[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3989,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3988,
                        "name": "Fulfillment",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5179,
                        "src": "22608:11:30"
                      },
                      "referencedDeclaration": 5179,
                      "src": "22608:11:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Fulfillment_$5179_storage_ptr",
                        "typeString": "struct Fulfillment"
                      }
                    },
                    "id": 3990,
                    "nodeType": "ArrayTypeName",
                    "src": "22608:13:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Fulfillment_$5179_storage_$dyn_storage_ptr",
                      "typeString": "struct Fulfillment[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22496:153:30"
            },
            "returnParameters": {
              "id": 3998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3997,
                  "mutability": "mutable",
                  "name": "executions",
                  "nameLocation": "22704:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4006,
                  "src": "22685:29:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Execution_$5192_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Execution[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3995,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 3994,
                        "name": "Execution",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5192,
                        "src": "22685:9:30"
                      },
                      "referencedDeclaration": 5192,
                      "src": "22685:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Execution_$5192_storage_ptr",
                        "typeString": "struct Execution"
                      }
                    },
                    "id": 3996,
                    "nodeType": "ArrayTypeName",
                    "src": "22685:11:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Execution_$5192_storage_$dyn_storage_ptr",
                      "typeString": "struct Execution[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "22684:31:30"
            },
            "scope": 4163,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4024,
            "nodeType": "FunctionDefinition",
            "src": "23481:196:30",
            "nodes": [],
            "body": {
              "id": 4023,
              "nodeType": "Block",
              "src": "23603:74:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4021,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4017,
                      "name": "cancelled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4015,
                      "src": "23643:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4019,
                          "name": "orders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4011,
                          "src": "23663:6:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_OrderComponents_$5009_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct OrderComponents calldata[] calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_struct$_OrderComponents_$5009_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct OrderComponents calldata[] calldata"
                          }
                        ],
                        "id": 4018,
                        "name": "_cancel",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8722,
                        "src": "23655:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_OrderComponents_$5009_calldata_ptr_$dyn_calldata_ptr_$returns$_t_bool_$",
                          "typeString": "function (struct OrderComponents calldata[] calldata) returns (bool)"
                        }
                      },
                      "id": 4020,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "23655:15:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "23643:27:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4022,
                  "nodeType": "ExpressionStatement",
                  "src": "23643:27:30"
                }
              ]
            },
            "baseFunctions": [
              2245
            ],
            "documentation": {
              "id": 4007,
              "nodeType": "StructuredDocumentation",
              "src": "22968:508:30",
              "text": " @notice Cancel an arbitrary number of orders. Note that only the offerer\n         or the zone of a given order may cancel it. Callers should ensure\n         that the intended order was cancelled by calling `getOrderStatus`\n         and confirming that `isCancelled` returns `true`.\n @param orders The orders to cancel.\n @return cancelled A boolean indicating whether the supplied orders have\n                   been successfully cancelled."
            },
            "functionSelector": "fd9f1e10",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cancel",
            "nameLocation": "23490:6:30",
            "overrides": {
              "id": 4013,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "23557:8:30"
            },
            "parameters": {
              "id": 4012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4011,
                  "mutability": "mutable",
                  "name": "orders",
                  "nameLocation": "23524:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4024,
                  "src": "23497:33:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_OrderComponents_$5009_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct OrderComponents[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4009,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 4008,
                        "name": "OrderComponents",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5009,
                        "src": "23497:15:30"
                      },
                      "referencedDeclaration": 5009,
                      "src": "23497:15:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_OrderComponents_$5009_storage_ptr",
                        "typeString": "struct OrderComponents"
                      }
                    },
                    "id": 4010,
                    "nodeType": "ArrayTypeName",
                    "src": "23497:17:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_OrderComponents_$5009_storage_$dyn_storage_ptr",
                      "typeString": "struct OrderComponents[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23496:35:30"
            },
            "returnParameters": {
              "id": 4016,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4015,
                  "mutability": "mutable",
                  "name": "cancelled",
                  "nameLocation": "23588:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4024,
                  "src": "23583:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4014,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "23583:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "23582:16:30"
            },
            "scope": 4163,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4042,
            "nodeType": "FunctionDefinition",
            "src": "24517:192:30",
            "nodes": [],
            "body": {
              "id": 4041,
              "nodeType": "Block",
              "src": "24631:78:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4039,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4035,
                      "name": "validated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4033,
                      "src": "24673:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4037,
                          "name": "orders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4029,
                          "src": "24695:6:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct Order calldata[] calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                            "typeString": "struct Order calldata[] calldata"
                          }
                        ],
                        "id": 4036,
                        "name": "_validate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8830,
                        "src": "24685:9:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr_$returns$_t_bool_$",
                          "typeString": "function (struct Order calldata[] calldata) returns (bool)"
                        }
                      },
                      "id": 4038,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "24685:17:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "24673:29:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4040,
                  "nodeType": "ExpressionStatement",
                  "src": "24673:29:30"
                }
              ]
            },
            "baseFunctions": [
              2255
            ],
            "documentation": {
              "id": 4025,
              "nodeType": "StructuredDocumentation",
              "src": "23683:829:30",
              "text": " @notice Validate an arbitrary number of orders, thereby registering their\n         signatures as valid and allowing the fulfiller to skip signature\n         verification on fulfillment. Note that validated orders may still\n         be unfulfillable due to invalid item amounts or other factors;\n         callers should determine whether validated orders are fulfillable\n         by simulating the fulfillment call prior to execution. Also note\n         that anyone can validate a signed order, but only the offerer can\n         validate an order without supplying a signature.\n @param orders The orders to validate.\n @return validated A boolean indicating whether the supplied orders have\n                   been successfully validated."
            },
            "functionSelector": "88147732",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validate",
            "nameLocation": "24526:8:30",
            "overrides": {
              "id": 4031,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "24585:8:30"
            },
            "parameters": {
              "id": 4030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4029,
                  "mutability": "mutable",
                  "name": "orders",
                  "nameLocation": "24552:6:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4042,
                  "src": "24535:23:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Order_$5136_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct Order[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4027,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 4026,
                        "name": "Order",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 5136,
                        "src": "24535:5:30"
                      },
                      "referencedDeclaration": 5136,
                      "src": "24535:5:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Order_$5136_storage_ptr",
                        "typeString": "struct Order"
                      }
                    },
                    "id": 4028,
                    "nodeType": "ArrayTypeName",
                    "src": "24535:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Order_$5136_storage_$dyn_storage_ptr",
                      "typeString": "struct Order[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24534:25:30"
            },
            "returnParameters": {
              "id": 4034,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4033,
                  "mutability": "mutable",
                  "name": "validated",
                  "nameLocation": "24616:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4042,
                  "src": "24611:14:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4032,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "24611:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "24610:16:30"
            },
            "scope": 4163,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4055,
            "nodeType": "FunctionDefinition",
            "src": "24972:187:30",
            "nodes": [],
            "body": {
              "id": 4054,
              "nodeType": "Block",
              "src": "25047:112:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4052,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4049,
                      "name": "newCounter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4047,
                      "src": "25120:10:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4050,
                        "name": "_incrementCounter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5232,
                        "src": "25133:17:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_uint256_$",
                          "typeString": "function () returns (uint256)"
                        }
                      },
                      "id": 4051,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "25133:19:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "25120:32:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4053,
                  "nodeType": "ExpressionStatement",
                  "src": "25120:32:30"
                }
              ]
            },
            "baseFunctions": [
              2261
            ],
            "documentation": {
              "id": 4043,
              "nodeType": "StructuredDocumentation",
              "src": "24715:252:30",
              "text": " @notice Cancel all orders from a given offerer with a given zone in bulk\n         by incrementing a counter. Note that only the offerer may\n         increment the counter.\n @return newCounter The new counter."
            },
            "functionSelector": "5b34b966",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "incrementCounter",
            "nameLocation": "24981:16:30",
            "overrides": {
              "id": 4045,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "25009:8:30"
            },
            "parameters": {
              "id": 4044,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "24997:2:30"
            },
            "returnParameters": {
              "id": 4048,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4047,
                  "mutability": "mutable",
                  "name": "newCounter",
                  "nameLocation": "25035:10:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4055,
                  "src": "25027:18:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4046,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25027:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25026:20:30"
            },
            "scope": 4163,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4098,
            "nodeType": "FunctionDefinition",
            "src": "25343:705:30",
            "nodes": [],
            "body": {
              "id": 4097,
              "nodeType": "Block",
              "src": "25484:564:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4095,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4065,
                      "name": "orderHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4063,
                      "src": "25573:9:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "expression": {
                                "id": 4068,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25648:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4069,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "offerer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4983,
                              "src": "25648:13:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 4070,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25679:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4071,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "zone",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4985,
                              "src": "25679:10:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 4072,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25707:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4073,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "offer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4989,
                              "src": "25707:11:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_OfferItem_$5021_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct OfferItem calldata[] calldata"
                              }
                            },
                            {
                              "expression": {
                                "id": 4074,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25736:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4075,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "consideration",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4993,
                              "src": "25736:19:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_ConsiderationItem_$5035_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct ConsiderationItem calldata[] calldata"
                              }
                            },
                            {
                              "expression": {
                                "id": 4076,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25773:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4077,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "orderType",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4996,
                              "src": "25773:15:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_OrderType_$4932",
                                "typeString": "enum OrderType"
                              }
                            },
                            {
                              "expression": {
                                "id": 4078,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25806:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4079,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "startTime",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 4998,
                              "src": "25806:15:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4080,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25839:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4081,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "endTime",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 5000,
                              "src": "25839:13:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4082,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25870:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4083,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "zoneHash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 5002,
                              "src": "25870:14:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "expression": {
                                "id": 4084,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25902:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4085,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "salt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 5004,
                              "src": "25902:10:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 4086,
                                "name": "order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4059,
                                "src": "25930:5:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                  "typeString": "struct OrderComponents calldata"
                                }
                              },
                              "id": 4087,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "conduitKey",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 5006,
                              "src": "25930:16:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "expression": {
                                "expression": {
                                  "id": 4088,
                                  "name": "order",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4059,
                                  "src": "25964:5:30",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                                    "typeString": "struct OrderComponents calldata"
                                  }
                                },
                                "id": 4089,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "consideration",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 4993,
                                "src": "25964:19:30",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_ConsiderationItem_$5035_calldata_ptr_$dyn_calldata_ptr",
                                  "typeString": "struct ConsiderationItem calldata[] calldata"
                                }
                              },
                              "id": 4090,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "25964:26:30",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_array$_t_struct$_OfferItem_$5021_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct OfferItem calldata[] calldata"
                              },
                              {
                                "typeIdentifier": "t_array$_t_struct$_ConsiderationItem_$5035_calldata_ptr_$dyn_calldata_ptr",
                                "typeString": "struct ConsiderationItem calldata[] calldata"
                              },
                              {
                                "typeIdentifier": "t_enum$_OrderType_$4932",
                                "typeString": "enum OrderType"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4067,
                            "name": "OrderParameters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5130,
                            "src": "25615:15:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_OrderParameters_$5130_storage_ptr_$",
                              "typeString": "type(struct OrderParameters storage pointer)"
                            }
                          },
                          "id": 4091,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25615:389:30",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_OrderParameters_$5130_memory_ptr",
                            "typeString": "struct OrderParameters memory"
                          }
                        },
                        {
                          "expression": {
                            "id": 4092,
                            "name": "order",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4059,
                            "src": "26018:5:30",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                              "typeString": "struct OrderComponents calldata"
                            }
                          },
                          "id": 4093,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "counter",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5008,
                          "src": "26018:13:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_struct$_OrderParameters_$5130_memory_ptr",
                            "typeString": "struct OrderParameters memory"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 4066,
                        "name": "_deriveOrderHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6596,
                        "src": "25585:16:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_struct$_OrderParameters_$5130_memory_ptr_$_t_uint256_$returns$_t_bytes32_$",
                          "typeString": "function (struct OrderParameters memory,uint256) view returns (bytes32)"
                        }
                      },
                      "id": 4094,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "25585:456:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "25573:468:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 4096,
                  "nodeType": "ExpressionStatement",
                  "src": "25573:468:30"
                }
              ]
            },
            "baseFunctions": [
              2270
            ],
            "documentation": {
              "id": 4056,
              "nodeType": "StructuredDocumentation",
              "src": "25165:173:30",
              "text": " @notice Retrieve the order hash for a given order.\n @param order The components of the order.\n @return orderHash The order hash."
            },
            "functionSelector": "79df72bd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOrderHash",
            "nameLocation": "25352:12:30",
            "overrides": {
              "id": 4061,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "25435:8:30"
            },
            "parameters": {
              "id": 4060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4059,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "25390:5:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4098,
                  "src": "25365:30:30",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_OrderComponents_$5009_calldata_ptr",
                    "typeString": "struct OrderComponents"
                  },
                  "typeName": {
                    "id": 4058,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4057,
                      "name": "OrderComponents",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5009,
                      "src": "25365:15:30"
                    },
                    "referencedDeclaration": 5009,
                    "src": "25365:15:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_OrderComponents_$5009_storage_ptr",
                      "typeString": "struct OrderComponents"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25364:32:30"
            },
            "returnParameters": {
              "id": 4064,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4063,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "25469:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4098,
                  "src": "25461:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4062,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "25461:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "25460:19:30"
            },
            "scope": 4163,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4118,
            "nodeType": "FunctionDefinition",
            "src": "26935:354:30",
            "nodes": [],
            "body": {
              "id": 4117,
              "nodeType": "Block",
              "src": "27180:109:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4114,
                        "name": "orderHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4101,
                        "src": "27272:9:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 4113,
                      "name": "_getOrderStatus",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8862,
                      "src": "27256:15:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bool_$_t_bool_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (bytes32) view returns (bool,bool,uint256,uint256)"
                      }
                    },
                    "id": 4115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "27256:26:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bool_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,bool,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 4112,
                  "id": 4116,
                  "nodeType": "Return",
                  "src": "27249:33:30"
                }
              ]
            },
            "baseFunctions": [
              2284
            ],
            "documentation": {
              "id": 4099,
              "nodeType": "StructuredDocumentation",
              "src": "26054:876:30",
              "text": " @notice Retrieve the status of a given order by hash, including whether\n         the order has been cancelled or validated and the fraction of the\n         order that has been filled.\n @param orderHash The order hash in question.\n @return isValidated A boolean indicating whether the order in question\n                     has been validated (i.e. previously approved or\n                     partially filled).\n @return isCancelled A boolean indicating whether the order in question\n                     has been cancelled.\n @return totalFilled The total portion of the order that has been filled\n                     (i.e. the \"numerator\").\n @return totalSize   The total size of the order that is either filled or\n                     unfilled (i.e. the \"denominator\")."
            },
            "functionSelector": "46423aa7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getOrderStatus",
            "nameLocation": "26944:14:30",
            "overrides": {
              "id": 4103,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "27016:8:30"
            },
            "parameters": {
              "id": 4102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4101,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "26967:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4118,
                  "src": "26959:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4100,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "26959:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "26958:19:30"
            },
            "returnParameters": {
              "id": 4112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4105,
                  "mutability": "mutable",
                  "name": "isValidated",
                  "nameLocation": "27060:11:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4118,
                  "src": "27055:16:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4104,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "27055:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4107,
                  "mutability": "mutable",
                  "name": "isCancelled",
                  "nameLocation": "27090:11:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4118,
                  "src": "27085:16:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4106,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "27085:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4109,
                  "mutability": "mutable",
                  "name": "totalFilled",
                  "nameLocation": "27123:11:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4118,
                  "src": "27115:19:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27115:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4111,
                  "mutability": "mutable",
                  "name": "totalSize",
                  "nameLocation": "27156:9:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4118,
                  "src": "27148:17:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4110,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27148:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27041:134:30"
            },
            "scope": 4163,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4134,
            "nodeType": "FunctionDefinition",
            "src": "27481:225:30",
            "nodes": [],
            "body": {
              "id": 4133,
              "nodeType": "Block",
              "src": "27603:103:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4127,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4125,
                      "src": "27669:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4129,
                          "name": "offerer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4121,
                          "src": "27691:7:30",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 4128,
                        "name": "_getCounter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5247,
                        "src": "27679:11:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) view returns (uint256)"
                        }
                      },
                      "id": 4130,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "27679:20:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "27669:30:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4132,
                  "nodeType": "ExpressionStatement",
                  "src": "27669:30:30"
                }
              ]
            },
            "baseFunctions": [
              2292
            ],
            "documentation": {
              "id": 4119,
              "nodeType": "StructuredDocumentation",
              "src": "27295:181:30",
              "text": " @notice Retrieve the current counter for a given offerer.\n @param offerer The offerer in question.\n @return counter The current counter."
            },
            "functionSelector": "f07ec373",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCounter",
            "nameLocation": "27490:10:30",
            "overrides": {
              "id": 4123,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "27556:8:30"
            },
            "parameters": {
              "id": 4122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4121,
                  "mutability": "mutable",
                  "name": "offerer",
                  "nameLocation": "27509:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4134,
                  "src": "27501:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27501:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27500:17:30"
            },
            "returnParameters": {
              "id": 4126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4125,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "27590:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4134,
                  "src": "27582:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4124,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "27582:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "27581:17:30"
            },
            "scope": 4163,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4149,
            "nodeType": "FunctionDefinition",
            "src": "28011:303:30",
            "nodes": [],
            "body": {
              "id": 4148,
              "nodeType": "Block",
              "src": "28223:91:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 4145,
                      "name": "_information",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6664,
                      "src": "28293:12:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$_t_bytes32_$_t_address_$",
                        "typeString": "function () view returns (string memory,bytes32,address)"
                      }
                    },
                    "id": 4146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "28293:14:30",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_string_memory_ptr_$_t_bytes32_$_t_address_$",
                      "typeString": "tuple(string memory,bytes32,address)"
                    }
                  },
                  "functionReturnParameters": 4144,
                  "id": 4147,
                  "nodeType": "Return",
                  "src": "28286:21:30"
                }
              ]
            },
            "baseFunctions": [
              2302
            ],
            "documentation": {
              "id": 4135,
              "nodeType": "StructuredDocumentation",
              "src": "27712:294:30",
              "text": " @notice Retrieve configuration information for this contract.\n @return version           The contract version.\n @return domainSeparator   The domain separator for this contract.\n @return conduitController The conduit Controller set for this contract."
            },
            "functionSelector": "f47b7740",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "information",
            "nameLocation": "28020:11:30",
            "overrides": {
              "id": 4137,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "28072:8:30"
            },
            "parameters": {
              "id": 4136,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28031:2:30"
            },
            "returnParameters": {
              "id": 4144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4139,
                  "mutability": "mutable",
                  "name": "version",
                  "nameLocation": "28125:7:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4149,
                  "src": "28111:21:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4138,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "28111:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4141,
                  "mutability": "mutable",
                  "name": "domainSeparator",
                  "nameLocation": "28154:15:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4149,
                  "src": "28146:23:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4140,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "28146:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4143,
                  "mutability": "mutable",
                  "name": "conduitController",
                  "nameLocation": "28191:17:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4149,
                  "src": "28183:25:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4142,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "28183:7:30",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "28097:121:30"
            },
            "scope": 4163,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 4162,
            "nodeType": "FunctionDefinition",
            "src": "28449:195:30",
            "nodes": [],
            "body": {
              "id": 4161,
              "nodeType": "Block",
              "src": "28561:83:30",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 4159,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4156,
                      "name": "contractName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4154,
                      "src": "28615:12:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4157,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4266,
                        "src": "28630:5:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$__$returns$_t_string_memory_ptr_$",
                          "typeString": "function () pure returns (string memory)"
                        }
                      },
                      "id": 4158,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "28630:7:30",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "28615:22:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 4160,
                  "nodeType": "ExpressionStatement",
                  "src": "28615:22:30"
                }
              ]
            },
            "baseFunctions": [
              2308
            ],
            "documentation": {
              "id": 4150,
              "nodeType": "StructuredDocumentation",
              "src": "28320:124:30",
              "text": " @notice Retrieve the name of this contract.\n @return contractName The name of this contract."
            },
            "functionSelector": "06fdde03",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "28458:4:30",
            "overrides": {
              "id": 4152,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "28503:8:30"
            },
            "parameters": {
              "id": 4151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "28462:2:30"
            },
            "returnParameters": {
              "id": 4155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4154,
                  "mutability": "mutable",
                  "name": "contractName",
                  "nameLocation": "28543:12:30",
                  "nodeType": "VariableDeclaration",
                  "scope": 4162,
                  "src": "28529:26:30",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4153,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "28529:6:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "28528:28:30"
            },
            "scope": 4163,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3745,
              "name": "ConsiderationInterface",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2309,
              "src": "1141:22:30"
            },
            "id": 3746,
            "nodeType": "InheritanceSpecifier",
            "src": "1141:22:30"
          },
          {
            "baseName": {
              "id": 3747,
              "name": "OrderCombiner",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7717,
              "src": "1165:13:30"
            },
            "id": 3748,
            "nodeType": "InheritanceSpecifier",
            "src": "1165:13:30"
          }
        ],
        "canonicalName": "Consideration",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3744,
          "nodeType": "StructuredDocumentation",
          "src": "441:673:30",
          "text": " @title Consideration\n @author 0age\n @custom:coauthor d1ll0n\n @custom:coauthor transmissions11\n @custom:version 1.1\n @notice Consideration is a generalized ETH/ERC20/ERC721/ERC1155 marketplace.\n         It minimizes external calls to the greatest extent possible and\n         provides lightweight methods for common routes as well as more\n         flexible methods for composing advanced orders or groups of orders.\n         Each order contains an arbitrary number of items that may be spent\n         (the \"offer\") along with an arbitrary number of items that must be\n         received back by the indicated recipients (the \"consideration\")."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4163,
          7717,
          6537,
          2367,
          8221,
          3026,
          1681,
          5621,
          2334,
          3726,
          8874,
          9657,
          6206,
          9031,
          9444,
          8966,
          6717,
          2829,
          2674,
          3129,
          2734,
          5248,
          8928,
          2432,
          6677,
          4395,
          2085,
          2309
        ],
        "name": "Consideration",
        "nameLocation": "1124:13:30",
        "scope": 4164,
        "usedErrors": [
          1680,
          2014,
          2017,
          2024,
          2027,
          2032,
          2041,
          2044,
          2051,
          2054,
          2059,
          2064,
          2067,
          2070,
          2075,
          2078,
          2081,
          2084,
          2315,
          2318,
          2321,
          2324,
          2327,
          2330,
          2333,
          2357,
          2360,
          2363,
          2366,
          2431,
          2664,
          2667,
          2670,
          2673,
          2680,
          2683,
          2686,
          2699,
          2714,
          2725,
          2730,
          2733,
          2828
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 30
}